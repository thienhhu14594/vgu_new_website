<div class="testframe_1082-1513">
  <div class="something"
    (mouseenter)="setNavNewsDefault()"
  >something else</div>
  <div class="newsnavbarstickyframe_782-2931">
    Something
    <div class="newsnavbar_736-1132">
      <div class="frame-66_736-1745">
        <app-nav-news
          [property]="propertyN"
          function="News" (click)="setPropertyN('Selected'); scroll(st2)"
        />
        <app-nav-news
          [property]="propertyA"
          function="Admission" (click)="setPropertyA()"
        />
        <app-nav-news
          [property]="propertyR"
          function="Reserach news" (click)="setPropertyR()"
        />
        <app-nav-news
          [property]="propertyU"
          function="Upcoming events" (click)="setPropertyU()"
        />
        <app-nav-news
          [property]="propertyP" 
          function="University Partner" (click)="setPropertyP()"
        />
      </div>
    </div>
  </div>
  <div #st2 class="st2">something 2</div>
  <div #st3 class="st3">something 3</div>
  <div #st4 class="st4">something 4</div>
  <div #st5 class="st5">something 5</div>
  <div #stl class="stl">something last</div>
</div>
//////////////////////////////
propertyN: 'Default' | 'Hover' | 'Selected' = 'Default';
propertyA: 'Default' | 'Hover' | 'Selected' = 'Default';
propertyR: 'Default' | 'Hover' | 'Selected' = 'Default';
propertyU: 'Default' | 'Hover' | 'Selected' = 'Default';
propertyP: 'Default' | 'Hover' | 'Selected' = 'Default';

setNavNewsDefault() {
  this.propertyN = 'Default';
  this.propertyA = 'Default';
  this.propertyR = 'Default';
  this.propertyU = 'Default';
  this.propertyP = 'Default';
}

setPropertyN(status: 'Default' | 'Hover' | 'Selected') {
  if (this.propertyN == 'Selected') {return;}
  this.setNavNewsDefault();
  this.propertyN = status;
}
setPropertyA() {

}
setPropertyR() {

}
setPropertyU() {

}
setPropertyP() {

}

constructor(private cdr: ChangeDetectorRef) { }
@ViewChildren('st2, st3, st4, st5, stl') elements!: QueryList<ElementRef>; // Reference to all elements

ngAfterViewInit() {
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        if (entry.target.className == 'st2') {
          console.log(`Scrolled to st2`);
          this.propertyN = 'Selected';
          console.log(`propertyN = ${this.propertyN}`);
          this.cdr.detectChanges();
        }
      }
    });
  });

  // Start observing all elements
  this.elements.forEach((el) => {
    observer.observe(el.nativeElement);
  });
}

scroll(el: HTMLElement) {
    el.scrollIntoView({ behavior: "smooth" });
}
