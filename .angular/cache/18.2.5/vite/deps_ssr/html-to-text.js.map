{
  "version": 3,
  "sources": ["../../../../../node_modules/deepmerge/dist/cjs.js", "../../../../../node_modules/domelementtype/lib/esm/index.js", "../../../../../node_modules/domhandler/lib/esm/node.js", "../../../../../node_modules/domhandler/lib/esm/index.js", "../../../../../node_modules/leac/lib/leac.mjs", "../../../../../node_modules/peberminta/lib/core.mjs", "../../../../../node_modules/parseley/lib/parseley.mjs", "../../../../../node_modules/selderee/lib/selderee.mjs", "../../../../../node_modules/@selderee/plugin-htmlparser2/lib/hp2-builder.mjs", "../../../../../node_modules/entities/lib/esm/generated/decode-data-html.js", "../../../../../node_modules/entities/lib/esm/generated/decode-data-xml.js", "../../../../../node_modules/entities/lib/esm/decode_codepoint.js", "../../../../../node_modules/entities/lib/esm/decode.js", "../../../../../node_modules/htmlparser2/lib/esm/Tokenizer.js", "../../../../../node_modules/htmlparser2/lib/esm/Parser.js", "../../../../../node_modules/entities/lib/esm/generated/encode-html.js", "../../../../../node_modules/entities/lib/esm/escape.js", "../../../../../node_modules/entities/lib/esm/index.js", "../../../../../node_modules/dom-serializer/lib/esm/foreignNames.js", "../../../../../node_modules/dom-serializer/lib/esm/index.js", "../../../../../node_modules/domutils/lib/esm/helpers.js", "../../../../../node_modules/htmlparser2/lib/esm/index.js", "../../../../../node_modules/html-to-text/lib/html-to-text.mjs"],
  "sourcesContent": ["'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n  return isNonNullObject(value) && !isSpecial(value);\n};\nfunction isNonNullObject(value) {\n  return !!value && typeof value === 'object';\n}\nfunction isSpecial(value) {\n  var stringValue = Object.prototype.toString.call(value);\n  return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\nfunction isReactElement(value) {\n  return value.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction emptyTarget(val) {\n  return Array.isArray(val) ? [] : {};\n}\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n  return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;\n}\nfunction defaultArrayMerge(target, source, options) {\n  return target.concat(source).map(function (element) {\n    return cloneUnlessOtherwiseSpecified(element, options);\n  });\n}\nfunction getMergeFunction(key, options) {\n  if (!options.customMerge) {\n    return deepmerge;\n  }\n  var customMerge = options.customMerge(key);\n  return typeof customMerge === 'function' ? customMerge : deepmerge;\n}\nfunction getEnumerableOwnPropertySymbols(target) {\n  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function (symbol) {\n    return Object.propertyIsEnumerable.call(target, symbol);\n  }) : [];\n}\nfunction getKeys(target) {\n  return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n}\nfunction propertyIsOnObject(object, property) {\n  try {\n    return property in object;\n  } catch (_) {\n    return false;\n  }\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n  return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n  && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n  && Object.propertyIsEnumerable.call(target, key)); // and also unsafe if they're nonenumerable.\n}\nfunction mergeObject(target, source, options) {\n  var destination = {};\n  if (options.isMergeableObject(target)) {\n    getKeys(target).forEach(function (key) {\n      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n    });\n  }\n  getKeys(source).forEach(function (key) {\n    if (propertyIsUnsafe(target, key)) {\n      return;\n    }\n    if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n      destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n    } else {\n      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n    }\n  });\n  return destination;\n}\nfunction deepmerge(target, source, options) {\n  options = options || {};\n  options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n  options.isMergeableObject = options.isMergeableObject || isMergeableObject;\n  // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n  // implementations can use it. The caller may not replace it.\n  options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n  var sourceIsArray = Array.isArray(source);\n  var targetIsArray = Array.isArray(target);\n  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n  if (!sourceAndTargetTypesMatch) {\n    return cloneUnlessOtherwiseSpecified(source, options);\n  } else if (sourceIsArray) {\n    return options.arrayMerge(target, source, options);\n  } else {\n    return mergeObject(target, source, options);\n  }\n}\ndeepmerge.all = function deepmergeAll(array, options) {\n  if (!Array.isArray(array)) {\n    throw new Error('first argument should be an array');\n  }\n  return array.reduce(function (prev, next) {\n    return deepmerge(prev, next, options);\n  }, {});\n};\nvar deepmerge_1 = deepmerge;\nmodule.exports = deepmerge_1;", "/** Types of elements found in htmlparser2's DOM */\nexport var ElementType;\n(function (ElementType) {\n  /** Type for the root element of a document */\n  ElementType[\"Root\"] = \"root\";\n  /** Type for Text */\n  ElementType[\"Text\"] = \"text\";\n  /** Type for <? ... ?> */\n  ElementType[\"Directive\"] = \"directive\";\n  /** Type for <!-- ... --> */\n  ElementType[\"Comment\"] = \"comment\";\n  /** Type for <script> tags */\n  ElementType[\"Script\"] = \"script\";\n  /** Type for <style> tags */\n  ElementType[\"Style\"] = \"style\";\n  /** Type for Any tag */\n  ElementType[\"Tag\"] = \"tag\";\n  /** Type for <![CDATA[ ... ]]> */\n  ElementType[\"CDATA\"] = \"cdata\";\n  /** Type for <!doctype ...> */\n  ElementType[\"Doctype\"] = \"doctype\";\n})(ElementType || (ElementType = {}));\n/**\n * Tests whether an element is a tag or not.\n *\n * @param elem Element to test\n */\nexport function isTag(elem) {\n  return elem.type === ElementType.Tag || elem.type === ElementType.Script || elem.type === ElementType.Style;\n}\n// Exports for backwards compatibility\n/** Type for the root element of a document */\nexport const Root = ElementType.Root;\n/** Type for Text */\nexport const Text = ElementType.Text;\n/** Type for <? ... ?> */\nexport const Directive = ElementType.Directive;\n/** Type for <!-- ... --> */\nexport const Comment = ElementType.Comment;\n/** Type for <script> tags */\nexport const Script = ElementType.Script;\n/** Type for <style> tags */\nexport const Style = ElementType.Style;\n/** Type for Any tag */\nexport const Tag = ElementType.Tag;\n/** Type for <![CDATA[ ... ]]> */\nexport const CDATA = ElementType.CDATA;\n/** Type for <!doctype ...> */\nexport const Doctype = ElementType.Doctype;", "import { ElementType, isTag as isTagRaw } from \"domelementtype\";\n/**\n * This object will be used as the prototype for Nodes when creating a\n * DOM-Level-1-compliant structure.\n */\nexport class Node {\n  constructor() {\n    /** Parent of the node */\n    this.parent = null;\n    /** Previous sibling */\n    this.prev = null;\n    /** Next sibling */\n    this.next = null;\n    /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */\n    this.startIndex = null;\n    /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */\n    this.endIndex = null;\n  }\n  // Read-write aliases for properties\n  /**\n   * Same as {@link parent}.\n   * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n   */\n  get parentNode() {\n    return this.parent;\n  }\n  set parentNode(parent) {\n    this.parent = parent;\n  }\n  /**\n   * Same as {@link prev}.\n   * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n   */\n  get previousSibling() {\n    return this.prev;\n  }\n  set previousSibling(prev) {\n    this.prev = prev;\n  }\n  /**\n   * Same as {@link next}.\n   * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n   */\n  get nextSibling() {\n    return this.next;\n  }\n  set nextSibling(next) {\n    this.next = next;\n  }\n  /**\n   * Clone this node, and optionally its children.\n   *\n   * @param recursive Clone child nodes as well.\n   * @returns A clone of the node.\n   */\n  cloneNode(recursive = false) {\n    return cloneNode(this, recursive);\n  }\n}\n/**\n * A node that contains some data.\n */\nexport class DataNode extends Node {\n  /**\n   * @param data The content of the data node\n   */\n  constructor(data) {\n    super();\n    this.data = data;\n  }\n  /**\n   * Same as {@link data}.\n   * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n   */\n  get nodeValue() {\n    return this.data;\n  }\n  set nodeValue(data) {\n    this.data = data;\n  }\n}\n/**\n * Text within the document.\n */\nexport class Text extends DataNode {\n  constructor() {\n    super(...arguments);\n    this.type = ElementType.Text;\n  }\n  get nodeType() {\n    return 3;\n  }\n}\n/**\n * Comments within the document.\n */\nexport class Comment extends DataNode {\n  constructor() {\n    super(...arguments);\n    this.type = ElementType.Comment;\n  }\n  get nodeType() {\n    return 8;\n  }\n}\n/**\n * Processing instructions, including doc types.\n */\nexport class ProcessingInstruction extends DataNode {\n  constructor(name, data) {\n    super(data);\n    this.name = name;\n    this.type = ElementType.Directive;\n  }\n  get nodeType() {\n    return 1;\n  }\n}\n/**\n * A `Node` that can have children.\n */\nexport class NodeWithChildren extends Node {\n  /**\n   * @param children Children of the node. Only certain node types can have children.\n   */\n  constructor(children) {\n    super();\n    this.children = children;\n  }\n  // Aliases\n  /** First child of the node. */\n  get firstChild() {\n    var _a;\n    return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;\n  }\n  /** Last child of the node. */\n  get lastChild() {\n    return this.children.length > 0 ? this.children[this.children.length - 1] : null;\n  }\n  /**\n   * Same as {@link children}.\n   * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n   */\n  get childNodes() {\n    return this.children;\n  }\n  set childNodes(children) {\n    this.children = children;\n  }\n}\nexport class CDATA extends NodeWithChildren {\n  constructor() {\n    super(...arguments);\n    this.type = ElementType.CDATA;\n  }\n  get nodeType() {\n    return 4;\n  }\n}\n/**\n * The root node of the document.\n */\nexport class Document extends NodeWithChildren {\n  constructor() {\n    super(...arguments);\n    this.type = ElementType.Root;\n  }\n  get nodeType() {\n    return 9;\n  }\n}\n/**\n * An element within the DOM.\n */\nexport class Element extends NodeWithChildren {\n  /**\n   * @param name Name of the tag, eg. `div`, `span`.\n   * @param attribs Object mapping attribute names to attribute values.\n   * @param children Children of the node.\n   */\n  constructor(name, attribs, children = [], type = name === \"script\" ? ElementType.Script : name === \"style\" ? ElementType.Style : ElementType.Tag) {\n    super(children);\n    this.name = name;\n    this.attribs = attribs;\n    this.type = type;\n  }\n  get nodeType() {\n    return 1;\n  }\n  // DOM Level 1 aliases\n  /**\n   * Same as {@link name}.\n   * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n   */\n  get tagName() {\n    return this.name;\n  }\n  set tagName(name) {\n    this.name = name;\n  }\n  get attributes() {\n    return Object.keys(this.attribs).map(name => {\n      var _a, _b;\n      return {\n        name,\n        value: this.attribs[name],\n        namespace: (_a = this[\"x-attribsNamespace\"]) === null || _a === void 0 ? void 0 : _a[name],\n        prefix: (_b = this[\"x-attribsPrefix\"]) === null || _b === void 0 ? void 0 : _b[name]\n      };\n    });\n  }\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node is a `Element`, `false` otherwise.\n */\nexport function isTag(node) {\n  return isTagRaw(node);\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `CDATA`, `false` otherwise.\n */\nexport function isCDATA(node) {\n  return node.type === ElementType.CDATA;\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `Text`, `false` otherwise.\n */\nexport function isText(node) {\n  return node.type === ElementType.Text;\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `Comment`, `false` otherwise.\n */\nexport function isComment(node) {\n  return node.type === ElementType.Comment;\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.\n */\nexport function isDirective(node) {\n  return node.type === ElementType.Directive;\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.\n */\nexport function isDocument(node) {\n  return node.type === ElementType.Root;\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node has children, `false` otherwise.\n */\nexport function hasChildren(node) {\n  return Object.prototype.hasOwnProperty.call(node, \"children\");\n}\n/**\n * Clone a node, and optionally its children.\n *\n * @param recursive Clone child nodes as well.\n * @returns A clone of the node.\n */\nexport function cloneNode(node, recursive = false) {\n  let result;\n  if (isText(node)) {\n    result = new Text(node.data);\n  } else if (isComment(node)) {\n    result = new Comment(node.data);\n  } else if (isTag(node)) {\n    const children = recursive ? cloneChildren(node.children) : [];\n    const clone = new Element(node.name, {\n      ...node.attribs\n    }, children);\n    children.forEach(child => child.parent = clone);\n    if (node.namespace != null) {\n      clone.namespace = node.namespace;\n    }\n    if (node[\"x-attribsNamespace\"]) {\n      clone[\"x-attribsNamespace\"] = {\n        ...node[\"x-attribsNamespace\"]\n      };\n    }\n    if (node[\"x-attribsPrefix\"]) {\n      clone[\"x-attribsPrefix\"] = {\n        ...node[\"x-attribsPrefix\"]\n      };\n    }\n    result = clone;\n  } else if (isCDATA(node)) {\n    const children = recursive ? cloneChildren(node.children) : [];\n    const clone = new CDATA(children);\n    children.forEach(child => child.parent = clone);\n    result = clone;\n  } else if (isDocument(node)) {\n    const children = recursive ? cloneChildren(node.children) : [];\n    const clone = new Document(children);\n    children.forEach(child => child.parent = clone);\n    if (node[\"x-mode\"]) {\n      clone[\"x-mode\"] = node[\"x-mode\"];\n    }\n    result = clone;\n  } else if (isDirective(node)) {\n    const instruction = new ProcessingInstruction(node.name, node.data);\n    if (node[\"x-name\"] != null) {\n      instruction[\"x-name\"] = node[\"x-name\"];\n      instruction[\"x-publicId\"] = node[\"x-publicId\"];\n      instruction[\"x-systemId\"] = node[\"x-systemId\"];\n    }\n    result = instruction;\n  } else {\n    throw new Error(`Not implemented yet: ${node.type}`);\n  }\n  result.startIndex = node.startIndex;\n  result.endIndex = node.endIndex;\n  if (node.sourceCodeLocation != null) {\n    result.sourceCodeLocation = node.sourceCodeLocation;\n  }\n  return result;\n}\nfunction cloneChildren(childs) {\n  const children = childs.map(child => cloneNode(child, true));\n  for (let i = 1; i < children.length; i++) {\n    children[i].prev = children[i - 1];\n    children[i - 1].next = children[i];\n  }\n  return children;\n}", "import { ElementType } from \"domelementtype\";\nimport { Element, Text, Comment, CDATA, Document, ProcessingInstruction } from \"./node.js\";\nexport * from \"./node.js\";\n// Default options\nconst defaultOpts = {\n  withStartIndices: false,\n  withEndIndices: false,\n  xmlMode: false\n};\nexport class DomHandler {\n  /**\n   * @param callback Called once parsing has completed.\n   * @param options Settings for the handler.\n   * @param elementCB Callback whenever a tag is closed.\n   */\n  constructor(callback, options, elementCB) {\n    /** The elements of the DOM */\n    this.dom = [];\n    /** The root element for the DOM */\n    this.root = new Document(this.dom);\n    /** Indicated whether parsing has been completed. */\n    this.done = false;\n    /** Stack of open tags. */\n    this.tagStack = [this.root];\n    /** A data node that is still being written to. */\n    this.lastNode = null;\n    /** Reference to the parser instance. Used for location information. */\n    this.parser = null;\n    // Make it possible to skip arguments, for backwards-compatibility\n    if (typeof options === \"function\") {\n      elementCB = options;\n      options = defaultOpts;\n    }\n    if (typeof callback === \"object\") {\n      options = callback;\n      callback = undefined;\n    }\n    this.callback = callback !== null && callback !== void 0 ? callback : null;\n    this.options = options !== null && options !== void 0 ? options : defaultOpts;\n    this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;\n  }\n  onparserinit(parser) {\n    this.parser = parser;\n  }\n  // Resets the handler back to starting state\n  onreset() {\n    this.dom = [];\n    this.root = new Document(this.dom);\n    this.done = false;\n    this.tagStack = [this.root];\n    this.lastNode = null;\n    this.parser = null;\n  }\n  // Signals the handler that parsing is done\n  onend() {\n    if (this.done) return;\n    this.done = true;\n    this.parser = null;\n    this.handleCallback(null);\n  }\n  onerror(error) {\n    this.handleCallback(error);\n  }\n  onclosetag() {\n    this.lastNode = null;\n    const elem = this.tagStack.pop();\n    if (this.options.withEndIndices) {\n      elem.endIndex = this.parser.endIndex;\n    }\n    if (this.elementCB) this.elementCB(elem);\n  }\n  onopentag(name, attribs) {\n    const type = this.options.xmlMode ? ElementType.Tag : undefined;\n    const element = new Element(name, attribs, undefined, type);\n    this.addNode(element);\n    this.tagStack.push(element);\n  }\n  ontext(data) {\n    const {\n      lastNode\n    } = this;\n    if (lastNode && lastNode.type === ElementType.Text) {\n      lastNode.data += data;\n      if (this.options.withEndIndices) {\n        lastNode.endIndex = this.parser.endIndex;\n      }\n    } else {\n      const node = new Text(data);\n      this.addNode(node);\n      this.lastNode = node;\n    }\n  }\n  oncomment(data) {\n    if (this.lastNode && this.lastNode.type === ElementType.Comment) {\n      this.lastNode.data += data;\n      return;\n    }\n    const node = new Comment(data);\n    this.addNode(node);\n    this.lastNode = node;\n  }\n  oncommentend() {\n    this.lastNode = null;\n  }\n  oncdatastart() {\n    const text = new Text(\"\");\n    const node = new CDATA([text]);\n    this.addNode(node);\n    text.parent = node;\n    this.lastNode = text;\n  }\n  oncdataend() {\n    this.lastNode = null;\n  }\n  onprocessinginstruction(name, data) {\n    const node = new ProcessingInstruction(name, data);\n    this.addNode(node);\n  }\n  handleCallback(error) {\n    if (typeof this.callback === \"function\") {\n      this.callback(error, this.dom);\n    } else if (error) {\n      throw error;\n    }\n  }\n  addNode(node) {\n    const parent = this.tagStack[this.tagStack.length - 1];\n    const previousSibling = parent.children[parent.children.length - 1];\n    if (this.options.withStartIndices) {\n      node.startIndex = this.parser.startIndex;\n    }\n    if (this.options.withEndIndices) {\n      node.endIndex = this.parser.endIndex;\n    }\n    parent.children.push(node);\n    if (previousSibling) {\n      node.prev = previousSibling;\n      previousSibling.next = node;\n    }\n    node.parent = parent;\n    this.lastNode = null;\n  }\n}\nexport default DomHandler;", "const e = /\\n/g;\nfunction n(n) {\n  const o = [...n.matchAll(e)].map(e => e.index || 0);\n  o.unshift(-1);\n  const s = t(o, 0, o.length);\n  return e => r(s, e);\n}\nfunction t(e, n, r) {\n  if (r - n == 1) return {\n    offset: e[n],\n    index: n + 1\n  };\n  const o = Math.ceil((n + r) / 2),\n    s = t(e, n, o),\n    l = t(e, o, r);\n  return {\n    offset: s.offset,\n    low: s,\n    high: l\n  };\n}\nfunction r(e, n) {\n  return function (e) {\n    return Object.prototype.hasOwnProperty.call(e, \"index\");\n  }(e) ? {\n    line: e.index,\n    column: n - e.offset\n  } : r(e.high.offset < n ? e.high : e.low, n);\n}\nfunction o(e, t = \"\", r = {}) {\n  const o = \"string\" != typeof t ? t : r,\n    l = \"string\" == typeof t ? t : \"\",\n    c = e.map(s),\n    f = !!o.lineNumbers;\n  return function (e, t = 0) {\n    const r = f ? n(e) : () => ({\n      line: 0,\n      column: 0\n    });\n    let o = t;\n    const s = [];\n    e: for (; o < e.length;) {\n      let n = !1;\n      for (const t of c) {\n        t.regex.lastIndex = o;\n        const c = t.regex.exec(e);\n        if (c && c[0].length > 0) {\n          if (!t.discard) {\n            const e = r(o),\n              n = \"string\" == typeof t.replace ? c[0].replace(new RegExp(t.regex.source, t.regex.flags), t.replace) : c[0];\n            s.push({\n              state: l,\n              name: t.name,\n              text: n,\n              offset: o,\n              len: c[0].length,\n              line: e.line,\n              column: e.column\n            });\n          }\n          if (o = t.regex.lastIndex, n = !0, t.push) {\n            const n = t.push(e, o);\n            s.push(...n.tokens), o = n.offset;\n          }\n          if (t.pop) break e;\n          break;\n        }\n      }\n      if (!n) break;\n    }\n    return {\n      tokens: s,\n      offset: o,\n      complete: e.length <= o\n    };\n  };\n}\nfunction s(e, n) {\n  return {\n    ...e,\n    regex: l(e, n)\n  };\n}\nfunction l(e, n) {\n  if (0 === e.name.length) throw new Error(`Rule #${n} has empty name, which is not allowed.`);\n  if (function (e) {\n    return Object.prototype.hasOwnProperty.call(e, \"regex\");\n  }(e)) return function (e) {\n    if (e.global) throw new Error(`Regular expression /${e.source}/${e.flags} contains the global flag, which is not allowed.`);\n    return e.sticky ? e : new RegExp(e.source, e.flags + \"y\");\n  }(e.regex);\n  if (function (e) {\n    return Object.prototype.hasOwnProperty.call(e, \"str\");\n  }(e)) {\n    if (0 === e.str.length) throw new Error(`Rule #${n} (\"${e.name}\") has empty \"str\" property, which is not allowed.`);\n    return new RegExp(c(e.str), \"y\");\n  }\n  return new RegExp(c(e.name), \"y\");\n}\nfunction c(e) {\n  return e.replace(/[-[\\]{}()*+!<=:?./\\\\^$|#\\s,]/g, \"\\\\$&\");\n}\nexport { o as createLexer };", "import { clamp, escapeWhitespace } from './util.mjs';\nfunction emit(value) {\n  return (data, i) => ({\n    matched: true,\n    position: i,\n    value: value\n  });\n}\nfunction make(f) {\n  return (data, i) => ({\n    matched: true,\n    position: i,\n    value: f(data, i)\n  });\n}\nfunction action(f) {\n  return (data, i) => {\n    f(data, i);\n    return {\n      matched: true,\n      position: i,\n      value: null\n    };\n  };\n}\nfunction fail(data, i) {\n  return {\n    matched: false\n  };\n}\nfunction error(message) {\n  return (data, i) => {\n    throw new Error(message instanceof Function ? message(data, i) : message);\n  };\n}\nfunction token(onToken, onEnd) {\n  return (data, i) => {\n    let position = i;\n    let value = undefined;\n    if (i < data.tokens.length) {\n      value = onToken(data.tokens[i], data, i);\n      if (value !== undefined) {\n        position++;\n      }\n    } else {\n      onEnd?.(data, i);\n    }\n    return value === undefined ? {\n      matched: false\n    } : {\n      matched: true,\n      position: position,\n      value: value\n    };\n  };\n}\nfunction any(data, i) {\n  return i < data.tokens.length ? {\n    matched: true,\n    position: i + 1,\n    value: data.tokens[i]\n  } : {\n    matched: false\n  };\n}\nfunction satisfy(test) {\n  return (data, i) => i < data.tokens.length && test(data.tokens[i], data, i) ? {\n    matched: true,\n    position: i + 1,\n    value: data.tokens[i]\n  } : {\n    matched: false\n  };\n}\nfunction mapInner(r, f) {\n  return r.matched ? {\n    matched: true,\n    position: r.position,\n    value: f(r.value, r.position)\n  } : r;\n}\nfunction mapOuter(r, f) {\n  return r.matched ? f(r) : r;\n}\nfunction map(p, mapper) {\n  return (data, i) => mapInner(p(data, i), (v, j) => mapper(v, data, i, j));\n}\nfunction map1(p, mapper) {\n  return (data, i) => mapOuter(p(data, i), m => mapper(m, data, i));\n}\nfunction peek(p, f) {\n  return (data, i) => {\n    const r = p(data, i);\n    f(r, data, i);\n    return r;\n  };\n}\nfunction option(p, def) {\n  return (data, i) => {\n    const r = p(data, i);\n    return r.matched ? r : {\n      matched: true,\n      position: i,\n      value: def\n    };\n  };\n}\nfunction not(p) {\n  return (data, i) => {\n    const r = p(data, i);\n    return r.matched ? {\n      matched: false\n    } : {\n      matched: true,\n      position: i,\n      value: true\n    };\n  };\n}\nfunction choice(...ps) {\n  return (data, i) => {\n    for (const p of ps) {\n      const result = p(data, i);\n      if (result.matched) {\n        return result;\n      }\n    }\n    return {\n      matched: false\n    };\n  };\n}\nfunction otherwise(pa, pb) {\n  return (data, i) => {\n    const r1 = pa(data, i);\n    return r1.matched ? r1 : pb(data, i);\n  };\n}\nfunction longest(...ps) {\n  return (data, i) => {\n    let match = undefined;\n    for (const p of ps) {\n      const result = p(data, i);\n      if (result.matched && (!match || match.position < result.position)) {\n        match = result;\n      }\n    }\n    return match || {\n      matched: false\n    };\n  };\n}\nfunction takeWhile(p, test) {\n  return (data, i) => {\n    const values = [];\n    let success = true;\n    do {\n      const r = p(data, i);\n      if (r.matched && test(r.value, values.length + 1, data, i, r.position)) {\n        values.push(r.value);\n        i = r.position;\n      } else {\n        success = false;\n      }\n    } while (success);\n    return {\n      matched: true,\n      position: i,\n      value: values\n    };\n  };\n}\nfunction takeUntil(p, test) {\n  return takeWhile(p, (value, n, data, i, j) => !test(value, n, data, i, j));\n}\nfunction takeWhileP(pValue, pTest) {\n  return takeWhile(pValue, (value, n, data, i) => pTest(data, i).matched);\n}\nfunction takeUntilP(pValue, pTest) {\n  return takeWhile(pValue, (value, n, data, i) => !pTest(data, i).matched);\n}\nfunction many(p) {\n  return takeWhile(p, () => true);\n}\nfunction many1(p) {\n  return ab(p, many(p), (head, tail) => [head, ...tail]);\n}\nfunction ab(pa, pb, join) {\n  return (data, i) => mapOuter(pa(data, i), ma => mapInner(pb(data, ma.position), (vb, j) => join(ma.value, vb, data, i, j)));\n}\nfunction left(pa, pb) {\n  return ab(pa, pb, va => va);\n}\nfunction right(pa, pb) {\n  return ab(pa, pb, (va, vb) => vb);\n}\nfunction abc(pa, pb, pc, join) {\n  return (data, i) => mapOuter(pa(data, i), ma => mapOuter(pb(data, ma.position), mb => mapInner(pc(data, mb.position), (vc, j) => join(ma.value, mb.value, vc, data, i, j))));\n}\nfunction middle(pa, pb, pc) {\n  return abc(pa, pb, pc, (ra, rb) => rb);\n}\nfunction all(...ps) {\n  return (data, i) => {\n    const result = [];\n    let position = i;\n    for (const p of ps) {\n      const r1 = p(data, position);\n      if (r1.matched) {\n        result.push(r1.value);\n        position = r1.position;\n      } else {\n        return {\n          matched: false\n        };\n      }\n    }\n    return {\n      matched: true,\n      position: position,\n      value: result\n    };\n  };\n}\nfunction skip(...ps) {\n  return map(all(...ps), () => null);\n}\nfunction flatten(...ps) {\n  return flatten1(all(...ps));\n}\nfunction flatten1(p) {\n  return map(p, vs => vs.flatMap(v => v));\n}\nfunction sepBy1(pValue, pSep) {\n  return ab(pValue, many(right(pSep, pValue)), (head, tail) => [head, ...tail]);\n}\nfunction sepBy(pValue, pSep) {\n  return otherwise(sepBy1(pValue, pSep), emit([]));\n}\nfunction chainReduce(acc, f) {\n  return (data, i) => {\n    let loop = true;\n    let acc1 = acc;\n    let pos = i;\n    do {\n      const r = f(acc1, data, pos)(data, pos);\n      if (r.matched) {\n        acc1 = r.value;\n        pos = r.position;\n      } else {\n        loop = false;\n      }\n    } while (loop);\n    return {\n      matched: true,\n      position: pos,\n      value: acc1\n    };\n  };\n}\nfunction reduceLeft(acc, p, reducer) {\n  return chainReduce(acc, acc => map(p, (v, data, i, j) => reducer(acc, v, data, i, j)));\n}\nfunction reduceRight(p, acc, reducer) {\n  return map(many(p), (vs, data, i, j) => vs.reduceRight((acc, v) => reducer(v, acc, data, i, j), acc));\n}\nfunction leftAssoc1(pLeft, pOper) {\n  return chain(pLeft, v0 => reduceLeft(v0, pOper, (acc, f) => f(acc)));\n}\nfunction rightAssoc1(pOper, pRight) {\n  return ab(reduceRight(pOper, y => y, (f, acc) => y => f(acc(y))), pRight, (f, v) => f(v));\n}\nfunction leftAssoc2(pLeft, pOper, pRight) {\n  return chain(pLeft, v0 => reduceLeft(v0, ab(pOper, pRight, (f, y) => [f, y]), (acc, [f, y]) => f(acc, y)));\n}\nfunction rightAssoc2(pLeft, pOper, pRight) {\n  return ab(reduceRight(ab(pLeft, pOper, (x, f) => [x, f]), y => y, ([x, f], acc) => y => f(x, acc(y))), pRight, (f, v) => f(v));\n}\nfunction condition(cond, pTrue, pFalse) {\n  return (data, i) => cond(data, i) ? pTrue(data, i) : pFalse(data, i);\n}\nfunction decide(p) {\n  return (data, i) => mapOuter(p(data, i), m1 => m1.value(data, m1.position));\n}\nfunction chain(p, f) {\n  return (data, i) => mapOuter(p(data, i), m1 => f(m1.value, data, i, m1.position)(data, m1.position));\n}\nfunction ahead(p) {\n  return (data, i) => mapOuter(p(data, i), m1 => ({\n    matched: true,\n    position: i,\n    value: m1.value\n  }));\n}\nfunction recursive(f) {\n  return function (data, i) {\n    return f()(data, i);\n  };\n}\nfunction start(data, i) {\n  return i !== 0 ? {\n    matched: false\n  } : {\n    matched: true,\n    position: i,\n    value: true\n  };\n}\nfunction end(data, i) {\n  return i < data.tokens.length ? {\n    matched: false\n  } : {\n    matched: true,\n    position: i,\n    value: true\n  };\n}\nfunction remainingTokensNumber(data, i) {\n  return data.tokens.length - i;\n}\nfunction parserPosition(data, i, formatToken, contextTokens = 3) {\n  const len = data.tokens.length;\n  const lowIndex = clamp(0, i - contextTokens, len - contextTokens);\n  const highIndex = clamp(contextTokens, i + 1 + contextTokens, len);\n  const tokensSlice = data.tokens.slice(lowIndex, highIndex);\n  const lines = [];\n  const indexWidth = String(highIndex - 1).length + 1;\n  if (i < 0) {\n    lines.push(`${String(i).padStart(indexWidth)} >>`);\n  }\n  if (0 < lowIndex) {\n    lines.push('...'.padStart(indexWidth + 6));\n  }\n  for (let j = 0; j < tokensSlice.length; j++) {\n    const index = lowIndex + j;\n    lines.push(`${String(index).padStart(indexWidth)} ${index === i ? '>' : ' '} ${escapeWhitespace(formatToken(tokensSlice[j]))}`);\n  }\n  if (highIndex < len) {\n    lines.push('...'.padStart(indexWidth + 6));\n  }\n  if (len <= i) {\n    lines.push(`${String(i).padStart(indexWidth)} >>`);\n  }\n  return lines.join('\\n');\n}\nfunction parse(parser, tokens, options, formatToken = JSON.stringify) {\n  const data = {\n    tokens: tokens,\n    options: options\n  };\n  const result = parser(data, 0);\n  if (!result.matched) {\n    throw new Error('No match');\n  }\n  if (result.position < data.tokens.length) {\n    throw new Error(`Partial match. Parsing stopped at:\\n${parserPosition(data, result.position, formatToken)}`);\n  }\n  return result.value;\n}\nfunction tryParse(parser, tokens, options) {\n  const result = parser({\n    tokens: tokens,\n    options: options\n  }, 0);\n  return result.matched ? result.value : undefined;\n}\nfunction match(matcher, tokens, options) {\n  const result = matcher({\n    tokens: tokens,\n    options: options\n  }, 0);\n  return result.value;\n}\nexport { ab, abc, action, ahead, all, all as and, any, chain, chainReduce, choice, condition, decide, skip as discard, otherwise as eitherOr, emit, end, end as eof, error, fail, flatten, flatten1, left, leftAssoc1, leftAssoc2, longest, ahead as lookAhead, make, many, many1, map, map1, match, middle, not, emit as of, option, choice as or, otherwise, parse, parserPosition, peek, recursive, reduceLeft, reduceRight, remainingTokensNumber, right, rightAssoc1, rightAssoc2, satisfy, sepBy, sepBy1, skip, many1 as some, start, takeUntil, takeUntilP, takeWhile, takeWhileP, token, tryParse };", "import { createLexer } from 'leac';\nimport * as p from 'peberminta';\nvar ast = /*#__PURE__*/Object.freeze({\n  __proto__: null\n});\nconst ws = `(?:[ \\\\t\\\\r\\\\n\\\\f]*)`;\nconst nl = `(?:\\\\n|\\\\r\\\\n|\\\\r|\\\\f)`;\nconst nonascii = `[^\\\\x00-\\\\x7F]`;\nconst unicode = `(?:\\\\\\\\[0-9a-f]{1,6}(?:\\\\r\\\\n|[ \\\\n\\\\r\\\\t\\\\f])?)`;\nconst escape = `(?:\\\\\\\\[^\\\\n\\\\r\\\\f0-9a-f])`;\nconst nmstart = `(?:[_a-z]|${nonascii}|${unicode}|${escape})`;\nconst nmchar = `(?:[_a-z0-9-]|${nonascii}|${unicode}|${escape})`;\nconst name = `(?:${nmchar}+)`;\nconst ident = `(?:[-]?${nmstart}${nmchar}*)`;\nconst string1 = `'([^\\\\n\\\\r\\\\f\\\\\\\\']|\\\\\\\\${nl}|${nonascii}|${unicode}|${escape})*'`;\nconst string2 = `\"([^\\\\n\\\\r\\\\f\\\\\\\\\"]|\\\\\\\\${nl}|${nonascii}|${unicode}|${escape})*\"`;\nconst lexSelector = createLexer([{\n  name: 'ws',\n  regex: new RegExp(ws)\n}, {\n  name: 'hash',\n  regex: new RegExp(`#${name}`, 'i')\n}, {\n  name: 'ident',\n  regex: new RegExp(ident, 'i')\n}, {\n  name: 'str1',\n  regex: new RegExp(string1, 'i')\n}, {\n  name: 'str2',\n  regex: new RegExp(string2, 'i')\n}, {\n  name: '*'\n}, {\n  name: '.'\n}, {\n  name: ','\n}, {\n  name: '['\n}, {\n  name: ']'\n}, {\n  name: '='\n}, {\n  name: '>'\n}, {\n  name: '|'\n}, {\n  name: '+'\n}, {\n  name: '~'\n}, {\n  name: '^'\n}, {\n  name: '$'\n}]);\nconst lexEscapedString = createLexer([{\n  name: 'unicode',\n  regex: new RegExp(unicode, 'i')\n}, {\n  name: 'escape',\n  regex: new RegExp(escape, 'i')\n}, {\n  name: 'any',\n  regex: new RegExp('[\\\\s\\\\S]', 'i')\n}]);\nfunction sumSpec([a0, a1, a2], [b0, b1, b2]) {\n  return [a0 + b0, a1 + b1, a2 + b2];\n}\nfunction sumAllSpec(ss) {\n  return ss.reduce(sumSpec, [0, 0, 0]);\n}\nconst unicodeEscapedSequence_ = p.token(t => t.name === 'unicode' ? String.fromCodePoint(parseInt(t.text.slice(1), 16)) : undefined);\nconst escapedSequence_ = p.token(t => t.name === 'escape' ? t.text.slice(1) : undefined);\nconst anyChar_ = p.token(t => t.name === 'any' ? t.text : undefined);\nconst escapedString_ = p.map(p.many(p.or(unicodeEscapedSequence_, escapedSequence_, anyChar_)), cs => cs.join(''));\nfunction unescape(escapedString) {\n  const lexerResult = lexEscapedString(escapedString);\n  const result = escapedString_({\n    tokens: lexerResult.tokens,\n    options: undefined\n  }, 0);\n  return result.value;\n}\nfunction literal(name) {\n  return p.token(t => t.name === name ? true : undefined);\n}\nconst whitespace_ = p.token(t => t.name === 'ws' ? null : undefined);\nconst optionalWhitespace_ = p.option(whitespace_, null);\nfunction optionallySpaced(parser) {\n  return p.middle(optionalWhitespace_, parser, optionalWhitespace_);\n}\nconst identifier_ = p.token(t => t.name === 'ident' ? unescape(t.text) : undefined);\nconst hashId_ = p.token(t => t.name === 'hash' ? unescape(t.text.slice(1)) : undefined);\nconst string_ = p.token(t => t.name.startsWith('str') ? unescape(t.text.slice(1, -1)) : undefined);\nconst namespace_ = p.left(p.option(identifier_, ''), literal('|'));\nconst qualifiedName_ = p.eitherOr(p.ab(namespace_, identifier_, (ns, name) => ({\n  name: name,\n  namespace: ns\n})), p.map(identifier_, name => ({\n  name: name,\n  namespace: null\n})));\nconst uniSelector_ = p.eitherOr(p.ab(namespace_, literal('*'), ns => ({\n  type: 'universal',\n  namespace: ns,\n  specificity: [0, 0, 0]\n})), p.map(literal('*'), () => ({\n  type: 'universal',\n  namespace: null,\n  specificity: [0, 0, 0]\n})));\nconst tagSelector_ = p.map(qualifiedName_, ({\n  name,\n  namespace\n}) => ({\n  type: 'tag',\n  name: name,\n  namespace: namespace,\n  specificity: [0, 0, 1]\n}));\nconst classSelector_ = p.ab(literal('.'), identifier_, (fullstop, name) => ({\n  type: 'class',\n  name: name,\n  specificity: [0, 1, 0]\n}));\nconst idSelector_ = p.map(hashId_, name => ({\n  type: 'id',\n  name: name,\n  specificity: [1, 0, 0]\n}));\nconst attrModifier_ = p.token(t => {\n  if (t.name === 'ident') {\n    if (t.text === 'i' || t.text === 'I') {\n      return 'i';\n    }\n    if (t.text === 's' || t.text === 'S') {\n      return 's';\n    }\n  }\n  return undefined;\n});\nconst attrValue_ = p.eitherOr(p.ab(string_, p.option(p.right(optionalWhitespace_, attrModifier_), null), (v, mod) => ({\n  value: v,\n  modifier: mod\n})), p.ab(identifier_, p.option(p.right(whitespace_, attrModifier_), null), (v, mod) => ({\n  value: v,\n  modifier: mod\n})));\nconst attrMatcher_ = p.choice(p.map(literal('='), () => '='), p.ab(literal('~'), literal('='), () => '~='), p.ab(literal('|'), literal('='), () => '|='), p.ab(literal('^'), literal('='), () => '^='), p.ab(literal('$'), literal('='), () => '$='), p.ab(literal('*'), literal('='), () => '*='));\nconst attrPresenceSelector_ = p.abc(literal('['), optionallySpaced(qualifiedName_), literal(']'), (lbr, {\n  name,\n  namespace\n}) => ({\n  type: 'attrPresence',\n  name: name,\n  namespace: namespace,\n  specificity: [0, 1, 0]\n}));\nconst attrValueSelector_ = p.middle(literal('['), p.abc(optionallySpaced(qualifiedName_), attrMatcher_, optionallySpaced(attrValue_), ({\n  name,\n  namespace\n}, matcher, {\n  value,\n  modifier\n}) => ({\n  type: 'attrValue',\n  name: name,\n  namespace: namespace,\n  matcher: matcher,\n  value: value,\n  modifier: modifier,\n  specificity: [0, 1, 0]\n})), literal(']'));\nconst attrSelector_ = p.eitherOr(attrPresenceSelector_, attrValueSelector_);\nconst typeSelector_ = p.eitherOr(uniSelector_, tagSelector_);\nconst subclassSelector_ = p.choice(idSelector_, classSelector_, attrSelector_);\nconst compoundSelector_ = p.map(p.eitherOr(p.flatten(typeSelector_, p.many(subclassSelector_)), p.many1(subclassSelector_)), ss => {\n  return {\n    type: 'compound',\n    list: ss,\n    specificity: sumAllSpec(ss.map(s => s.specificity))\n  };\n});\nconst combinator_ = p.choice(p.map(literal('>'), () => '>'), p.map(literal('+'), () => '+'), p.map(literal('~'), () => '~'), p.ab(literal('|'), literal('|'), () => '||'));\nconst combinatorSeparator_ = p.eitherOr(optionallySpaced(combinator_), p.map(whitespace_, () => ' '));\nconst complexSelector_ = p.leftAssoc2(compoundSelector_, p.map(combinatorSeparator_, c => (left, right) => ({\n  type: 'compound',\n  list: [...right.list, {\n    type: 'combinator',\n    combinator: c,\n    left: left,\n    specificity: left.specificity\n  }],\n  specificity: sumSpec(left.specificity, right.specificity)\n})), compoundSelector_);\nconst listSelector_ = p.leftAssoc2(p.map(complexSelector_, s => ({\n  type: 'list',\n  list: [s]\n})), p.map(optionallySpaced(literal(',')), () => (acc, next) => ({\n  type: 'list',\n  list: [...acc.list, next]\n})), complexSelector_);\nfunction parse_(parser, str) {\n  if (!(typeof str === 'string' || str instanceof String)) {\n    throw new Error('Expected a selector string. Actual input is not a string!');\n  }\n  const lexerResult = lexSelector(str);\n  if (!lexerResult.complete) {\n    throw new Error(`The input \"${str}\" was only partially tokenized, stopped at offset ${lexerResult.offset}!\\n` + prettyPrintPosition(str, lexerResult.offset));\n  }\n  const result = optionallySpaced(parser)({\n    tokens: lexerResult.tokens,\n    options: undefined\n  }, 0);\n  if (!result.matched) {\n    throw new Error(`No match for \"${str}\" input!`);\n  }\n  if (result.position < lexerResult.tokens.length) {\n    const token = lexerResult.tokens[result.position];\n    throw new Error(`The input \"${str}\" was only partially parsed, stopped at offset ${token.offset}!\\n` + prettyPrintPosition(str, token.offset, token.len));\n  }\n  return result.value;\n}\nfunction prettyPrintPosition(str, offset, len = 1) {\n  return `${str.replace(/(\\t)|(\\r)|(\\n)/g, (m, t, r) => t ? '\\u2409' : r ? '\\u240d' : '\\u240a')}\\n${''.padEnd(offset)}${'^'.repeat(len)}`;\n}\nfunction parse(str) {\n  return parse_(listSelector_, str);\n}\nfunction parse1(str) {\n  return parse_(complexSelector_, str);\n}\nfunction serialize(selector) {\n  if (!selector.type) {\n    throw new Error('This is not an AST node.');\n  }\n  switch (selector.type) {\n    case 'universal':\n      return _serNs(selector.namespace) + '*';\n    case 'tag':\n      return _serNs(selector.namespace) + _serIdent(selector.name);\n    case 'class':\n      return '.' + _serIdent(selector.name);\n    case 'id':\n      return '#' + _serIdent(selector.name);\n    case 'attrPresence':\n      return `[${_serNs(selector.namespace)}${_serIdent(selector.name)}]`;\n    case 'attrValue':\n      return `[${_serNs(selector.namespace)}${_serIdent(selector.name)}${selector.matcher}\"${_serStr(selector.value)}\"${selector.modifier ? selector.modifier : ''}]`;\n    case 'combinator':\n      return serialize(selector.left) + selector.combinator;\n    case 'compound':\n      return selector.list.reduce((acc, node) => {\n        if (node.type === 'combinator') {\n          return serialize(node) + acc;\n        } else {\n          return acc + serialize(node);\n        }\n      }, '');\n    case 'list':\n      return selector.list.map(serialize).join(',');\n  }\n}\nfunction _serNs(ns) {\n  return ns || ns === '' ? _serIdent(ns) + '|' : '';\n}\nfunction _codePoint(char) {\n  return `\\\\${char.codePointAt(0).toString(16)} `;\n}\nfunction _serIdent(str) {\n  return str.replace(/(^[0-9])|(^-[0-9])|(^-$)|([-0-9a-zA-Z_]|[^\\x00-\\x7F])|(\\x00)|([\\x01-\\x1f]|\\x7f)|([\\s\\S])/g, (m, d1, d2, hy, safe, nl, ctrl, other) => d1 ? _codePoint(d1) : d2 ? '-' + _codePoint(d2.slice(1)) : hy ? '\\\\-' : safe ? safe : nl ? '\\ufffd' : ctrl ? _codePoint(ctrl) : '\\\\' + other);\n}\nfunction _serStr(str) {\n  return str.replace(/(\")|(\\\\)|(\\x00)|([\\x01-\\x1f]|\\x7f)/g, (m, dq, bs, nl, ctrl) => dq ? '\\\\\"' : bs ? '\\\\\\\\' : nl ? '\\ufffd' : _codePoint(ctrl));\n}\nfunction normalize(selector) {\n  if (!selector.type) {\n    throw new Error('This is not an AST node.');\n  }\n  switch (selector.type) {\n    case 'compound':\n      {\n        selector.list.forEach(normalize);\n        selector.list.sort((a, b) => _compareArrays(_getSelectorPriority(a), _getSelectorPriority(b)));\n        break;\n      }\n    case 'combinator':\n      {\n        normalize(selector.left);\n        break;\n      }\n    case 'list':\n      {\n        selector.list.forEach(normalize);\n        selector.list.sort((a, b) => serialize(a) < serialize(b) ? -1 : 1);\n        break;\n      }\n  }\n  return selector;\n}\nfunction _getSelectorPriority(selector) {\n  switch (selector.type) {\n    case 'universal':\n      return [1];\n    case 'tag':\n      return [1];\n    case 'id':\n      return [2];\n    case 'class':\n      return [3, selector.name];\n    case 'attrPresence':\n      return [4, serialize(selector)];\n    case 'attrValue':\n      return [5, serialize(selector)];\n    case 'combinator':\n      return [15, serialize(selector)];\n  }\n}\nfunction compareSelectors(a, b) {\n  return _compareArrays(a.specificity, b.specificity);\n}\nfunction compareSpecificity(a, b) {\n  return _compareArrays(a, b);\n}\nfunction _compareArrays(a, b) {\n  if (!Array.isArray(a) || !Array.isArray(b)) {\n    throw new Error('Arguments must be arrays.');\n  }\n  const shorter = a.length < b.length ? a.length : b.length;\n  for (let i = 0; i < shorter; i++) {\n    if (a[i] === b[i]) {\n      continue;\n    }\n    return a[i] < b[i] ? -1 : 1;\n  }\n  return a.length - b.length;\n}\nexport { ast as Ast, compareSelectors, compareSpecificity, normalize, parse, parse1, serialize };", "import * as parseley from 'parseley';\nimport { compareSpecificity } from 'parseley';\nvar Ast = /*#__PURE__*/Object.freeze({\n  __proto__: null\n});\nvar Types = /*#__PURE__*/Object.freeze({\n  __proto__: null\n});\nconst treeify = nodes => '▽\\n' + treeifyArray(nodes, thinLines);\nconst thinLines = [['├─', '│ '], ['└─', '  ']];\nconst heavyLines = [['┠─', '┃ '], ['┖─', '  ']];\nconst doubleLines = [['╟─', '║ '], ['╙─', '  ']];\nfunction treeifyArray(nodes, tpl = heavyLines) {\n  return prefixItems(tpl, nodes.map(n => treeifyNode(n)));\n}\nfunction treeifyNode(node) {\n  switch (node.type) {\n    case 'terminal':\n      {\n        const vctr = node.valueContainer;\n        return `◁ #${vctr.index} ${JSON.stringify(vctr.specificity)} ${vctr.value}`;\n      }\n    case 'tagName':\n      return `◻ Tag name\\n${treeifyArray(node.variants, doubleLines)}`;\n    case 'attrValue':\n      return `▣ Attr value: ${node.name}\\n${treeifyArray(node.matchers, doubleLines)}`;\n    case 'attrPresence':\n      return `◨ Attr presence: ${node.name}\\n${treeifyArray(node.cont)}`;\n    case 'pushElement':\n      return `◉ Push element: ${node.combinator}\\n${treeifyArray(node.cont, thinLines)}`;\n    case 'popElement':\n      return `◌ Pop element\\n${treeifyArray(node.cont, thinLines)}`;\n    case 'variant':\n      return `◇ = ${node.value}\\n${treeifyArray(node.cont)}`;\n    case 'matcher':\n      return `◈ ${node.matcher} \"${node.value}\"${node.modifier || ''}\\n${treeifyArray(node.cont)}`;\n  }\n}\nfunction prefixItems(tpl, items) {\n  return items.map((item, i, {\n    length\n  }) => prefixItem(tpl, item, i === length - 1)).join('\\n');\n}\nfunction prefixItem(tpl, item, tail = true) {\n  const tpl1 = tpl[tail ? 1 : 0];\n  return tpl1[0] + item.split('\\n').join('\\n' + tpl1[1]);\n}\nvar TreeifyBuilder = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  treeify: treeify\n});\nclass DecisionTree {\n  constructor(input) {\n    this.branches = weave(toAstTerminalPairs(input));\n  }\n  build(builder) {\n    return builder(this.branches);\n  }\n}\nfunction toAstTerminalPairs(array) {\n  const len = array.length;\n  const results = new Array(len);\n  for (let i = 0; i < len; i++) {\n    const [selectorString, val] = array[i];\n    const ast = preprocess(parseley.parse1(selectorString));\n    results[i] = {\n      ast: ast,\n      terminal: {\n        type: 'terminal',\n        valueContainer: {\n          index: i,\n          value: val,\n          specificity: ast.specificity\n        }\n      }\n    };\n  }\n  return results;\n}\nfunction preprocess(ast) {\n  reduceSelectorVariants(ast);\n  parseley.normalize(ast);\n  return ast;\n}\nfunction reduceSelectorVariants(ast) {\n  const newList = [];\n  ast.list.forEach(sel => {\n    switch (sel.type) {\n      case 'class':\n        newList.push({\n          matcher: '~=',\n          modifier: null,\n          name: 'class',\n          namespace: null,\n          specificity: sel.specificity,\n          type: 'attrValue',\n          value: sel.name\n        });\n        break;\n      case 'id':\n        newList.push({\n          matcher: '=',\n          modifier: null,\n          name: 'id',\n          namespace: null,\n          specificity: sel.specificity,\n          type: 'attrValue',\n          value: sel.name\n        });\n        break;\n      case 'combinator':\n        reduceSelectorVariants(sel.left);\n        newList.push(sel);\n        break;\n      case 'universal':\n        break;\n      default:\n        newList.push(sel);\n        break;\n    }\n  });\n  ast.list = newList;\n}\nfunction weave(items) {\n  const branches = [];\n  while (items.length) {\n    const topKind = findTopKey(items, sel => true, getSelectorKind);\n    const {\n      matches,\n      nonmatches,\n      empty\n    } = breakByKind(items, topKind);\n    items = nonmatches;\n    if (matches.length) {\n      branches.push(branchOfKind(topKind, matches));\n    }\n    if (empty.length) {\n      branches.push(...terminate(empty));\n    }\n  }\n  return branches;\n}\nfunction terminate(items) {\n  const results = [];\n  for (const item of items) {\n    const terminal = item.terminal;\n    if (terminal.type === 'terminal') {\n      results.push(terminal);\n    } else {\n      const {\n        matches,\n        rest\n      } = partition(terminal.cont, node => node.type === 'terminal');\n      matches.forEach(node => results.push(node));\n      if (rest.length) {\n        terminal.cont = rest;\n        results.push(terminal);\n      }\n    }\n  }\n  return results;\n}\nfunction breakByKind(items, selectedKind) {\n  const matches = [];\n  const nonmatches = [];\n  const empty = [];\n  for (const item of items) {\n    const simpsels = item.ast.list;\n    if (simpsels.length) {\n      const isMatch = simpsels.some(node => getSelectorKind(node) === selectedKind);\n      (isMatch ? matches : nonmatches).push(item);\n    } else {\n      empty.push(item);\n    }\n  }\n  return {\n    matches,\n    nonmatches,\n    empty\n  };\n}\nfunction getSelectorKind(sel) {\n  switch (sel.type) {\n    case 'attrPresence':\n      return `attrPresence ${sel.name}`;\n    case 'attrValue':\n      return `attrValue ${sel.name}`;\n    case 'combinator':\n      return `combinator ${sel.combinator}`;\n    default:\n      return sel.type;\n  }\n}\nfunction branchOfKind(kind, items) {\n  if (kind === 'tag') {\n    return tagNameBranch(items);\n  }\n  if (kind.startsWith('attrValue ')) {\n    return attrValueBranch(kind.substring(10), items);\n  }\n  if (kind.startsWith('attrPresence ')) {\n    return attrPresenceBranch(kind.substring(13), items);\n  }\n  if (kind === 'combinator >') {\n    return combinatorBranch('>', items);\n  }\n  if (kind === 'combinator +') {\n    return combinatorBranch('+', items);\n  }\n  throw new Error(`Unsupported selector kind: ${kind}`);\n}\nfunction tagNameBranch(items) {\n  const groups = spliceAndGroup(items, x => x.type === 'tag', x => x.name);\n  const variants = Object.entries(groups).map(([name, group]) => ({\n    type: 'variant',\n    value: name,\n    cont: weave(group.items)\n  }));\n  return {\n    type: 'tagName',\n    variants: variants\n  };\n}\nfunction attrPresenceBranch(name, items) {\n  for (const item of items) {\n    spliceSimpleSelector(item, x => x.type === 'attrPresence' && x.name === name);\n  }\n  return {\n    type: 'attrPresence',\n    name: name,\n    cont: weave(items)\n  };\n}\nfunction attrValueBranch(name, items) {\n  const groups = spliceAndGroup(items, x => x.type === 'attrValue' && x.name === name, x => `${x.matcher} ${x.modifier || ''} ${x.value}`);\n  const matchers = [];\n  for (const group of Object.values(groups)) {\n    const sel = group.oneSimpleSelector;\n    const predicate = getAttrPredicate(sel);\n    const continuation = weave(group.items);\n    matchers.push({\n      type: 'matcher',\n      matcher: sel.matcher,\n      modifier: sel.modifier,\n      value: sel.value,\n      predicate: predicate,\n      cont: continuation\n    });\n  }\n  return {\n    type: 'attrValue',\n    name: name,\n    matchers: matchers\n  };\n}\nfunction getAttrPredicate(sel) {\n  if (sel.modifier === 'i') {\n    const expected = sel.value.toLowerCase();\n    switch (sel.matcher) {\n      case '=':\n        return actual => expected === actual.toLowerCase();\n      case '~=':\n        return actual => actual.toLowerCase().split(/[ \\t]+/).includes(expected);\n      case '^=':\n        return actual => actual.toLowerCase().startsWith(expected);\n      case '$=':\n        return actual => actual.toLowerCase().endsWith(expected);\n      case '*=':\n        return actual => actual.toLowerCase().includes(expected);\n      case '|=':\n        return actual => {\n          const lower = actual.toLowerCase();\n          return expected === lower || lower.startsWith(expected) && lower[expected.length] === '-';\n        };\n    }\n  } else {\n    const expected = sel.value;\n    switch (sel.matcher) {\n      case '=':\n        return actual => expected === actual;\n      case '~=':\n        return actual => actual.split(/[ \\t]+/).includes(expected);\n      case '^=':\n        return actual => actual.startsWith(expected);\n      case '$=':\n        return actual => actual.endsWith(expected);\n      case '*=':\n        return actual => actual.includes(expected);\n      case '|=':\n        return actual => expected === actual || actual.startsWith(expected) && actual[expected.length] === '-';\n    }\n  }\n}\nfunction combinatorBranch(combinator, items) {\n  const groups = spliceAndGroup(items, x => x.type === 'combinator' && x.combinator === combinator, x => parseley.serialize(x.left));\n  const leftItems = [];\n  for (const group of Object.values(groups)) {\n    const rightCont = weave(group.items);\n    const leftAst = group.oneSimpleSelector.left;\n    leftItems.push({\n      ast: leftAst,\n      terminal: {\n        type: 'popElement',\n        cont: rightCont\n      }\n    });\n  }\n  return {\n    type: 'pushElement',\n    combinator: combinator,\n    cont: weave(leftItems)\n  };\n}\nfunction spliceAndGroup(items, predicate, keyCallback) {\n  const groups = {};\n  while (items.length) {\n    const bestKey = findTopKey(items, predicate, keyCallback);\n    const bestKeyPredicate = sel => predicate(sel) && keyCallback(sel) === bestKey;\n    const hasBestKeyPredicate = item => item.ast.list.some(bestKeyPredicate);\n    const {\n      matches,\n      rest\n    } = partition1(items, hasBestKeyPredicate);\n    let oneSimpleSelector = null;\n    for (const item of matches) {\n      const splicedNode = spliceSimpleSelector(item, bestKeyPredicate);\n      if (!oneSimpleSelector) {\n        oneSimpleSelector = splicedNode;\n      }\n    }\n    if (oneSimpleSelector == null) {\n      throw new Error('No simple selector is found.');\n    }\n    groups[bestKey] = {\n      oneSimpleSelector: oneSimpleSelector,\n      items: matches\n    };\n    items = rest;\n  }\n  return groups;\n}\nfunction spliceSimpleSelector(item, predicate) {\n  const simpsels = item.ast.list;\n  const matches = new Array(simpsels.length);\n  let firstIndex = -1;\n  for (let i = simpsels.length; i-- > 0;) {\n    if (predicate(simpsels[i])) {\n      matches[i] = true;\n      firstIndex = i;\n    }\n  }\n  if (firstIndex == -1) {\n    throw new Error(`Couldn't find the required simple selector.`);\n  }\n  const result = simpsels[firstIndex];\n  item.ast.list = simpsels.filter((sel, i) => !matches[i]);\n  return result;\n}\nfunction findTopKey(items, predicate, keyCallback) {\n  const candidates = {};\n  for (const item of items) {\n    const candidates1 = {};\n    for (const node of item.ast.list.filter(predicate)) {\n      candidates1[keyCallback(node)] = true;\n    }\n    for (const key of Object.keys(candidates1)) {\n      if (candidates[key]) {\n        candidates[key]++;\n      } else {\n        candidates[key] = 1;\n      }\n    }\n  }\n  let topKind = '';\n  let topCounter = 0;\n  for (const entry of Object.entries(candidates)) {\n    if (entry[1] > topCounter) {\n      topKind = entry[0];\n      topCounter = entry[1];\n    }\n  }\n  return topKind;\n}\nfunction partition(src, predicate) {\n  const matches = [];\n  const rest = [];\n  for (const x of src) {\n    if (predicate(x)) {\n      matches.push(x);\n    } else {\n      rest.push(x);\n    }\n  }\n  return {\n    matches,\n    rest\n  };\n}\nfunction partition1(src, predicate) {\n  const matches = [];\n  const rest = [];\n  for (const x of src) {\n    if (predicate(x)) {\n      matches.push(x);\n    } else {\n      rest.push(x);\n    }\n  }\n  return {\n    matches,\n    rest\n  };\n}\nclass Picker {\n  constructor(f) {\n    this.f = f;\n  }\n  pickAll(el) {\n    return this.f(el);\n  }\n  pick1(el, preferFirst = false) {\n    const results = this.f(el);\n    const len = results.length;\n    if (len === 0) {\n      return null;\n    }\n    if (len === 1) {\n      return results[0].value;\n    }\n    const comparator = preferFirst ? comparatorPreferFirst : comparatorPreferLast;\n    let result = results[0];\n    for (let i = 1; i < len; i++) {\n      const next = results[i];\n      if (comparator(result, next)) {\n        result = next;\n      }\n    }\n    return result.value;\n  }\n}\nfunction comparatorPreferFirst(acc, next) {\n  const diff = compareSpecificity(next.specificity, acc.specificity);\n  return diff > 0 || diff === 0 && next.index < acc.index;\n}\nfunction comparatorPreferLast(acc, next) {\n  const diff = compareSpecificity(next.specificity, acc.specificity);\n  return diff > 0 || diff === 0 && next.index > acc.index;\n}\nexport { Ast, DecisionTree, Picker, TreeifyBuilder as Treeify, Types };", "import { isTag } from 'domhandler';\nimport { Picker } from 'selderee';\nfunction hp2Builder(nodes) {\n  return new Picker(handleArray(nodes));\n}\nfunction handleArray(nodes) {\n  const matchers = nodes.map(handleNode);\n  return (el, ...tail) => matchers.flatMap(m => m(el, ...tail));\n}\nfunction handleNode(node) {\n  switch (node.type) {\n    case 'terminal':\n      {\n        const result = [node.valueContainer];\n        return (el, ...tail) => result;\n      }\n    case 'tagName':\n      return handleTagName(node);\n    case 'attrValue':\n      return handleAttrValueName(node);\n    case 'attrPresence':\n      return handleAttrPresenceName(node);\n    case 'pushElement':\n      return handlePushElementNode(node);\n    case 'popElement':\n      return handlePopElementNode(node);\n  }\n}\nfunction handleTagName(node) {\n  const variants = {};\n  for (const variant of node.variants) {\n    variants[variant.value] = handleArray(variant.cont);\n  }\n  return (el, ...tail) => {\n    const continuation = variants[el.name];\n    return continuation ? continuation(el, ...tail) : [];\n  };\n}\nfunction handleAttrPresenceName(node) {\n  const attrName = node.name;\n  const continuation = handleArray(node.cont);\n  return (el, ...tail) => Object.prototype.hasOwnProperty.call(el.attribs, attrName) ? continuation(el, ...tail) : [];\n}\nfunction handleAttrValueName(node) {\n  const callbacks = [];\n  for (const matcher of node.matchers) {\n    const predicate = matcher.predicate;\n    const continuation = handleArray(matcher.cont);\n    callbacks.push((attr, el, ...tail) => predicate(attr) ? continuation(el, ...tail) : []);\n  }\n  const attrName = node.name;\n  return (el, ...tail) => {\n    const attr = el.attribs[attrName];\n    return attr || attr === '' ? callbacks.flatMap(cb => cb(attr, el, ...tail)) : [];\n  };\n}\nfunction handlePushElementNode(node) {\n  const continuation = handleArray(node.cont);\n  const leftElementGetter = node.combinator === '+' ? getPrecedingElement : getParentElement;\n  return (el, ...tail) => {\n    const next = leftElementGetter(el);\n    if (next === null) {\n      return [];\n    }\n    return continuation(next, el, ...tail);\n  };\n}\nconst getPrecedingElement = el => {\n  const prev = el.prev;\n  if (prev === null) {\n    return null;\n  }\n  return isTag(prev) ? prev : getPrecedingElement(prev);\n};\nconst getParentElement = el => {\n  const parent = el.parent;\n  return parent && isTag(parent) ? parent : null;\n};\nfunction handlePopElementNode(node) {\n  const continuation = handleArray(node.cont);\n  return (el, next, ...tail) => continuation(next, ...tail);\n}\nexport { hp2Builder };", "// Generated using scripts/write-decode-map.ts\nexport default new Uint16Array(\n// prettier-ignore\n\"\\u1d41<\\xd5\\u0131\\u028a\\u049d\\u057b\\u05d0\\u0675\\u06de\\u07a2\\u07d6\\u080f\\u0a4a\\u0a91\\u0da1\\u0e6d\\u0f09\\u0f26\\u10ca\\u1228\\u12e1\\u1415\\u149d\\u14c3\\u14df\\u1525\\0\\0\\0\\0\\0\\0\\u156b\\u16cd\\u198d\\u1c12\\u1ddd\\u1f7e\\u2060\\u21b0\\u228d\\u23c0\\u23fb\\u2442\\u2824\\u2912\\u2d08\\u2e48\\u2fce\\u3016\\u32ba\\u3639\\u37ac\\u38fe\\u3a28\\u3a71\\u3ae0\\u3b2e\\u0800EMabcfglmnoprstu\\\\bfms\\x7f\\x84\\x8b\\x90\\x95\\x98\\xa6\\xb3\\xb9\\xc8\\xcflig\\u803b\\xc6\\u40c6P\\u803b&\\u4026cute\\u803b\\xc1\\u40c1reve;\\u4102\\u0100iyx}rc\\u803b\\xc2\\u40c2;\\u4410r;\\uc000\\ud835\\udd04rave\\u803b\\xc0\\u40c0pha;\\u4391acr;\\u4100d;\\u6a53\\u0100gp\\x9d\\xa1on;\\u4104f;\\uc000\\ud835\\udd38plyFunction;\\u6061ing\\u803b\\xc5\\u40c5\\u0100cs\\xbe\\xc3r;\\uc000\\ud835\\udc9cign;\\u6254ilde\\u803b\\xc3\\u40c3ml\\u803b\\xc4\\u40c4\\u0400aceforsu\\xe5\\xfb\\xfe\\u0117\\u011c\\u0122\\u0127\\u012a\\u0100cr\\xea\\xf2kslash;\\u6216\\u0176\\xf6\\xf8;\\u6ae7ed;\\u6306y;\\u4411\\u0180crt\\u0105\\u010b\\u0114ause;\\u6235noullis;\\u612ca;\\u4392r;\\uc000\\ud835\\udd05pf;\\uc000\\ud835\\udd39eve;\\u42d8c\\xf2\\u0113mpeq;\\u624e\\u0700HOacdefhilorsu\\u014d\\u0151\\u0156\\u0180\\u019e\\u01a2\\u01b5\\u01b7\\u01ba\\u01dc\\u0215\\u0273\\u0278\\u027ecy;\\u4427PY\\u803b\\xa9\\u40a9\\u0180cpy\\u015d\\u0162\\u017aute;\\u4106\\u0100;i\\u0167\\u0168\\u62d2talDifferentialD;\\u6145leys;\\u612d\\u0200aeio\\u0189\\u018e\\u0194\\u0198ron;\\u410cdil\\u803b\\xc7\\u40c7rc;\\u4108nint;\\u6230ot;\\u410a\\u0100dn\\u01a7\\u01adilla;\\u40b8terDot;\\u40b7\\xf2\\u017fi;\\u43a7rcle\\u0200DMPT\\u01c7\\u01cb\\u01d1\\u01d6ot;\\u6299inus;\\u6296lus;\\u6295imes;\\u6297o\\u0100cs\\u01e2\\u01f8kwiseContourIntegral;\\u6232eCurly\\u0100DQ\\u0203\\u020foubleQuote;\\u601duote;\\u6019\\u0200lnpu\\u021e\\u0228\\u0247\\u0255on\\u0100;e\\u0225\\u0226\\u6237;\\u6a74\\u0180git\\u022f\\u0236\\u023aruent;\\u6261nt;\\u622fourIntegral;\\u622e\\u0100fr\\u024c\\u024e;\\u6102oduct;\\u6210nterClockwiseContourIntegral;\\u6233oss;\\u6a2fcr;\\uc000\\ud835\\udc9ep\\u0100;C\\u0284\\u0285\\u62d3ap;\\u624d\\u0580DJSZacefios\\u02a0\\u02ac\\u02b0\\u02b4\\u02b8\\u02cb\\u02d7\\u02e1\\u02e6\\u0333\\u048d\\u0100;o\\u0179\\u02a5trahd;\\u6911cy;\\u4402cy;\\u4405cy;\\u440f\\u0180grs\\u02bf\\u02c4\\u02c7ger;\\u6021r;\\u61a1hv;\\u6ae4\\u0100ay\\u02d0\\u02d5ron;\\u410e;\\u4414l\\u0100;t\\u02dd\\u02de\\u6207a;\\u4394r;\\uc000\\ud835\\udd07\\u0100af\\u02eb\\u0327\\u0100cm\\u02f0\\u0322ritical\\u0200ADGT\\u0300\\u0306\\u0316\\u031ccute;\\u40b4o\\u0174\\u030b\\u030d;\\u42d9bleAcute;\\u42ddrave;\\u4060ilde;\\u42dcond;\\u62c4ferentialD;\\u6146\\u0470\\u033d\\0\\0\\0\\u0342\\u0354\\0\\u0405f;\\uc000\\ud835\\udd3b\\u0180;DE\\u0348\\u0349\\u034d\\u40a8ot;\\u60dcqual;\\u6250ble\\u0300CDLRUV\\u0363\\u0372\\u0382\\u03cf\\u03e2\\u03f8ontourIntegra\\xec\\u0239o\\u0274\\u0379\\0\\0\\u037b\\xbb\\u0349nArrow;\\u61d3\\u0100eo\\u0387\\u03a4ft\\u0180ART\\u0390\\u0396\\u03a1rrow;\\u61d0ightArrow;\\u61d4e\\xe5\\u02cang\\u0100LR\\u03ab\\u03c4eft\\u0100AR\\u03b3\\u03b9rrow;\\u67f8ightArrow;\\u67faightArrow;\\u67f9ight\\u0100AT\\u03d8\\u03derrow;\\u61d2ee;\\u62a8p\\u0241\\u03e9\\0\\0\\u03efrrow;\\u61d1ownArrow;\\u61d5erticalBar;\\u6225n\\u0300ABLRTa\\u0412\\u042a\\u0430\\u045e\\u047f\\u037crrow\\u0180;BU\\u041d\\u041e\\u0422\\u6193ar;\\u6913pArrow;\\u61f5reve;\\u4311eft\\u02d2\\u043a\\0\\u0446\\0\\u0450ightVector;\\u6950eeVector;\\u695eector\\u0100;B\\u0459\\u045a\\u61bdar;\\u6956ight\\u01d4\\u0467\\0\\u0471eeVector;\\u695fector\\u0100;B\\u047a\\u047b\\u61c1ar;\\u6957ee\\u0100;A\\u0486\\u0487\\u62a4rrow;\\u61a7\\u0100ct\\u0492\\u0497r;\\uc000\\ud835\\udc9frok;\\u4110\\u0800NTacdfglmopqstux\\u04bd\\u04c0\\u04c4\\u04cb\\u04de\\u04e2\\u04e7\\u04ee\\u04f5\\u0521\\u052f\\u0536\\u0552\\u055d\\u0560\\u0565G;\\u414aH\\u803b\\xd0\\u40d0cute\\u803b\\xc9\\u40c9\\u0180aiy\\u04d2\\u04d7\\u04dcron;\\u411arc\\u803b\\xca\\u40ca;\\u442dot;\\u4116r;\\uc000\\ud835\\udd08rave\\u803b\\xc8\\u40c8ement;\\u6208\\u0100ap\\u04fa\\u04fecr;\\u4112ty\\u0253\\u0506\\0\\0\\u0512mallSquare;\\u65fberySmallSquare;\\u65ab\\u0100gp\\u0526\\u052aon;\\u4118f;\\uc000\\ud835\\udd3csilon;\\u4395u\\u0100ai\\u053c\\u0549l\\u0100;T\\u0542\\u0543\\u6a75ilde;\\u6242librium;\\u61cc\\u0100ci\\u0557\\u055ar;\\u6130m;\\u6a73a;\\u4397ml\\u803b\\xcb\\u40cb\\u0100ip\\u056a\\u056fsts;\\u6203onentialE;\\u6147\\u0280cfios\\u0585\\u0588\\u058d\\u05b2\\u05ccy;\\u4424r;\\uc000\\ud835\\udd09lled\\u0253\\u0597\\0\\0\\u05a3mallSquare;\\u65fcerySmallSquare;\\u65aa\\u0370\\u05ba\\0\\u05bf\\0\\0\\u05c4f;\\uc000\\ud835\\udd3dAll;\\u6200riertrf;\\u6131c\\xf2\\u05cb\\u0600JTabcdfgorst\\u05e8\\u05ec\\u05ef\\u05fa\\u0600\\u0612\\u0616\\u061b\\u061d\\u0623\\u066c\\u0672cy;\\u4403\\u803b>\\u403emma\\u0100;d\\u05f7\\u05f8\\u4393;\\u43dcreve;\\u411e\\u0180eiy\\u0607\\u060c\\u0610dil;\\u4122rc;\\u411c;\\u4413ot;\\u4120r;\\uc000\\ud835\\udd0a;\\u62d9pf;\\uc000\\ud835\\udd3eeater\\u0300EFGLST\\u0635\\u0644\\u064e\\u0656\\u065b\\u0666qual\\u0100;L\\u063e\\u063f\\u6265ess;\\u62dbullEqual;\\u6267reater;\\u6aa2ess;\\u6277lantEqual;\\u6a7eilde;\\u6273cr;\\uc000\\ud835\\udca2;\\u626b\\u0400Aacfiosu\\u0685\\u068b\\u0696\\u069b\\u069e\\u06aa\\u06be\\u06caRDcy;\\u442a\\u0100ct\\u0690\\u0694ek;\\u42c7;\\u405eirc;\\u4124r;\\u610clbertSpace;\\u610b\\u01f0\\u06af\\0\\u06b2f;\\u610dizontalLine;\\u6500\\u0100ct\\u06c3\\u06c5\\xf2\\u06a9rok;\\u4126mp\\u0144\\u06d0\\u06d8ownHum\\xf0\\u012fqual;\\u624f\\u0700EJOacdfgmnostu\\u06fa\\u06fe\\u0703\\u0707\\u070e\\u071a\\u071e\\u0721\\u0728\\u0744\\u0778\\u078b\\u078f\\u0795cy;\\u4415lig;\\u4132cy;\\u4401cute\\u803b\\xcd\\u40cd\\u0100iy\\u0713\\u0718rc\\u803b\\xce\\u40ce;\\u4418ot;\\u4130r;\\u6111rave\\u803b\\xcc\\u40cc\\u0180;ap\\u0720\\u072f\\u073f\\u0100cg\\u0734\\u0737r;\\u412ainaryI;\\u6148lie\\xf3\\u03dd\\u01f4\\u0749\\0\\u0762\\u0100;e\\u074d\\u074e\\u622c\\u0100gr\\u0753\\u0758ral;\\u622bsection;\\u62c2isible\\u0100CT\\u076c\\u0772omma;\\u6063imes;\\u6062\\u0180gpt\\u077f\\u0783\\u0788on;\\u412ef;\\uc000\\ud835\\udd40a;\\u4399cr;\\u6110ilde;\\u4128\\u01eb\\u079a\\0\\u079ecy;\\u4406l\\u803b\\xcf\\u40cf\\u0280cfosu\\u07ac\\u07b7\\u07bc\\u07c2\\u07d0\\u0100iy\\u07b1\\u07b5rc;\\u4134;\\u4419r;\\uc000\\ud835\\udd0dpf;\\uc000\\ud835\\udd41\\u01e3\\u07c7\\0\\u07ccr;\\uc000\\ud835\\udca5rcy;\\u4408kcy;\\u4404\\u0380HJacfos\\u07e4\\u07e8\\u07ec\\u07f1\\u07fd\\u0802\\u0808cy;\\u4425cy;\\u440cppa;\\u439a\\u0100ey\\u07f6\\u07fbdil;\\u4136;\\u441ar;\\uc000\\ud835\\udd0epf;\\uc000\\ud835\\udd42cr;\\uc000\\ud835\\udca6\\u0580JTaceflmost\\u0825\\u0829\\u082c\\u0850\\u0863\\u09b3\\u09b8\\u09c7\\u09cd\\u0a37\\u0a47cy;\\u4409\\u803b<\\u403c\\u0280cmnpr\\u0837\\u083c\\u0841\\u0844\\u084dute;\\u4139bda;\\u439bg;\\u67ealacetrf;\\u6112r;\\u619e\\u0180aey\\u0857\\u085c\\u0861ron;\\u413ddil;\\u413b;\\u441b\\u0100fs\\u0868\\u0970t\\u0500ACDFRTUVar\\u087e\\u08a9\\u08b1\\u08e0\\u08e6\\u08fc\\u092f\\u095b\\u0390\\u096a\\u0100nr\\u0883\\u088fgleBracket;\\u67e8row\\u0180;BR\\u0899\\u089a\\u089e\\u6190ar;\\u61e4ightArrow;\\u61c6eiling;\\u6308o\\u01f5\\u08b7\\0\\u08c3bleBracket;\\u67e6n\\u01d4\\u08c8\\0\\u08d2eeVector;\\u6961ector\\u0100;B\\u08db\\u08dc\\u61c3ar;\\u6959loor;\\u630aight\\u0100AV\\u08ef\\u08f5rrow;\\u6194ector;\\u694e\\u0100er\\u0901\\u0917e\\u0180;AV\\u0909\\u090a\\u0910\\u62a3rrow;\\u61a4ector;\\u695aiangle\\u0180;BE\\u0924\\u0925\\u0929\\u62b2ar;\\u69cfqual;\\u62b4p\\u0180DTV\\u0937\\u0942\\u094cownVector;\\u6951eeVector;\\u6960ector\\u0100;B\\u0956\\u0957\\u61bfar;\\u6958ector\\u0100;B\\u0965\\u0966\\u61bcar;\\u6952ight\\xe1\\u039cs\\u0300EFGLST\\u097e\\u098b\\u0995\\u099d\\u09a2\\u09adqualGreater;\\u62daullEqual;\\u6266reater;\\u6276ess;\\u6aa1lantEqual;\\u6a7dilde;\\u6272r;\\uc000\\ud835\\udd0f\\u0100;e\\u09bd\\u09be\\u62d8ftarrow;\\u61daidot;\\u413f\\u0180npw\\u09d4\\u0a16\\u0a1bg\\u0200LRlr\\u09de\\u09f7\\u0a02\\u0a10eft\\u0100AR\\u09e6\\u09ecrrow;\\u67f5ightArrow;\\u67f7ightArrow;\\u67f6eft\\u0100ar\\u03b3\\u0a0aight\\xe1\\u03bfight\\xe1\\u03caf;\\uc000\\ud835\\udd43er\\u0100LR\\u0a22\\u0a2ceftArrow;\\u6199ightArrow;\\u6198\\u0180cht\\u0a3e\\u0a40\\u0a42\\xf2\\u084c;\\u61b0rok;\\u4141;\\u626a\\u0400acefiosu\\u0a5a\\u0a5d\\u0a60\\u0a77\\u0a7c\\u0a85\\u0a8b\\u0a8ep;\\u6905y;\\u441c\\u0100dl\\u0a65\\u0a6fiumSpace;\\u605flintrf;\\u6133r;\\uc000\\ud835\\udd10nusPlus;\\u6213pf;\\uc000\\ud835\\udd44c\\xf2\\u0a76;\\u439c\\u0480Jacefostu\\u0aa3\\u0aa7\\u0aad\\u0ac0\\u0b14\\u0b19\\u0d91\\u0d97\\u0d9ecy;\\u440acute;\\u4143\\u0180aey\\u0ab4\\u0ab9\\u0aberon;\\u4147dil;\\u4145;\\u441d\\u0180gsw\\u0ac7\\u0af0\\u0b0eative\\u0180MTV\\u0ad3\\u0adf\\u0ae8ediumSpace;\\u600bhi\\u0100cn\\u0ae6\\u0ad8\\xeb\\u0ad9eryThi\\xee\\u0ad9ted\\u0100GL\\u0af8\\u0b06reaterGreate\\xf2\\u0673essLes\\xf3\\u0a48Line;\\u400ar;\\uc000\\ud835\\udd11\\u0200Bnpt\\u0b22\\u0b28\\u0b37\\u0b3areak;\\u6060BreakingSpace;\\u40a0f;\\u6115\\u0680;CDEGHLNPRSTV\\u0b55\\u0b56\\u0b6a\\u0b7c\\u0ba1\\u0beb\\u0c04\\u0c5e\\u0c84\\u0ca6\\u0cd8\\u0d61\\u0d85\\u6aec\\u0100ou\\u0b5b\\u0b64ngruent;\\u6262pCap;\\u626doubleVerticalBar;\\u6226\\u0180lqx\\u0b83\\u0b8a\\u0b9bement;\\u6209ual\\u0100;T\\u0b92\\u0b93\\u6260ilde;\\uc000\\u2242\\u0338ists;\\u6204reater\\u0380;EFGLST\\u0bb6\\u0bb7\\u0bbd\\u0bc9\\u0bd3\\u0bd8\\u0be5\\u626fqual;\\u6271ullEqual;\\uc000\\u2267\\u0338reater;\\uc000\\u226b\\u0338ess;\\u6279lantEqual;\\uc000\\u2a7e\\u0338ilde;\\u6275ump\\u0144\\u0bf2\\u0bfdownHump;\\uc000\\u224e\\u0338qual;\\uc000\\u224f\\u0338e\\u0100fs\\u0c0a\\u0c27tTriangle\\u0180;BE\\u0c1a\\u0c1b\\u0c21\\u62eaar;\\uc000\\u29cf\\u0338qual;\\u62ecs\\u0300;EGLST\\u0c35\\u0c36\\u0c3c\\u0c44\\u0c4b\\u0c58\\u626equal;\\u6270reater;\\u6278ess;\\uc000\\u226a\\u0338lantEqual;\\uc000\\u2a7d\\u0338ilde;\\u6274ested\\u0100GL\\u0c68\\u0c79reaterGreater;\\uc000\\u2aa2\\u0338essLess;\\uc000\\u2aa1\\u0338recedes\\u0180;ES\\u0c92\\u0c93\\u0c9b\\u6280qual;\\uc000\\u2aaf\\u0338lantEqual;\\u62e0\\u0100ei\\u0cab\\u0cb9verseElement;\\u620cghtTriangle\\u0180;BE\\u0ccb\\u0ccc\\u0cd2\\u62ebar;\\uc000\\u29d0\\u0338qual;\\u62ed\\u0100qu\\u0cdd\\u0d0cuareSu\\u0100bp\\u0ce8\\u0cf9set\\u0100;E\\u0cf0\\u0cf3\\uc000\\u228f\\u0338qual;\\u62e2erset\\u0100;E\\u0d03\\u0d06\\uc000\\u2290\\u0338qual;\\u62e3\\u0180bcp\\u0d13\\u0d24\\u0d4eset\\u0100;E\\u0d1b\\u0d1e\\uc000\\u2282\\u20d2qual;\\u6288ceeds\\u0200;EST\\u0d32\\u0d33\\u0d3b\\u0d46\\u6281qual;\\uc000\\u2ab0\\u0338lantEqual;\\u62e1ilde;\\uc000\\u227f\\u0338erset\\u0100;E\\u0d58\\u0d5b\\uc000\\u2283\\u20d2qual;\\u6289ilde\\u0200;EFT\\u0d6e\\u0d6f\\u0d75\\u0d7f\\u6241qual;\\u6244ullEqual;\\u6247ilde;\\u6249erticalBar;\\u6224cr;\\uc000\\ud835\\udca9ilde\\u803b\\xd1\\u40d1;\\u439d\\u0700Eacdfgmoprstuv\\u0dbd\\u0dc2\\u0dc9\\u0dd5\\u0ddb\\u0de0\\u0de7\\u0dfc\\u0e02\\u0e20\\u0e22\\u0e32\\u0e3f\\u0e44lig;\\u4152cute\\u803b\\xd3\\u40d3\\u0100iy\\u0dce\\u0dd3rc\\u803b\\xd4\\u40d4;\\u441eblac;\\u4150r;\\uc000\\ud835\\udd12rave\\u803b\\xd2\\u40d2\\u0180aei\\u0dee\\u0df2\\u0df6cr;\\u414cga;\\u43a9cron;\\u439fpf;\\uc000\\ud835\\udd46enCurly\\u0100DQ\\u0e0e\\u0e1aoubleQuote;\\u601cuote;\\u6018;\\u6a54\\u0100cl\\u0e27\\u0e2cr;\\uc000\\ud835\\udcaaash\\u803b\\xd8\\u40d8i\\u016c\\u0e37\\u0e3cde\\u803b\\xd5\\u40d5es;\\u6a37ml\\u803b\\xd6\\u40d6er\\u0100BP\\u0e4b\\u0e60\\u0100ar\\u0e50\\u0e53r;\\u603eac\\u0100ek\\u0e5a\\u0e5c;\\u63deet;\\u63b4arenthesis;\\u63dc\\u0480acfhilors\\u0e7f\\u0e87\\u0e8a\\u0e8f\\u0e92\\u0e94\\u0e9d\\u0eb0\\u0efcrtialD;\\u6202y;\\u441fr;\\uc000\\ud835\\udd13i;\\u43a6;\\u43a0usMinus;\\u40b1\\u0100ip\\u0ea2\\u0eadncareplan\\xe5\\u069df;\\u6119\\u0200;eio\\u0eb9\\u0eba\\u0ee0\\u0ee4\\u6abbcedes\\u0200;EST\\u0ec8\\u0ec9\\u0ecf\\u0eda\\u627aqual;\\u6aaflantEqual;\\u627cilde;\\u627eme;\\u6033\\u0100dp\\u0ee9\\u0eeeuct;\\u620fortion\\u0100;a\\u0225\\u0ef9l;\\u621d\\u0100ci\\u0f01\\u0f06r;\\uc000\\ud835\\udcab;\\u43a8\\u0200Ufos\\u0f11\\u0f16\\u0f1b\\u0f1fOT\\u803b\\\"\\u4022r;\\uc000\\ud835\\udd14pf;\\u611acr;\\uc000\\ud835\\udcac\\u0600BEacefhiorsu\\u0f3e\\u0f43\\u0f47\\u0f60\\u0f73\\u0fa7\\u0faa\\u0fad\\u1096\\u10a9\\u10b4\\u10bearr;\\u6910G\\u803b\\xae\\u40ae\\u0180cnr\\u0f4e\\u0f53\\u0f56ute;\\u4154g;\\u67ebr\\u0100;t\\u0f5c\\u0f5d\\u61a0l;\\u6916\\u0180aey\\u0f67\\u0f6c\\u0f71ron;\\u4158dil;\\u4156;\\u4420\\u0100;v\\u0f78\\u0f79\\u611cerse\\u0100EU\\u0f82\\u0f99\\u0100lq\\u0f87\\u0f8eement;\\u620builibrium;\\u61cbpEquilibrium;\\u696fr\\xbb\\u0f79o;\\u43a1ght\\u0400ACDFTUVa\\u0fc1\\u0feb\\u0ff3\\u1022\\u1028\\u105b\\u1087\\u03d8\\u0100nr\\u0fc6\\u0fd2gleBracket;\\u67e9row\\u0180;BL\\u0fdc\\u0fdd\\u0fe1\\u6192ar;\\u61e5eftArrow;\\u61c4eiling;\\u6309o\\u01f5\\u0ff9\\0\\u1005bleBracket;\\u67e7n\\u01d4\\u100a\\0\\u1014eeVector;\\u695dector\\u0100;B\\u101d\\u101e\\u61c2ar;\\u6955loor;\\u630b\\u0100er\\u102d\\u1043e\\u0180;AV\\u1035\\u1036\\u103c\\u62a2rrow;\\u61a6ector;\\u695biangle\\u0180;BE\\u1050\\u1051\\u1055\\u62b3ar;\\u69d0qual;\\u62b5p\\u0180DTV\\u1063\\u106e\\u1078ownVector;\\u694feeVector;\\u695cector\\u0100;B\\u1082\\u1083\\u61bear;\\u6954ector\\u0100;B\\u1091\\u1092\\u61c0ar;\\u6953\\u0100pu\\u109b\\u109ef;\\u611dndImplies;\\u6970ightarrow;\\u61db\\u0100ch\\u10b9\\u10bcr;\\u611b;\\u61b1leDelayed;\\u69f4\\u0680HOacfhimoqstu\\u10e4\\u10f1\\u10f7\\u10fd\\u1119\\u111e\\u1151\\u1156\\u1161\\u1167\\u11b5\\u11bb\\u11bf\\u0100Cc\\u10e9\\u10eeHcy;\\u4429y;\\u4428FTcy;\\u442ccute;\\u415a\\u0280;aeiy\\u1108\\u1109\\u110e\\u1113\\u1117\\u6abcron;\\u4160dil;\\u415erc;\\u415c;\\u4421r;\\uc000\\ud835\\udd16ort\\u0200DLRU\\u112a\\u1134\\u113e\\u1149ownArrow\\xbb\\u041eeftArrow\\xbb\\u089aightArrow\\xbb\\u0fddpArrow;\\u6191gma;\\u43a3allCircle;\\u6218pf;\\uc000\\ud835\\udd4a\\u0272\\u116d\\0\\0\\u1170t;\\u621aare\\u0200;ISU\\u117b\\u117c\\u1189\\u11af\\u65a1ntersection;\\u6293u\\u0100bp\\u118f\\u119eset\\u0100;E\\u1197\\u1198\\u628fqual;\\u6291erset\\u0100;E\\u11a8\\u11a9\\u6290qual;\\u6292nion;\\u6294cr;\\uc000\\ud835\\udcaear;\\u62c6\\u0200bcmp\\u11c8\\u11db\\u1209\\u120b\\u0100;s\\u11cd\\u11ce\\u62d0et\\u0100;E\\u11cd\\u11d5qual;\\u6286\\u0100ch\\u11e0\\u1205eeds\\u0200;EST\\u11ed\\u11ee\\u11f4\\u11ff\\u627bqual;\\u6ab0lantEqual;\\u627dilde;\\u627fTh\\xe1\\u0f8c;\\u6211\\u0180;es\\u1212\\u1213\\u1223\\u62d1rset\\u0100;E\\u121c\\u121d\\u6283qual;\\u6287et\\xbb\\u1213\\u0580HRSacfhiors\\u123e\\u1244\\u1249\\u1255\\u125e\\u1271\\u1276\\u129f\\u12c2\\u12c8\\u12d1ORN\\u803b\\xde\\u40deADE;\\u6122\\u0100Hc\\u124e\\u1252cy;\\u440by;\\u4426\\u0100bu\\u125a\\u125c;\\u4009;\\u43a4\\u0180aey\\u1265\\u126a\\u126fron;\\u4164dil;\\u4162;\\u4422r;\\uc000\\ud835\\udd17\\u0100ei\\u127b\\u1289\\u01f2\\u1280\\0\\u1287efore;\\u6234a;\\u4398\\u0100cn\\u128e\\u1298kSpace;\\uc000\\u205f\\u200aSpace;\\u6009lde\\u0200;EFT\\u12ab\\u12ac\\u12b2\\u12bc\\u623cqual;\\u6243ullEqual;\\u6245ilde;\\u6248pf;\\uc000\\ud835\\udd4bipleDot;\\u60db\\u0100ct\\u12d6\\u12dbr;\\uc000\\ud835\\udcafrok;\\u4166\\u0ae1\\u12f7\\u130e\\u131a\\u1326\\0\\u132c\\u1331\\0\\0\\0\\0\\0\\u1338\\u133d\\u1377\\u1385\\0\\u13ff\\u1404\\u140a\\u1410\\u0100cr\\u12fb\\u1301ute\\u803b\\xda\\u40dar\\u0100;o\\u1307\\u1308\\u619fcir;\\u6949r\\u01e3\\u1313\\0\\u1316y;\\u440eve;\\u416c\\u0100iy\\u131e\\u1323rc\\u803b\\xdb\\u40db;\\u4423blac;\\u4170r;\\uc000\\ud835\\udd18rave\\u803b\\xd9\\u40d9acr;\\u416a\\u0100di\\u1341\\u1369er\\u0100BP\\u1348\\u135d\\u0100ar\\u134d\\u1350r;\\u405fac\\u0100ek\\u1357\\u1359;\\u63dfet;\\u63b5arenthesis;\\u63ddon\\u0100;P\\u1370\\u1371\\u62c3lus;\\u628e\\u0100gp\\u137b\\u137fon;\\u4172f;\\uc000\\ud835\\udd4c\\u0400ADETadps\\u1395\\u13ae\\u13b8\\u13c4\\u03e8\\u13d2\\u13d7\\u13f3rrow\\u0180;BD\\u1150\\u13a0\\u13a4ar;\\u6912ownArrow;\\u61c5ownArrow;\\u6195quilibrium;\\u696eee\\u0100;A\\u13cb\\u13cc\\u62a5rrow;\\u61a5own\\xe1\\u03f3er\\u0100LR\\u13de\\u13e8eftArrow;\\u6196ightArrow;\\u6197i\\u0100;l\\u13f9\\u13fa\\u43d2on;\\u43a5ing;\\u416ecr;\\uc000\\ud835\\udcb0ilde;\\u4168ml\\u803b\\xdc\\u40dc\\u0480Dbcdefosv\\u1427\\u142c\\u1430\\u1433\\u143e\\u1485\\u148a\\u1490\\u1496ash;\\u62abar;\\u6aeby;\\u4412ash\\u0100;l\\u143b\\u143c\\u62a9;\\u6ae6\\u0100er\\u1443\\u1445;\\u62c1\\u0180bty\\u144c\\u1450\\u147aar;\\u6016\\u0100;i\\u144f\\u1455cal\\u0200BLST\\u1461\\u1465\\u146a\\u1474ar;\\u6223ine;\\u407ceparator;\\u6758ilde;\\u6240ThinSpace;\\u600ar;\\uc000\\ud835\\udd19pf;\\uc000\\ud835\\udd4dcr;\\uc000\\ud835\\udcb1dash;\\u62aa\\u0280cefos\\u14a7\\u14ac\\u14b1\\u14b6\\u14bcirc;\\u4174dge;\\u62c0r;\\uc000\\ud835\\udd1apf;\\uc000\\ud835\\udd4ecr;\\uc000\\ud835\\udcb2\\u0200fios\\u14cb\\u14d0\\u14d2\\u14d8r;\\uc000\\ud835\\udd1b;\\u439epf;\\uc000\\ud835\\udd4fcr;\\uc000\\ud835\\udcb3\\u0480AIUacfosu\\u14f1\\u14f5\\u14f9\\u14fd\\u1504\\u150f\\u1514\\u151a\\u1520cy;\\u442fcy;\\u4407cy;\\u442ecute\\u803b\\xdd\\u40dd\\u0100iy\\u1509\\u150drc;\\u4176;\\u442br;\\uc000\\ud835\\udd1cpf;\\uc000\\ud835\\udd50cr;\\uc000\\ud835\\udcb4ml;\\u4178\\u0400Hacdefos\\u1535\\u1539\\u153f\\u154b\\u154f\\u155d\\u1560\\u1564cy;\\u4416cute;\\u4179\\u0100ay\\u1544\\u1549ron;\\u417d;\\u4417ot;\\u417b\\u01f2\\u1554\\0\\u155boWidt\\xe8\\u0ad9a;\\u4396r;\\u6128pf;\\u6124cr;\\uc000\\ud835\\udcb5\\u0be1\\u1583\\u158a\\u1590\\0\\u15b0\\u15b6\\u15bf\\0\\0\\0\\0\\u15c6\\u15db\\u15eb\\u165f\\u166d\\0\\u1695\\u169b\\u16b2\\u16b9\\0\\u16becute\\u803b\\xe1\\u40e1reve;\\u4103\\u0300;Ediuy\\u159c\\u159d\\u15a1\\u15a3\\u15a8\\u15ad\\u623e;\\uc000\\u223e\\u0333;\\u623frc\\u803b\\xe2\\u40e2te\\u80bb\\xb4\\u0306;\\u4430lig\\u803b\\xe6\\u40e6\\u0100;r\\xb2\\u15ba;\\uc000\\ud835\\udd1erave\\u803b\\xe0\\u40e0\\u0100ep\\u15ca\\u15d6\\u0100fp\\u15cf\\u15d4sym;\\u6135\\xe8\\u15d3ha;\\u43b1\\u0100ap\\u15dfc\\u0100cl\\u15e4\\u15e7r;\\u4101g;\\u6a3f\\u0264\\u15f0\\0\\0\\u160a\\u0280;adsv\\u15fa\\u15fb\\u15ff\\u1601\\u1607\\u6227nd;\\u6a55;\\u6a5clope;\\u6a58;\\u6a5a\\u0380;elmrsz\\u1618\\u1619\\u161b\\u161e\\u163f\\u164f\\u1659\\u6220;\\u69a4e\\xbb\\u1619sd\\u0100;a\\u1625\\u1626\\u6221\\u0461\\u1630\\u1632\\u1634\\u1636\\u1638\\u163a\\u163c\\u163e;\\u69a8;\\u69a9;\\u69aa;\\u69ab;\\u69ac;\\u69ad;\\u69ae;\\u69aft\\u0100;v\\u1645\\u1646\\u621fb\\u0100;d\\u164c\\u164d\\u62be;\\u699d\\u0100pt\\u1654\\u1657h;\\u6222\\xbb\\xb9arr;\\u637c\\u0100gp\\u1663\\u1667on;\\u4105f;\\uc000\\ud835\\udd52\\u0380;Eaeiop\\u12c1\\u167b\\u167d\\u1682\\u1684\\u1687\\u168a;\\u6a70cir;\\u6a6f;\\u624ad;\\u624bs;\\u4027rox\\u0100;e\\u12c1\\u1692\\xf1\\u1683ing\\u803b\\xe5\\u40e5\\u0180cty\\u16a1\\u16a6\\u16a8r;\\uc000\\ud835\\udcb6;\\u402amp\\u0100;e\\u12c1\\u16af\\xf1\\u0288ilde\\u803b\\xe3\\u40e3ml\\u803b\\xe4\\u40e4\\u0100ci\\u16c2\\u16c8onin\\xf4\\u0272nt;\\u6a11\\u0800Nabcdefiklnoprsu\\u16ed\\u16f1\\u1730\\u173c\\u1743\\u1748\\u1778\\u177d\\u17e0\\u17e6\\u1839\\u1850\\u170d\\u193d\\u1948\\u1970ot;\\u6aed\\u0100cr\\u16f6\\u171ek\\u0200ceps\\u1700\\u1705\\u170d\\u1713ong;\\u624cpsilon;\\u43f6rime;\\u6035im\\u0100;e\\u171a\\u171b\\u623dq;\\u62cd\\u0176\\u1722\\u1726ee;\\u62bded\\u0100;g\\u172c\\u172d\\u6305e\\xbb\\u172drk\\u0100;t\\u135c\\u1737brk;\\u63b6\\u0100oy\\u1701\\u1741;\\u4431quo;\\u601e\\u0280cmprt\\u1753\\u175b\\u1761\\u1764\\u1768aus\\u0100;e\\u010a\\u0109ptyv;\\u69b0s\\xe9\\u170cno\\xf5\\u0113\\u0180ahw\\u176f\\u1771\\u1773;\\u43b2;\\u6136een;\\u626cr;\\uc000\\ud835\\udd1fg\\u0380costuvw\\u178d\\u179d\\u17b3\\u17c1\\u17d5\\u17db\\u17de\\u0180aiu\\u1794\\u1796\\u179a\\xf0\\u0760rc;\\u65efp\\xbb\\u1371\\u0180dpt\\u17a4\\u17a8\\u17adot;\\u6a00lus;\\u6a01imes;\\u6a02\\u0271\\u17b9\\0\\0\\u17becup;\\u6a06ar;\\u6605riangle\\u0100du\\u17cd\\u17d2own;\\u65bdp;\\u65b3plus;\\u6a04e\\xe5\\u1444\\xe5\\u14adarow;\\u690d\\u0180ako\\u17ed\\u1826\\u1835\\u0100cn\\u17f2\\u1823k\\u0180lst\\u17fa\\u05ab\\u1802ozenge;\\u69ebriangle\\u0200;dlr\\u1812\\u1813\\u1818\\u181d\\u65b4own;\\u65beeft;\\u65c2ight;\\u65b8k;\\u6423\\u01b1\\u182b\\0\\u1833\\u01b2\\u182f\\0\\u1831;\\u6592;\\u65914;\\u6593ck;\\u6588\\u0100eo\\u183e\\u184d\\u0100;q\\u1843\\u1846\\uc000=\\u20e5uiv;\\uc000\\u2261\\u20e5t;\\u6310\\u0200ptwx\\u1859\\u185e\\u1867\\u186cf;\\uc000\\ud835\\udd53\\u0100;t\\u13cb\\u1863om\\xbb\\u13cctie;\\u62c8\\u0600DHUVbdhmptuv\\u1885\\u1896\\u18aa\\u18bb\\u18d7\\u18db\\u18ec\\u18ff\\u1905\\u190a\\u1910\\u1921\\u0200LRlr\\u188e\\u1890\\u1892\\u1894;\\u6557;\\u6554;\\u6556;\\u6553\\u0280;DUdu\\u18a1\\u18a2\\u18a4\\u18a6\\u18a8\\u6550;\\u6566;\\u6569;\\u6564;\\u6567\\u0200LRlr\\u18b3\\u18b5\\u18b7\\u18b9;\\u655d;\\u655a;\\u655c;\\u6559\\u0380;HLRhlr\\u18ca\\u18cb\\u18cd\\u18cf\\u18d1\\u18d3\\u18d5\\u6551;\\u656c;\\u6563;\\u6560;\\u656b;\\u6562;\\u655fox;\\u69c9\\u0200LRlr\\u18e4\\u18e6\\u18e8\\u18ea;\\u6555;\\u6552;\\u6510;\\u650c\\u0280;DUdu\\u06bd\\u18f7\\u18f9\\u18fb\\u18fd;\\u6565;\\u6568;\\u652c;\\u6534inus;\\u629flus;\\u629eimes;\\u62a0\\u0200LRlr\\u1919\\u191b\\u191d\\u191f;\\u655b;\\u6558;\\u6518;\\u6514\\u0380;HLRhlr\\u1930\\u1931\\u1933\\u1935\\u1937\\u1939\\u193b\\u6502;\\u656a;\\u6561;\\u655e;\\u653c;\\u6524;\\u651c\\u0100ev\\u0123\\u1942bar\\u803b\\xa6\\u40a6\\u0200ceio\\u1951\\u1956\\u195a\\u1960r;\\uc000\\ud835\\udcb7mi;\\u604fm\\u0100;e\\u171a\\u171cl\\u0180;bh\\u1968\\u1969\\u196b\\u405c;\\u69c5sub;\\u67c8\\u016c\\u1974\\u197el\\u0100;e\\u1979\\u197a\\u6022t\\xbb\\u197ap\\u0180;Ee\\u012f\\u1985\\u1987;\\u6aae\\u0100;q\\u06dc\\u06db\\u0ce1\\u19a7\\0\\u19e8\\u1a11\\u1a15\\u1a32\\0\\u1a37\\u1a50\\0\\0\\u1ab4\\0\\0\\u1ac1\\0\\0\\u1b21\\u1b2e\\u1b4d\\u1b52\\0\\u1bfd\\0\\u1c0c\\u0180cpr\\u19ad\\u19b2\\u19ddute;\\u4107\\u0300;abcds\\u19bf\\u19c0\\u19c4\\u19ca\\u19d5\\u19d9\\u6229nd;\\u6a44rcup;\\u6a49\\u0100au\\u19cf\\u19d2p;\\u6a4bp;\\u6a47ot;\\u6a40;\\uc000\\u2229\\ufe00\\u0100eo\\u19e2\\u19e5t;\\u6041\\xee\\u0693\\u0200aeiu\\u19f0\\u19fb\\u1a01\\u1a05\\u01f0\\u19f5\\0\\u19f8s;\\u6a4don;\\u410ddil\\u803b\\xe7\\u40e7rc;\\u4109ps\\u0100;s\\u1a0c\\u1a0d\\u6a4cm;\\u6a50ot;\\u410b\\u0180dmn\\u1a1b\\u1a20\\u1a26il\\u80bb\\xb8\\u01adptyv;\\u69b2t\\u8100\\xa2;e\\u1a2d\\u1a2e\\u40a2r\\xe4\\u01b2r;\\uc000\\ud835\\udd20\\u0180cei\\u1a3d\\u1a40\\u1a4dy;\\u4447ck\\u0100;m\\u1a47\\u1a48\\u6713ark\\xbb\\u1a48;\\u43c7r\\u0380;Ecefms\\u1a5f\\u1a60\\u1a62\\u1a6b\\u1aa4\\u1aaa\\u1aae\\u65cb;\\u69c3\\u0180;el\\u1a69\\u1a6a\\u1a6d\\u42c6q;\\u6257e\\u0261\\u1a74\\0\\0\\u1a88rrow\\u0100lr\\u1a7c\\u1a81eft;\\u61baight;\\u61bb\\u0280RSacd\\u1a92\\u1a94\\u1a96\\u1a9a\\u1a9f\\xbb\\u0f47;\\u64c8st;\\u629birc;\\u629aash;\\u629dnint;\\u6a10id;\\u6aefcir;\\u69c2ubs\\u0100;u\\u1abb\\u1abc\\u6663it\\xbb\\u1abc\\u02ec\\u1ac7\\u1ad4\\u1afa\\0\\u1b0aon\\u0100;e\\u1acd\\u1ace\\u403a\\u0100;q\\xc7\\xc6\\u026d\\u1ad9\\0\\0\\u1ae2a\\u0100;t\\u1ade\\u1adf\\u402c;\\u4040\\u0180;fl\\u1ae8\\u1ae9\\u1aeb\\u6201\\xee\\u1160e\\u0100mx\\u1af1\\u1af6ent\\xbb\\u1ae9e\\xf3\\u024d\\u01e7\\u1afe\\0\\u1b07\\u0100;d\\u12bb\\u1b02ot;\\u6a6dn\\xf4\\u0246\\u0180fry\\u1b10\\u1b14\\u1b17;\\uc000\\ud835\\udd54o\\xe4\\u0254\\u8100\\xa9;s\\u0155\\u1b1dr;\\u6117\\u0100ao\\u1b25\\u1b29rr;\\u61b5ss;\\u6717\\u0100cu\\u1b32\\u1b37r;\\uc000\\ud835\\udcb8\\u0100bp\\u1b3c\\u1b44\\u0100;e\\u1b41\\u1b42\\u6acf;\\u6ad1\\u0100;e\\u1b49\\u1b4a\\u6ad0;\\u6ad2dot;\\u62ef\\u0380delprvw\\u1b60\\u1b6c\\u1b77\\u1b82\\u1bac\\u1bd4\\u1bf9arr\\u0100lr\\u1b68\\u1b6a;\\u6938;\\u6935\\u0270\\u1b72\\0\\0\\u1b75r;\\u62dec;\\u62dfarr\\u0100;p\\u1b7f\\u1b80\\u61b6;\\u693d\\u0300;bcdos\\u1b8f\\u1b90\\u1b96\\u1ba1\\u1ba5\\u1ba8\\u622arcap;\\u6a48\\u0100au\\u1b9b\\u1b9ep;\\u6a46p;\\u6a4aot;\\u628dr;\\u6a45;\\uc000\\u222a\\ufe00\\u0200alrv\\u1bb5\\u1bbf\\u1bde\\u1be3rr\\u0100;m\\u1bbc\\u1bbd\\u61b7;\\u693cy\\u0180evw\\u1bc7\\u1bd4\\u1bd8q\\u0270\\u1bce\\0\\0\\u1bd2re\\xe3\\u1b73u\\xe3\\u1b75ee;\\u62ceedge;\\u62cfen\\u803b\\xa4\\u40a4earrow\\u0100lr\\u1bee\\u1bf3eft\\xbb\\u1b80ight\\xbb\\u1bbde\\xe4\\u1bdd\\u0100ci\\u1c01\\u1c07onin\\xf4\\u01f7nt;\\u6231lcty;\\u632d\\u0980AHabcdefhijlorstuwz\\u1c38\\u1c3b\\u1c3f\\u1c5d\\u1c69\\u1c75\\u1c8a\\u1c9e\\u1cac\\u1cb7\\u1cfb\\u1cff\\u1d0d\\u1d7b\\u1d91\\u1dab\\u1dbb\\u1dc6\\u1dcdr\\xf2\\u0381ar;\\u6965\\u0200glrs\\u1c48\\u1c4d\\u1c52\\u1c54ger;\\u6020eth;\\u6138\\xf2\\u1133h\\u0100;v\\u1c5a\\u1c5b\\u6010\\xbb\\u090a\\u016b\\u1c61\\u1c67arow;\\u690fa\\xe3\\u0315\\u0100ay\\u1c6e\\u1c73ron;\\u410f;\\u4434\\u0180;ao\\u0332\\u1c7c\\u1c84\\u0100gr\\u02bf\\u1c81r;\\u61catseq;\\u6a77\\u0180glm\\u1c91\\u1c94\\u1c98\\u803b\\xb0\\u40b0ta;\\u43b4ptyv;\\u69b1\\u0100ir\\u1ca3\\u1ca8sht;\\u697f;\\uc000\\ud835\\udd21ar\\u0100lr\\u1cb3\\u1cb5\\xbb\\u08dc\\xbb\\u101e\\u0280aegsv\\u1cc2\\u0378\\u1cd6\\u1cdc\\u1ce0m\\u0180;os\\u0326\\u1cca\\u1cd4nd\\u0100;s\\u0326\\u1cd1uit;\\u6666amma;\\u43ddin;\\u62f2\\u0180;io\\u1ce7\\u1ce8\\u1cf8\\u40f7de\\u8100\\xf7;o\\u1ce7\\u1cf0ntimes;\\u62c7n\\xf8\\u1cf7cy;\\u4452c\\u026f\\u1d06\\0\\0\\u1d0arn;\\u631eop;\\u630d\\u0280lptuw\\u1d18\\u1d1d\\u1d22\\u1d49\\u1d55lar;\\u4024f;\\uc000\\ud835\\udd55\\u0280;emps\\u030b\\u1d2d\\u1d37\\u1d3d\\u1d42q\\u0100;d\\u0352\\u1d33ot;\\u6251inus;\\u6238lus;\\u6214quare;\\u62a1blebarwedg\\xe5\\xfan\\u0180adh\\u112e\\u1d5d\\u1d67ownarrow\\xf3\\u1c83arpoon\\u0100lr\\u1d72\\u1d76ef\\xf4\\u1cb4igh\\xf4\\u1cb6\\u0162\\u1d7f\\u1d85karo\\xf7\\u0f42\\u026f\\u1d8a\\0\\0\\u1d8ern;\\u631fop;\\u630c\\u0180cot\\u1d98\\u1da3\\u1da6\\u0100ry\\u1d9d\\u1da1;\\uc000\\ud835\\udcb9;\\u4455l;\\u69f6rok;\\u4111\\u0100dr\\u1db0\\u1db4ot;\\u62f1i\\u0100;f\\u1dba\\u1816\\u65bf\\u0100ah\\u1dc0\\u1dc3r\\xf2\\u0429a\\xf2\\u0fa6angle;\\u69a6\\u0100ci\\u1dd2\\u1dd5y;\\u445fgrarr;\\u67ff\\u0900Dacdefglmnopqrstux\\u1e01\\u1e09\\u1e19\\u1e38\\u0578\\u1e3c\\u1e49\\u1e61\\u1e7e\\u1ea5\\u1eaf\\u1ebd\\u1ee1\\u1f2a\\u1f37\\u1f44\\u1f4e\\u1f5a\\u0100Do\\u1e06\\u1d34o\\xf4\\u1c89\\u0100cs\\u1e0e\\u1e14ute\\u803b\\xe9\\u40e9ter;\\u6a6e\\u0200aioy\\u1e22\\u1e27\\u1e31\\u1e36ron;\\u411br\\u0100;c\\u1e2d\\u1e2e\\u6256\\u803b\\xea\\u40ealon;\\u6255;\\u444dot;\\u4117\\u0100Dr\\u1e41\\u1e45ot;\\u6252;\\uc000\\ud835\\udd22\\u0180;rs\\u1e50\\u1e51\\u1e57\\u6a9aave\\u803b\\xe8\\u40e8\\u0100;d\\u1e5c\\u1e5d\\u6a96ot;\\u6a98\\u0200;ils\\u1e6a\\u1e6b\\u1e72\\u1e74\\u6a99nters;\\u63e7;\\u6113\\u0100;d\\u1e79\\u1e7a\\u6a95ot;\\u6a97\\u0180aps\\u1e85\\u1e89\\u1e97cr;\\u4113ty\\u0180;sv\\u1e92\\u1e93\\u1e95\\u6205et\\xbb\\u1e93p\\u01001;\\u1e9d\\u1ea4\\u0133\\u1ea1\\u1ea3;\\u6004;\\u6005\\u6003\\u0100gs\\u1eaa\\u1eac;\\u414bp;\\u6002\\u0100gp\\u1eb4\\u1eb8on;\\u4119f;\\uc000\\ud835\\udd56\\u0180als\\u1ec4\\u1ece\\u1ed2r\\u0100;s\\u1eca\\u1ecb\\u62d5l;\\u69e3us;\\u6a71i\\u0180;lv\\u1eda\\u1edb\\u1edf\\u43b5on\\xbb\\u1edb;\\u43f5\\u0200csuv\\u1eea\\u1ef3\\u1f0b\\u1f23\\u0100io\\u1eef\\u1e31rc\\xbb\\u1e2e\\u0269\\u1ef9\\0\\0\\u1efb\\xed\\u0548ant\\u0100gl\\u1f02\\u1f06tr\\xbb\\u1e5dess\\xbb\\u1e7a\\u0180aei\\u1f12\\u1f16\\u1f1als;\\u403dst;\\u625fv\\u0100;D\\u0235\\u1f20D;\\u6a78parsl;\\u69e5\\u0100Da\\u1f2f\\u1f33ot;\\u6253rr;\\u6971\\u0180cdi\\u1f3e\\u1f41\\u1ef8r;\\u612fo\\xf4\\u0352\\u0100ah\\u1f49\\u1f4b;\\u43b7\\u803b\\xf0\\u40f0\\u0100mr\\u1f53\\u1f57l\\u803b\\xeb\\u40ebo;\\u60ac\\u0180cip\\u1f61\\u1f64\\u1f67l;\\u4021s\\xf4\\u056e\\u0100eo\\u1f6c\\u1f74ctatio\\xee\\u0559nential\\xe5\\u0579\\u09e1\\u1f92\\0\\u1f9e\\0\\u1fa1\\u1fa7\\0\\0\\u1fc6\\u1fcc\\0\\u1fd3\\0\\u1fe6\\u1fea\\u2000\\0\\u2008\\u205allingdotse\\xf1\\u1e44y;\\u4444male;\\u6640\\u0180ilr\\u1fad\\u1fb3\\u1fc1lig;\\u8000\\ufb03\\u0269\\u1fb9\\0\\0\\u1fbdg;\\u8000\\ufb00ig;\\u8000\\ufb04;\\uc000\\ud835\\udd23lig;\\u8000\\ufb01lig;\\uc000fj\\u0180alt\\u1fd9\\u1fdc\\u1fe1t;\\u666dig;\\u8000\\ufb02ns;\\u65b1of;\\u4192\\u01f0\\u1fee\\0\\u1ff3f;\\uc000\\ud835\\udd57\\u0100ak\\u05bf\\u1ff7\\u0100;v\\u1ffc\\u1ffd\\u62d4;\\u6ad9artint;\\u6a0d\\u0100ao\\u200c\\u2055\\u0100cs\\u2011\\u2052\\u03b1\\u201a\\u2030\\u2038\\u2045\\u2048\\0\\u2050\\u03b2\\u2022\\u2025\\u2027\\u202a\\u202c\\0\\u202e\\u803b\\xbd\\u40bd;\\u6153\\u803b\\xbc\\u40bc;\\u6155;\\u6159;\\u615b\\u01b3\\u2034\\0\\u2036;\\u6154;\\u6156\\u02b4\\u203e\\u2041\\0\\0\\u2043\\u803b\\xbe\\u40be;\\u6157;\\u615c5;\\u6158\\u01b6\\u204c\\0\\u204e;\\u615a;\\u615d8;\\u615el;\\u6044wn;\\u6322cr;\\uc000\\ud835\\udcbb\\u0880Eabcdefgijlnorstv\\u2082\\u2089\\u209f\\u20a5\\u20b0\\u20b4\\u20f0\\u20f5\\u20fa\\u20ff\\u2103\\u2112\\u2138\\u0317\\u213e\\u2152\\u219e\\u0100;l\\u064d\\u2087;\\u6a8c\\u0180cmp\\u2090\\u2095\\u209dute;\\u41f5ma\\u0100;d\\u209c\\u1cda\\u43b3;\\u6a86reve;\\u411f\\u0100iy\\u20aa\\u20aerc;\\u411d;\\u4433ot;\\u4121\\u0200;lqs\\u063e\\u0642\\u20bd\\u20c9\\u0180;qs\\u063e\\u064c\\u20c4lan\\xf4\\u0665\\u0200;cdl\\u0665\\u20d2\\u20d5\\u20e5c;\\u6aa9ot\\u0100;o\\u20dc\\u20dd\\u6a80\\u0100;l\\u20e2\\u20e3\\u6a82;\\u6a84\\u0100;e\\u20ea\\u20ed\\uc000\\u22db\\ufe00s;\\u6a94r;\\uc000\\ud835\\udd24\\u0100;g\\u0673\\u061bmel;\\u6137cy;\\u4453\\u0200;Eaj\\u065a\\u210c\\u210e\\u2110;\\u6a92;\\u6aa5;\\u6aa4\\u0200Eaes\\u211b\\u211d\\u2129\\u2134;\\u6269p\\u0100;p\\u2123\\u2124\\u6a8arox\\xbb\\u2124\\u0100;q\\u212e\\u212f\\u6a88\\u0100;q\\u212e\\u211bim;\\u62e7pf;\\uc000\\ud835\\udd58\\u0100ci\\u2143\\u2146r;\\u610am\\u0180;el\\u066b\\u214e\\u2150;\\u6a8e;\\u6a90\\u8300>;cdlqr\\u05ee\\u2160\\u216a\\u216e\\u2173\\u2179\\u0100ci\\u2165\\u2167;\\u6aa7r;\\u6a7aot;\\u62d7Par;\\u6995uest;\\u6a7c\\u0280adels\\u2184\\u216a\\u2190\\u0656\\u219b\\u01f0\\u2189\\0\\u218epro\\xf8\\u209er;\\u6978q\\u0100lq\\u063f\\u2196les\\xf3\\u2088i\\xed\\u066b\\u0100en\\u21a3\\u21adrtneqq;\\uc000\\u2269\\ufe00\\xc5\\u21aa\\u0500Aabcefkosy\\u21c4\\u21c7\\u21f1\\u21f5\\u21fa\\u2218\\u221d\\u222f\\u2268\\u227dr\\xf2\\u03a0\\u0200ilmr\\u21d0\\u21d4\\u21d7\\u21dbrs\\xf0\\u1484f\\xbb\\u2024il\\xf4\\u06a9\\u0100dr\\u21e0\\u21e4cy;\\u444a\\u0180;cw\\u08f4\\u21eb\\u21efir;\\u6948;\\u61adar;\\u610firc;\\u4125\\u0180alr\\u2201\\u220e\\u2213rts\\u0100;u\\u2209\\u220a\\u6665it\\xbb\\u220alip;\\u6026con;\\u62b9r;\\uc000\\ud835\\udd25s\\u0100ew\\u2223\\u2229arow;\\u6925arow;\\u6926\\u0280amopr\\u223a\\u223e\\u2243\\u225e\\u2263rr;\\u61fftht;\\u623bk\\u0100lr\\u2249\\u2253eftarrow;\\u61a9ightarrow;\\u61aaf;\\uc000\\ud835\\udd59bar;\\u6015\\u0180clt\\u226f\\u2274\\u2278r;\\uc000\\ud835\\udcbdas\\xe8\\u21f4rok;\\u4127\\u0100bp\\u2282\\u2287ull;\\u6043hen\\xbb\\u1c5b\\u0ae1\\u22a3\\0\\u22aa\\0\\u22b8\\u22c5\\u22ce\\0\\u22d5\\u22f3\\0\\0\\u22f8\\u2322\\u2367\\u2362\\u237f\\0\\u2386\\u23aa\\u23b4cute\\u803b\\xed\\u40ed\\u0180;iy\\u0771\\u22b0\\u22b5rc\\u803b\\xee\\u40ee;\\u4438\\u0100cx\\u22bc\\u22bfy;\\u4435cl\\u803b\\xa1\\u40a1\\u0100fr\\u039f\\u22c9;\\uc000\\ud835\\udd26rave\\u803b\\xec\\u40ec\\u0200;ino\\u073e\\u22dd\\u22e9\\u22ee\\u0100in\\u22e2\\u22e6nt;\\u6a0ct;\\u622dfin;\\u69dcta;\\u6129lig;\\u4133\\u0180aop\\u22fe\\u231a\\u231d\\u0180cgt\\u2305\\u2308\\u2317r;\\u412b\\u0180elp\\u071f\\u230f\\u2313in\\xe5\\u078ear\\xf4\\u0720h;\\u4131f;\\u62b7ed;\\u41b5\\u0280;cfot\\u04f4\\u232c\\u2331\\u233d\\u2341are;\\u6105in\\u0100;t\\u2338\\u2339\\u621eie;\\u69dddo\\xf4\\u2319\\u0280;celp\\u0757\\u234c\\u2350\\u235b\\u2361al;\\u62ba\\u0100gr\\u2355\\u2359er\\xf3\\u1563\\xe3\\u234darhk;\\u6a17rod;\\u6a3c\\u0200cgpt\\u236f\\u2372\\u2376\\u237by;\\u4451on;\\u412ff;\\uc000\\ud835\\udd5aa;\\u43b9uest\\u803b\\xbf\\u40bf\\u0100ci\\u238a\\u238fr;\\uc000\\ud835\\udcben\\u0280;Edsv\\u04f4\\u239b\\u239d\\u23a1\\u04f3;\\u62f9ot;\\u62f5\\u0100;v\\u23a6\\u23a7\\u62f4;\\u62f3\\u0100;i\\u0777\\u23aelde;\\u4129\\u01eb\\u23b8\\0\\u23bccy;\\u4456l\\u803b\\xef\\u40ef\\u0300cfmosu\\u23cc\\u23d7\\u23dc\\u23e1\\u23e7\\u23f5\\u0100iy\\u23d1\\u23d5rc;\\u4135;\\u4439r;\\uc000\\ud835\\udd27ath;\\u4237pf;\\uc000\\ud835\\udd5b\\u01e3\\u23ec\\0\\u23f1r;\\uc000\\ud835\\udcbfrcy;\\u4458kcy;\\u4454\\u0400acfghjos\\u240b\\u2416\\u2422\\u2427\\u242d\\u2431\\u2435\\u243bppa\\u0100;v\\u2413\\u2414\\u43ba;\\u43f0\\u0100ey\\u241b\\u2420dil;\\u4137;\\u443ar;\\uc000\\ud835\\udd28reen;\\u4138cy;\\u4445cy;\\u445cpf;\\uc000\\ud835\\udd5ccr;\\uc000\\ud835\\udcc0\\u0b80ABEHabcdefghjlmnoprstuv\\u2470\\u2481\\u2486\\u248d\\u2491\\u250e\\u253d\\u255a\\u2580\\u264e\\u265e\\u2665\\u2679\\u267d\\u269a\\u26b2\\u26d8\\u275d\\u2768\\u278b\\u27c0\\u2801\\u2812\\u0180art\\u2477\\u247a\\u247cr\\xf2\\u09c6\\xf2\\u0395ail;\\u691barr;\\u690e\\u0100;g\\u0994\\u248b;\\u6a8bar;\\u6962\\u0963\\u24a5\\0\\u24aa\\0\\u24b1\\0\\0\\0\\0\\0\\u24b5\\u24ba\\0\\u24c6\\u24c8\\u24cd\\0\\u24f9ute;\\u413amptyv;\\u69b4ra\\xee\\u084cbda;\\u43bbg\\u0180;dl\\u088e\\u24c1\\u24c3;\\u6991\\xe5\\u088e;\\u6a85uo\\u803b\\xab\\u40abr\\u0400;bfhlpst\\u0899\\u24de\\u24e6\\u24e9\\u24eb\\u24ee\\u24f1\\u24f5\\u0100;f\\u089d\\u24e3s;\\u691fs;\\u691d\\xeb\\u2252p;\\u61abl;\\u6939im;\\u6973l;\\u61a2\\u0180;ae\\u24ff\\u2500\\u2504\\u6aabil;\\u6919\\u0100;s\\u2509\\u250a\\u6aad;\\uc000\\u2aad\\ufe00\\u0180abr\\u2515\\u2519\\u251drr;\\u690crk;\\u6772\\u0100ak\\u2522\\u252cc\\u0100ek\\u2528\\u252a;\\u407b;\\u405b\\u0100es\\u2531\\u2533;\\u698bl\\u0100du\\u2539\\u253b;\\u698f;\\u698d\\u0200aeuy\\u2546\\u254b\\u2556\\u2558ron;\\u413e\\u0100di\\u2550\\u2554il;\\u413c\\xec\\u08b0\\xe2\\u2529;\\u443b\\u0200cqrs\\u2563\\u2566\\u256d\\u257da;\\u6936uo\\u0100;r\\u0e19\\u1746\\u0100du\\u2572\\u2577har;\\u6967shar;\\u694bh;\\u61b2\\u0280;fgqs\\u258b\\u258c\\u0989\\u25f3\\u25ff\\u6264t\\u0280ahlrt\\u2598\\u25a4\\u25b7\\u25c2\\u25e8rrow\\u0100;t\\u0899\\u25a1a\\xe9\\u24f6arpoon\\u0100du\\u25af\\u25b4own\\xbb\\u045ap\\xbb\\u0966eftarrows;\\u61c7ight\\u0180ahs\\u25cd\\u25d6\\u25derrow\\u0100;s\\u08f4\\u08a7arpoon\\xf3\\u0f98quigarro\\xf7\\u21f0hreetimes;\\u62cb\\u0180;qs\\u258b\\u0993\\u25falan\\xf4\\u09ac\\u0280;cdgs\\u09ac\\u260a\\u260d\\u261d\\u2628c;\\u6aa8ot\\u0100;o\\u2614\\u2615\\u6a7f\\u0100;r\\u261a\\u261b\\u6a81;\\u6a83\\u0100;e\\u2622\\u2625\\uc000\\u22da\\ufe00s;\\u6a93\\u0280adegs\\u2633\\u2639\\u263d\\u2649\\u264bppro\\xf8\\u24c6ot;\\u62d6q\\u0100gq\\u2643\\u2645\\xf4\\u0989gt\\xf2\\u248c\\xf4\\u099bi\\xed\\u09b2\\u0180ilr\\u2655\\u08e1\\u265asht;\\u697c;\\uc000\\ud835\\udd29\\u0100;E\\u099c\\u2663;\\u6a91\\u0161\\u2669\\u2676r\\u0100du\\u25b2\\u266e\\u0100;l\\u0965\\u2673;\\u696alk;\\u6584cy;\\u4459\\u0280;acht\\u0a48\\u2688\\u268b\\u2691\\u2696r\\xf2\\u25c1orne\\xf2\\u1d08ard;\\u696bri;\\u65fa\\u0100io\\u269f\\u26a4dot;\\u4140ust\\u0100;a\\u26ac\\u26ad\\u63b0che\\xbb\\u26ad\\u0200Eaes\\u26bb\\u26bd\\u26c9\\u26d4;\\u6268p\\u0100;p\\u26c3\\u26c4\\u6a89rox\\xbb\\u26c4\\u0100;q\\u26ce\\u26cf\\u6a87\\u0100;q\\u26ce\\u26bbim;\\u62e6\\u0400abnoptwz\\u26e9\\u26f4\\u26f7\\u271a\\u272f\\u2741\\u2747\\u2750\\u0100nr\\u26ee\\u26f1g;\\u67ecr;\\u61fdr\\xeb\\u08c1g\\u0180lmr\\u26ff\\u270d\\u2714eft\\u0100ar\\u09e6\\u2707ight\\xe1\\u09f2apsto;\\u67fcight\\xe1\\u09fdparrow\\u0100lr\\u2725\\u2729ef\\xf4\\u24edight;\\u61ac\\u0180afl\\u2736\\u2739\\u273dr;\\u6985;\\uc000\\ud835\\udd5dus;\\u6a2dimes;\\u6a34\\u0161\\u274b\\u274fst;\\u6217\\xe1\\u134e\\u0180;ef\\u2757\\u2758\\u1800\\u65cange\\xbb\\u2758ar\\u0100;l\\u2764\\u2765\\u4028t;\\u6993\\u0280achmt\\u2773\\u2776\\u277c\\u2785\\u2787r\\xf2\\u08a8orne\\xf2\\u1d8car\\u0100;d\\u0f98\\u2783;\\u696d;\\u600eri;\\u62bf\\u0300achiqt\\u2798\\u279d\\u0a40\\u27a2\\u27ae\\u27bbquo;\\u6039r;\\uc000\\ud835\\udcc1m\\u0180;eg\\u09b2\\u27aa\\u27ac;\\u6a8d;\\u6a8f\\u0100bu\\u252a\\u27b3o\\u0100;r\\u0e1f\\u27b9;\\u601arok;\\u4142\\u8400<;cdhilqr\\u082b\\u27d2\\u2639\\u27dc\\u27e0\\u27e5\\u27ea\\u27f0\\u0100ci\\u27d7\\u27d9;\\u6aa6r;\\u6a79re\\xe5\\u25f2mes;\\u62c9arr;\\u6976uest;\\u6a7b\\u0100Pi\\u27f5\\u27f9ar;\\u6996\\u0180;ef\\u2800\\u092d\\u181b\\u65c3r\\u0100du\\u2807\\u280dshar;\\u694ahar;\\u6966\\u0100en\\u2817\\u2821rtneqq;\\uc000\\u2268\\ufe00\\xc5\\u281e\\u0700Dacdefhilnopsu\\u2840\\u2845\\u2882\\u288e\\u2893\\u28a0\\u28a5\\u28a8\\u28da\\u28e2\\u28e4\\u0a83\\u28f3\\u2902Dot;\\u623a\\u0200clpr\\u284e\\u2852\\u2863\\u287dr\\u803b\\xaf\\u40af\\u0100et\\u2857\\u2859;\\u6642\\u0100;e\\u285e\\u285f\\u6720se\\xbb\\u285f\\u0100;s\\u103b\\u2868to\\u0200;dlu\\u103b\\u2873\\u2877\\u287bow\\xee\\u048cef\\xf4\\u090f\\xf0\\u13d1ker;\\u65ae\\u0100oy\\u2887\\u288cmma;\\u6a29;\\u443cash;\\u6014asuredangle\\xbb\\u1626r;\\uc000\\ud835\\udd2ao;\\u6127\\u0180cdn\\u28af\\u28b4\\u28c9ro\\u803b\\xb5\\u40b5\\u0200;acd\\u1464\\u28bd\\u28c0\\u28c4s\\xf4\\u16a7ir;\\u6af0ot\\u80bb\\xb7\\u01b5us\\u0180;bd\\u28d2\\u1903\\u28d3\\u6212\\u0100;u\\u1d3c\\u28d8;\\u6a2a\\u0163\\u28de\\u28e1p;\\u6adb\\xf2\\u2212\\xf0\\u0a81\\u0100dp\\u28e9\\u28eeels;\\u62a7f;\\uc000\\ud835\\udd5e\\u0100ct\\u28f8\\u28fdr;\\uc000\\ud835\\udcc2pos\\xbb\\u159d\\u0180;lm\\u2909\\u290a\\u290d\\u43bctimap;\\u62b8\\u0c00GLRVabcdefghijlmoprstuvw\\u2942\\u2953\\u297e\\u2989\\u2998\\u29da\\u29e9\\u2a15\\u2a1a\\u2a58\\u2a5d\\u2a83\\u2a95\\u2aa4\\u2aa8\\u2b04\\u2b07\\u2b44\\u2b7f\\u2bae\\u2c34\\u2c67\\u2c7c\\u2ce9\\u0100gt\\u2947\\u294b;\\uc000\\u22d9\\u0338\\u0100;v\\u2950\\u0bcf\\uc000\\u226b\\u20d2\\u0180elt\\u295a\\u2972\\u2976ft\\u0100ar\\u2961\\u2967rrow;\\u61cdightarrow;\\u61ce;\\uc000\\u22d8\\u0338\\u0100;v\\u297b\\u0c47\\uc000\\u226a\\u20d2ightarrow;\\u61cf\\u0100Dd\\u298e\\u2993ash;\\u62afash;\\u62ae\\u0280bcnpt\\u29a3\\u29a7\\u29ac\\u29b1\\u29ccla\\xbb\\u02deute;\\u4144g;\\uc000\\u2220\\u20d2\\u0280;Eiop\\u0d84\\u29bc\\u29c0\\u29c5\\u29c8;\\uc000\\u2a70\\u0338d;\\uc000\\u224b\\u0338s;\\u4149ro\\xf8\\u0d84ur\\u0100;a\\u29d3\\u29d4\\u666el\\u0100;s\\u29d3\\u0b38\\u01f3\\u29df\\0\\u29e3p\\u80bb\\xa0\\u0b37mp\\u0100;e\\u0bf9\\u0c00\\u0280aeouy\\u29f4\\u29fe\\u2a03\\u2a10\\u2a13\\u01f0\\u29f9\\0\\u29fb;\\u6a43on;\\u4148dil;\\u4146ng\\u0100;d\\u0d7e\\u2a0aot;\\uc000\\u2a6d\\u0338p;\\u6a42;\\u443dash;\\u6013\\u0380;Aadqsx\\u0b92\\u2a29\\u2a2d\\u2a3b\\u2a41\\u2a45\\u2a50rr;\\u61d7r\\u0100hr\\u2a33\\u2a36k;\\u6924\\u0100;o\\u13f2\\u13f0ot;\\uc000\\u2250\\u0338ui\\xf6\\u0b63\\u0100ei\\u2a4a\\u2a4ear;\\u6928\\xed\\u0b98ist\\u0100;s\\u0ba0\\u0b9fr;\\uc000\\ud835\\udd2b\\u0200Eest\\u0bc5\\u2a66\\u2a79\\u2a7c\\u0180;qs\\u0bbc\\u2a6d\\u0be1\\u0180;qs\\u0bbc\\u0bc5\\u2a74lan\\xf4\\u0be2i\\xed\\u0bea\\u0100;r\\u0bb6\\u2a81\\xbb\\u0bb7\\u0180Aap\\u2a8a\\u2a8d\\u2a91r\\xf2\\u2971rr;\\u61aear;\\u6af2\\u0180;sv\\u0f8d\\u2a9c\\u0f8c\\u0100;d\\u2aa1\\u2aa2\\u62fc;\\u62facy;\\u445a\\u0380AEadest\\u2ab7\\u2aba\\u2abe\\u2ac2\\u2ac5\\u2af6\\u2af9r\\xf2\\u2966;\\uc000\\u2266\\u0338rr;\\u619ar;\\u6025\\u0200;fqs\\u0c3b\\u2ace\\u2ae3\\u2aeft\\u0100ar\\u2ad4\\u2ad9rro\\xf7\\u2ac1ightarro\\xf7\\u2a90\\u0180;qs\\u0c3b\\u2aba\\u2aealan\\xf4\\u0c55\\u0100;s\\u0c55\\u2af4\\xbb\\u0c36i\\xed\\u0c5d\\u0100;r\\u0c35\\u2afei\\u0100;e\\u0c1a\\u0c25i\\xe4\\u0d90\\u0100pt\\u2b0c\\u2b11f;\\uc000\\ud835\\udd5f\\u8180\\xac;in\\u2b19\\u2b1a\\u2b36\\u40acn\\u0200;Edv\\u0b89\\u2b24\\u2b28\\u2b2e;\\uc000\\u22f9\\u0338ot;\\uc000\\u22f5\\u0338\\u01e1\\u0b89\\u2b33\\u2b35;\\u62f7;\\u62f6i\\u0100;v\\u0cb8\\u2b3c\\u01e1\\u0cb8\\u2b41\\u2b43;\\u62fe;\\u62fd\\u0180aor\\u2b4b\\u2b63\\u2b69r\\u0200;ast\\u0b7b\\u2b55\\u2b5a\\u2b5flle\\xec\\u0b7bl;\\uc000\\u2afd\\u20e5;\\uc000\\u2202\\u0338lint;\\u6a14\\u0180;ce\\u0c92\\u2b70\\u2b73u\\xe5\\u0ca5\\u0100;c\\u0c98\\u2b78\\u0100;e\\u0c92\\u2b7d\\xf1\\u0c98\\u0200Aait\\u2b88\\u2b8b\\u2b9d\\u2ba7r\\xf2\\u2988rr\\u0180;cw\\u2b94\\u2b95\\u2b99\\u619b;\\uc000\\u2933\\u0338;\\uc000\\u219d\\u0338ghtarrow\\xbb\\u2b95ri\\u0100;e\\u0ccb\\u0cd6\\u0380chimpqu\\u2bbd\\u2bcd\\u2bd9\\u2b04\\u0b78\\u2be4\\u2bef\\u0200;cer\\u0d32\\u2bc6\\u0d37\\u2bc9u\\xe5\\u0d45;\\uc000\\ud835\\udcc3ort\\u026d\\u2b05\\0\\0\\u2bd6ar\\xe1\\u2b56m\\u0100;e\\u0d6e\\u2bdf\\u0100;q\\u0d74\\u0d73su\\u0100bp\\u2beb\\u2bed\\xe5\\u0cf8\\xe5\\u0d0b\\u0180bcp\\u2bf6\\u2c11\\u2c19\\u0200;Ees\\u2bff\\u2c00\\u0d22\\u2c04\\u6284;\\uc000\\u2ac5\\u0338et\\u0100;e\\u0d1b\\u2c0bq\\u0100;q\\u0d23\\u2c00c\\u0100;e\\u0d32\\u2c17\\xf1\\u0d38\\u0200;Ees\\u2c22\\u2c23\\u0d5f\\u2c27\\u6285;\\uc000\\u2ac6\\u0338et\\u0100;e\\u0d58\\u2c2eq\\u0100;q\\u0d60\\u2c23\\u0200gilr\\u2c3d\\u2c3f\\u2c45\\u2c47\\xec\\u0bd7lde\\u803b\\xf1\\u40f1\\xe7\\u0c43iangle\\u0100lr\\u2c52\\u2c5ceft\\u0100;e\\u0c1a\\u2c5a\\xf1\\u0c26ight\\u0100;e\\u0ccb\\u2c65\\xf1\\u0cd7\\u0100;m\\u2c6c\\u2c6d\\u43bd\\u0180;es\\u2c74\\u2c75\\u2c79\\u4023ro;\\u6116p;\\u6007\\u0480DHadgilrs\\u2c8f\\u2c94\\u2c99\\u2c9e\\u2ca3\\u2cb0\\u2cb6\\u2cd3\\u2ce3ash;\\u62adarr;\\u6904p;\\uc000\\u224d\\u20d2ash;\\u62ac\\u0100et\\u2ca8\\u2cac;\\uc000\\u2265\\u20d2;\\uc000>\\u20d2nfin;\\u69de\\u0180Aet\\u2cbd\\u2cc1\\u2cc5rr;\\u6902;\\uc000\\u2264\\u20d2\\u0100;r\\u2cca\\u2ccd\\uc000<\\u20d2ie;\\uc000\\u22b4\\u20d2\\u0100At\\u2cd8\\u2cdcrr;\\u6903rie;\\uc000\\u22b5\\u20d2im;\\uc000\\u223c\\u20d2\\u0180Aan\\u2cf0\\u2cf4\\u2d02rr;\\u61d6r\\u0100hr\\u2cfa\\u2cfdk;\\u6923\\u0100;o\\u13e7\\u13e5ear;\\u6927\\u1253\\u1a95\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\u2d2d\\0\\u2d38\\u2d48\\u2d60\\u2d65\\u2d72\\u2d84\\u1b07\\0\\0\\u2d8d\\u2dab\\0\\u2dc8\\u2dce\\0\\u2ddc\\u2e19\\u2e2b\\u2e3e\\u2e43\\u0100cs\\u2d31\\u1a97ute\\u803b\\xf3\\u40f3\\u0100iy\\u2d3c\\u2d45r\\u0100;c\\u1a9e\\u2d42\\u803b\\xf4\\u40f4;\\u443e\\u0280abios\\u1aa0\\u2d52\\u2d57\\u01c8\\u2d5alac;\\u4151v;\\u6a38old;\\u69bclig;\\u4153\\u0100cr\\u2d69\\u2d6dir;\\u69bf;\\uc000\\ud835\\udd2c\\u036f\\u2d79\\0\\0\\u2d7c\\0\\u2d82n;\\u42dbave\\u803b\\xf2\\u40f2;\\u69c1\\u0100bm\\u2d88\\u0df4ar;\\u69b5\\u0200acit\\u2d95\\u2d98\\u2da5\\u2da8r\\xf2\\u1a80\\u0100ir\\u2d9d\\u2da0r;\\u69beoss;\\u69bbn\\xe5\\u0e52;\\u69c0\\u0180aei\\u2db1\\u2db5\\u2db9cr;\\u414dga;\\u43c9\\u0180cdn\\u2dc0\\u2dc5\\u01cdron;\\u43bf;\\u69b6pf;\\uc000\\ud835\\udd60\\u0180ael\\u2dd4\\u2dd7\\u01d2r;\\u69b7rp;\\u69b9\\u0380;adiosv\\u2dea\\u2deb\\u2dee\\u2e08\\u2e0d\\u2e10\\u2e16\\u6228r\\xf2\\u1a86\\u0200;efm\\u2df7\\u2df8\\u2e02\\u2e05\\u6a5dr\\u0100;o\\u2dfe\\u2dff\\u6134f\\xbb\\u2dff\\u803b\\xaa\\u40aa\\u803b\\xba\\u40bagof;\\u62b6r;\\u6a56lope;\\u6a57;\\u6a5b\\u0180clo\\u2e1f\\u2e21\\u2e27\\xf2\\u2e01ash\\u803b\\xf8\\u40f8l;\\u6298i\\u016c\\u2e2f\\u2e34de\\u803b\\xf5\\u40f5es\\u0100;a\\u01db\\u2e3as;\\u6a36ml\\u803b\\xf6\\u40f6bar;\\u633d\\u0ae1\\u2e5e\\0\\u2e7d\\0\\u2e80\\u2e9d\\0\\u2ea2\\u2eb9\\0\\0\\u2ecb\\u0e9c\\0\\u2f13\\0\\0\\u2f2b\\u2fbc\\0\\u2fc8r\\u0200;ast\\u0403\\u2e67\\u2e72\\u0e85\\u8100\\xb6;l\\u2e6d\\u2e6e\\u40b6le\\xec\\u0403\\u0269\\u2e78\\0\\0\\u2e7bm;\\u6af3;\\u6afdy;\\u443fr\\u0280cimpt\\u2e8b\\u2e8f\\u2e93\\u1865\\u2e97nt;\\u4025od;\\u402eil;\\u6030enk;\\u6031r;\\uc000\\ud835\\udd2d\\u0180imo\\u2ea8\\u2eb0\\u2eb4\\u0100;v\\u2ead\\u2eae\\u43c6;\\u43d5ma\\xf4\\u0a76ne;\\u660e\\u0180;tv\\u2ebf\\u2ec0\\u2ec8\\u43c0chfork\\xbb\\u1ffd;\\u43d6\\u0100au\\u2ecf\\u2edfn\\u0100ck\\u2ed5\\u2eddk\\u0100;h\\u21f4\\u2edb;\\u610e\\xf6\\u21f4s\\u0480;abcdemst\\u2ef3\\u2ef4\\u1908\\u2ef9\\u2efd\\u2f04\\u2f06\\u2f0a\\u2f0e\\u402bcir;\\u6a23ir;\\u6a22\\u0100ou\\u1d40\\u2f02;\\u6a25;\\u6a72n\\u80bb\\xb1\\u0e9dim;\\u6a26wo;\\u6a27\\u0180ipu\\u2f19\\u2f20\\u2f25ntint;\\u6a15f;\\uc000\\ud835\\udd61nd\\u803b\\xa3\\u40a3\\u0500;Eaceinosu\\u0ec8\\u2f3f\\u2f41\\u2f44\\u2f47\\u2f81\\u2f89\\u2f92\\u2f7e\\u2fb6;\\u6ab3p;\\u6ab7u\\xe5\\u0ed9\\u0100;c\\u0ece\\u2f4c\\u0300;acens\\u0ec8\\u2f59\\u2f5f\\u2f66\\u2f68\\u2f7eppro\\xf8\\u2f43urlye\\xf1\\u0ed9\\xf1\\u0ece\\u0180aes\\u2f6f\\u2f76\\u2f7approx;\\u6ab9qq;\\u6ab5im;\\u62e8i\\xed\\u0edfme\\u0100;s\\u2f88\\u0eae\\u6032\\u0180Eas\\u2f78\\u2f90\\u2f7a\\xf0\\u2f75\\u0180dfp\\u0eec\\u2f99\\u2faf\\u0180als\\u2fa0\\u2fa5\\u2faalar;\\u632eine;\\u6312urf;\\u6313\\u0100;t\\u0efb\\u2fb4\\xef\\u0efbrel;\\u62b0\\u0100ci\\u2fc0\\u2fc5r;\\uc000\\ud835\\udcc5;\\u43c8ncsp;\\u6008\\u0300fiopsu\\u2fda\\u22e2\\u2fdf\\u2fe5\\u2feb\\u2ff1r;\\uc000\\ud835\\udd2epf;\\uc000\\ud835\\udd62rime;\\u6057cr;\\uc000\\ud835\\udcc6\\u0180aeo\\u2ff8\\u3009\\u3013t\\u0100ei\\u2ffe\\u3005rnion\\xf3\\u06b0nt;\\u6a16st\\u0100;e\\u3010\\u3011\\u403f\\xf1\\u1f19\\xf4\\u0f14\\u0a80ABHabcdefhilmnoprstux\\u3040\\u3051\\u3055\\u3059\\u30e0\\u310e\\u312b\\u3147\\u3162\\u3172\\u318e\\u3206\\u3215\\u3224\\u3229\\u3258\\u326e\\u3272\\u3290\\u32b0\\u32b7\\u0180art\\u3047\\u304a\\u304cr\\xf2\\u10b3\\xf2\\u03ddail;\\u691car\\xf2\\u1c65ar;\\u6964\\u0380cdenqrt\\u3068\\u3075\\u3078\\u307f\\u308f\\u3094\\u30cc\\u0100eu\\u306d\\u3071;\\uc000\\u223d\\u0331te;\\u4155i\\xe3\\u116emptyv;\\u69b3g\\u0200;del\\u0fd1\\u3089\\u308b\\u308d;\\u6992;\\u69a5\\xe5\\u0fd1uo\\u803b\\xbb\\u40bbr\\u0580;abcfhlpstw\\u0fdc\\u30ac\\u30af\\u30b7\\u30b9\\u30bc\\u30be\\u30c0\\u30c3\\u30c7\\u30cap;\\u6975\\u0100;f\\u0fe0\\u30b4s;\\u6920;\\u6933s;\\u691e\\xeb\\u225d\\xf0\\u272el;\\u6945im;\\u6974l;\\u61a3;\\u619d\\u0100ai\\u30d1\\u30d5il;\\u691ao\\u0100;n\\u30db\\u30dc\\u6236al\\xf3\\u0f1e\\u0180abr\\u30e7\\u30ea\\u30eer\\xf2\\u17e5rk;\\u6773\\u0100ak\\u30f3\\u30fdc\\u0100ek\\u30f9\\u30fb;\\u407d;\\u405d\\u0100es\\u3102\\u3104;\\u698cl\\u0100du\\u310a\\u310c;\\u698e;\\u6990\\u0200aeuy\\u3117\\u311c\\u3127\\u3129ron;\\u4159\\u0100di\\u3121\\u3125il;\\u4157\\xec\\u0ff2\\xe2\\u30fa;\\u4440\\u0200clqs\\u3134\\u3137\\u313d\\u3144a;\\u6937dhar;\\u6969uo\\u0100;r\\u020e\\u020dh;\\u61b3\\u0180acg\\u314e\\u315f\\u0f44l\\u0200;ips\\u0f78\\u3158\\u315b\\u109cn\\xe5\\u10bbar\\xf4\\u0fa9t;\\u65ad\\u0180ilr\\u3169\\u1023\\u316esht;\\u697d;\\uc000\\ud835\\udd2f\\u0100ao\\u3177\\u3186r\\u0100du\\u317d\\u317f\\xbb\\u047b\\u0100;l\\u1091\\u3184;\\u696c\\u0100;v\\u318b\\u318c\\u43c1;\\u43f1\\u0180gns\\u3195\\u31f9\\u31fcht\\u0300ahlrst\\u31a4\\u31b0\\u31c2\\u31d8\\u31e4\\u31eerrow\\u0100;t\\u0fdc\\u31ada\\xe9\\u30c8arpoon\\u0100du\\u31bb\\u31bfow\\xee\\u317ep\\xbb\\u1092eft\\u0100ah\\u31ca\\u31d0rrow\\xf3\\u0feaarpoon\\xf3\\u0551ightarrows;\\u61c9quigarro\\xf7\\u30cbhreetimes;\\u62ccg;\\u42daingdotse\\xf1\\u1f32\\u0180ahm\\u320d\\u3210\\u3213r\\xf2\\u0feaa\\xf2\\u0551;\\u600foust\\u0100;a\\u321e\\u321f\\u63b1che\\xbb\\u321fmid;\\u6aee\\u0200abpt\\u3232\\u323d\\u3240\\u3252\\u0100nr\\u3237\\u323ag;\\u67edr;\\u61fer\\xeb\\u1003\\u0180afl\\u3247\\u324a\\u324er;\\u6986;\\uc000\\ud835\\udd63us;\\u6a2eimes;\\u6a35\\u0100ap\\u325d\\u3267r\\u0100;g\\u3263\\u3264\\u4029t;\\u6994olint;\\u6a12ar\\xf2\\u31e3\\u0200achq\\u327b\\u3280\\u10bc\\u3285quo;\\u603ar;\\uc000\\ud835\\udcc7\\u0100bu\\u30fb\\u328ao\\u0100;r\\u0214\\u0213\\u0180hir\\u3297\\u329b\\u32a0re\\xe5\\u31f8mes;\\u62cai\\u0200;efl\\u32aa\\u1059\\u1821\\u32ab\\u65b9tri;\\u69celuhar;\\u6968;\\u611e\\u0d61\\u32d5\\u32db\\u32df\\u332c\\u3338\\u3371\\0\\u337a\\u33a4\\0\\0\\u33ec\\u33f0\\0\\u3428\\u3448\\u345a\\u34ad\\u34b1\\u34ca\\u34f1\\0\\u3616\\0\\0\\u3633cute;\\u415bqu\\xef\\u27ba\\u0500;Eaceinpsy\\u11ed\\u32f3\\u32f5\\u32ff\\u3302\\u330b\\u330f\\u331f\\u3326\\u3329;\\u6ab4\\u01f0\\u32fa\\0\\u32fc;\\u6ab8on;\\u4161u\\xe5\\u11fe\\u0100;d\\u11f3\\u3307il;\\u415frc;\\u415d\\u0180Eas\\u3316\\u3318\\u331b;\\u6ab6p;\\u6abaim;\\u62e9olint;\\u6a13i\\xed\\u1204;\\u4441ot\\u0180;be\\u3334\\u1d47\\u3335\\u62c5;\\u6a66\\u0380Aacmstx\\u3346\\u334a\\u3357\\u335b\\u335e\\u3363\\u336drr;\\u61d8r\\u0100hr\\u3350\\u3352\\xeb\\u2228\\u0100;o\\u0a36\\u0a34t\\u803b\\xa7\\u40a7i;\\u403bwar;\\u6929m\\u0100in\\u3369\\xf0nu\\xf3\\xf1t;\\u6736r\\u0100;o\\u3376\\u2055\\uc000\\ud835\\udd30\\u0200acoy\\u3382\\u3386\\u3391\\u33a0rp;\\u666f\\u0100hy\\u338b\\u338fcy;\\u4449;\\u4448rt\\u026d\\u3399\\0\\0\\u339ci\\xe4\\u1464ara\\xec\\u2e6f\\u803b\\xad\\u40ad\\u0100gm\\u33a8\\u33b4ma\\u0180;fv\\u33b1\\u33b2\\u33b2\\u43c3;\\u43c2\\u0400;deglnpr\\u12ab\\u33c5\\u33c9\\u33ce\\u33d6\\u33de\\u33e1\\u33e6ot;\\u6a6a\\u0100;q\\u12b1\\u12b0\\u0100;E\\u33d3\\u33d4\\u6a9e;\\u6aa0\\u0100;E\\u33db\\u33dc\\u6a9d;\\u6a9fe;\\u6246lus;\\u6a24arr;\\u6972ar\\xf2\\u113d\\u0200aeit\\u33f8\\u3408\\u340f\\u3417\\u0100ls\\u33fd\\u3404lsetm\\xe9\\u336ahp;\\u6a33parsl;\\u69e4\\u0100dl\\u1463\\u3414e;\\u6323\\u0100;e\\u341c\\u341d\\u6aaa\\u0100;s\\u3422\\u3423\\u6aac;\\uc000\\u2aac\\ufe00\\u0180flp\\u342e\\u3433\\u3442tcy;\\u444c\\u0100;b\\u3438\\u3439\\u402f\\u0100;a\\u343e\\u343f\\u69c4r;\\u633ff;\\uc000\\ud835\\udd64a\\u0100dr\\u344d\\u0402es\\u0100;u\\u3454\\u3455\\u6660it\\xbb\\u3455\\u0180csu\\u3460\\u3479\\u349f\\u0100au\\u3465\\u346fp\\u0100;s\\u1188\\u346b;\\uc000\\u2293\\ufe00p\\u0100;s\\u11b4\\u3475;\\uc000\\u2294\\ufe00u\\u0100bp\\u347f\\u348f\\u0180;es\\u1197\\u119c\\u3486et\\u0100;e\\u1197\\u348d\\xf1\\u119d\\u0180;es\\u11a8\\u11ad\\u3496et\\u0100;e\\u11a8\\u349d\\xf1\\u11ae\\u0180;af\\u117b\\u34a6\\u05b0r\\u0165\\u34ab\\u05b1\\xbb\\u117car\\xf2\\u1148\\u0200cemt\\u34b9\\u34be\\u34c2\\u34c5r;\\uc000\\ud835\\udcc8tm\\xee\\xf1i\\xec\\u3415ar\\xe6\\u11be\\u0100ar\\u34ce\\u34d5r\\u0100;f\\u34d4\\u17bf\\u6606\\u0100an\\u34da\\u34edight\\u0100ep\\u34e3\\u34eapsilo\\xee\\u1ee0h\\xe9\\u2eafs\\xbb\\u2852\\u0280bcmnp\\u34fb\\u355e\\u1209\\u358b\\u358e\\u0480;Edemnprs\\u350e\\u350f\\u3511\\u3515\\u351e\\u3523\\u352c\\u3531\\u3536\\u6282;\\u6ac5ot;\\u6abd\\u0100;d\\u11da\\u351aot;\\u6ac3ult;\\u6ac1\\u0100Ee\\u3528\\u352a;\\u6acb;\\u628alus;\\u6abfarr;\\u6979\\u0180eiu\\u353d\\u3552\\u3555t\\u0180;en\\u350e\\u3545\\u354bq\\u0100;q\\u11da\\u350feq\\u0100;q\\u352b\\u3528m;\\u6ac7\\u0100bp\\u355a\\u355c;\\u6ad5;\\u6ad3c\\u0300;acens\\u11ed\\u356c\\u3572\\u3579\\u357b\\u3326ppro\\xf8\\u32faurlye\\xf1\\u11fe\\xf1\\u11f3\\u0180aes\\u3582\\u3588\\u331bppro\\xf8\\u331aq\\xf1\\u3317g;\\u666a\\u0680123;Edehlmnps\\u35a9\\u35ac\\u35af\\u121c\\u35b2\\u35b4\\u35c0\\u35c9\\u35d5\\u35da\\u35df\\u35e8\\u35ed\\u803b\\xb9\\u40b9\\u803b\\xb2\\u40b2\\u803b\\xb3\\u40b3;\\u6ac6\\u0100os\\u35b9\\u35bct;\\u6abeub;\\u6ad8\\u0100;d\\u1222\\u35c5ot;\\u6ac4s\\u0100ou\\u35cf\\u35d2l;\\u67c9b;\\u6ad7arr;\\u697bult;\\u6ac2\\u0100Ee\\u35e4\\u35e6;\\u6acc;\\u628blus;\\u6ac0\\u0180eiu\\u35f4\\u3609\\u360ct\\u0180;en\\u121c\\u35fc\\u3602q\\u0100;q\\u1222\\u35b2eq\\u0100;q\\u35e7\\u35e4m;\\u6ac8\\u0100bp\\u3611\\u3613;\\u6ad4;\\u6ad6\\u0180Aan\\u361c\\u3620\\u362drr;\\u61d9r\\u0100hr\\u3626\\u3628\\xeb\\u222e\\u0100;o\\u0a2b\\u0a29war;\\u692alig\\u803b\\xdf\\u40df\\u0be1\\u3651\\u365d\\u3660\\u12ce\\u3673\\u3679\\0\\u367e\\u36c2\\0\\0\\0\\0\\0\\u36db\\u3703\\0\\u3709\\u376c\\0\\0\\0\\u3787\\u0272\\u3656\\0\\0\\u365bget;\\u6316;\\u43c4r\\xeb\\u0e5f\\u0180aey\\u3666\\u366b\\u3670ron;\\u4165dil;\\u4163;\\u4442lrec;\\u6315r;\\uc000\\ud835\\udd31\\u0200eiko\\u3686\\u369d\\u36b5\\u36bc\\u01f2\\u368b\\0\\u3691e\\u01004f\\u1284\\u1281a\\u0180;sv\\u3698\\u3699\\u369b\\u43b8ym;\\u43d1\\u0100cn\\u36a2\\u36b2k\\u0100as\\u36a8\\u36aeppro\\xf8\\u12c1im\\xbb\\u12acs\\xf0\\u129e\\u0100as\\u36ba\\u36ae\\xf0\\u12c1rn\\u803b\\xfe\\u40fe\\u01ec\\u031f\\u36c6\\u22e7es\\u8180\\xd7;bd\\u36cf\\u36d0\\u36d8\\u40d7\\u0100;a\\u190f\\u36d5r;\\u6a31;\\u6a30\\u0180eps\\u36e1\\u36e3\\u3700\\xe1\\u2a4d\\u0200;bcf\\u0486\\u36ec\\u36f0\\u36f4ot;\\u6336ir;\\u6af1\\u0100;o\\u36f9\\u36fc\\uc000\\ud835\\udd65rk;\\u6ada\\xe1\\u3362rime;\\u6034\\u0180aip\\u370f\\u3712\\u3764d\\xe5\\u1248\\u0380adempst\\u3721\\u374d\\u3740\\u3751\\u3757\\u375c\\u375fngle\\u0280;dlqr\\u3730\\u3731\\u3736\\u3740\\u3742\\u65b5own\\xbb\\u1dbbeft\\u0100;e\\u2800\\u373e\\xf1\\u092e;\\u625cight\\u0100;e\\u32aa\\u374b\\xf1\\u105aot;\\u65ecinus;\\u6a3alus;\\u6a39b;\\u69cdime;\\u6a3bezium;\\u63e2\\u0180cht\\u3772\\u377d\\u3781\\u0100ry\\u3777\\u377b;\\uc000\\ud835\\udcc9;\\u4446cy;\\u445brok;\\u4167\\u0100io\\u378b\\u378ex\\xf4\\u1777head\\u0100lr\\u3797\\u37a0eftarro\\xf7\\u084fightarrow\\xbb\\u0f5d\\u0900AHabcdfghlmoprstuw\\u37d0\\u37d3\\u37d7\\u37e4\\u37f0\\u37fc\\u380e\\u381c\\u3823\\u3834\\u3851\\u385d\\u386b\\u38a9\\u38cc\\u38d2\\u38ea\\u38f6r\\xf2\\u03edar;\\u6963\\u0100cr\\u37dc\\u37e2ute\\u803b\\xfa\\u40fa\\xf2\\u1150r\\u01e3\\u37ea\\0\\u37edy;\\u445eve;\\u416d\\u0100iy\\u37f5\\u37farc\\u803b\\xfb\\u40fb;\\u4443\\u0180abh\\u3803\\u3806\\u380br\\xf2\\u13adlac;\\u4171a\\xf2\\u13c3\\u0100ir\\u3813\\u3818sht;\\u697e;\\uc000\\ud835\\udd32rave\\u803b\\xf9\\u40f9\\u0161\\u3827\\u3831r\\u0100lr\\u382c\\u382e\\xbb\\u0957\\xbb\\u1083lk;\\u6580\\u0100ct\\u3839\\u384d\\u026f\\u383f\\0\\0\\u384arn\\u0100;e\\u3845\\u3846\\u631cr\\xbb\\u3846op;\\u630fri;\\u65f8\\u0100al\\u3856\\u385acr;\\u416b\\u80bb\\xa8\\u0349\\u0100gp\\u3862\\u3866on;\\u4173f;\\uc000\\ud835\\udd66\\u0300adhlsu\\u114b\\u3878\\u387d\\u1372\\u3891\\u38a0own\\xe1\\u13b3arpoon\\u0100lr\\u3888\\u388cef\\xf4\\u382digh\\xf4\\u382fi\\u0180;hl\\u3899\\u389a\\u389c\\u43c5\\xbb\\u13faon\\xbb\\u389aparrows;\\u61c8\\u0180cit\\u38b0\\u38c4\\u38c8\\u026f\\u38b6\\0\\0\\u38c1rn\\u0100;e\\u38bc\\u38bd\\u631dr\\xbb\\u38bdop;\\u630eng;\\u416fri;\\u65f9cr;\\uc000\\ud835\\udcca\\u0180dir\\u38d9\\u38dd\\u38e2ot;\\u62f0lde;\\u4169i\\u0100;f\\u3730\\u38e8\\xbb\\u1813\\u0100am\\u38ef\\u38f2r\\xf2\\u38a8l\\u803b\\xfc\\u40fcangle;\\u69a7\\u0780ABDacdeflnoprsz\\u391c\\u391f\\u3929\\u392d\\u39b5\\u39b8\\u39bd\\u39df\\u39e4\\u39e8\\u39f3\\u39f9\\u39fd\\u3a01\\u3a20r\\xf2\\u03f7ar\\u0100;v\\u3926\\u3927\\u6ae8;\\u6ae9as\\xe8\\u03e1\\u0100nr\\u3932\\u3937grt;\\u699c\\u0380eknprst\\u34e3\\u3946\\u394b\\u3952\\u395d\\u3964\\u3996app\\xe1\\u2415othin\\xe7\\u1e96\\u0180hir\\u34eb\\u2ec8\\u3959op\\xf4\\u2fb5\\u0100;h\\u13b7\\u3962\\xef\\u318d\\u0100iu\\u3969\\u396dgm\\xe1\\u33b3\\u0100bp\\u3972\\u3984setneq\\u0100;q\\u397d\\u3980\\uc000\\u228a\\ufe00;\\uc000\\u2acb\\ufe00setneq\\u0100;q\\u398f\\u3992\\uc000\\u228b\\ufe00;\\uc000\\u2acc\\ufe00\\u0100hr\\u399b\\u399fet\\xe1\\u369ciangle\\u0100lr\\u39aa\\u39afeft\\xbb\\u0925ight\\xbb\\u1051y;\\u4432ash\\xbb\\u1036\\u0180elr\\u39c4\\u39d2\\u39d7\\u0180;be\\u2dea\\u39cb\\u39cfar;\\u62bbq;\\u625alip;\\u62ee\\u0100bt\\u39dc\\u1468a\\xf2\\u1469r;\\uc000\\ud835\\udd33tr\\xe9\\u39aesu\\u0100bp\\u39ef\\u39f1\\xbb\\u0d1c\\xbb\\u0d59pf;\\uc000\\ud835\\udd67ro\\xf0\\u0efbtr\\xe9\\u39b4\\u0100cu\\u3a06\\u3a0br;\\uc000\\ud835\\udccb\\u0100bp\\u3a10\\u3a18n\\u0100Ee\\u3980\\u3a16\\xbb\\u397en\\u0100Ee\\u3992\\u3a1e\\xbb\\u3990igzag;\\u699a\\u0380cefoprs\\u3a36\\u3a3b\\u3a56\\u3a5b\\u3a54\\u3a61\\u3a6airc;\\u4175\\u0100di\\u3a40\\u3a51\\u0100bg\\u3a45\\u3a49ar;\\u6a5fe\\u0100;q\\u15fa\\u3a4f;\\u6259erp;\\u6118r;\\uc000\\ud835\\udd34pf;\\uc000\\ud835\\udd68\\u0100;e\\u1479\\u3a66at\\xe8\\u1479cr;\\uc000\\ud835\\udccc\\u0ae3\\u178e\\u3a87\\0\\u3a8b\\0\\u3a90\\u3a9b\\0\\0\\u3a9d\\u3aa8\\u3aab\\u3aaf\\0\\0\\u3ac3\\u3ace\\0\\u3ad8\\u17dc\\u17dftr\\xe9\\u17d1r;\\uc000\\ud835\\udd35\\u0100Aa\\u3a94\\u3a97r\\xf2\\u03c3r\\xf2\\u09f6;\\u43be\\u0100Aa\\u3aa1\\u3aa4r\\xf2\\u03b8r\\xf2\\u09eba\\xf0\\u2713is;\\u62fb\\u0180dpt\\u17a4\\u3ab5\\u3abe\\u0100fl\\u3aba\\u17a9;\\uc000\\ud835\\udd69im\\xe5\\u17b2\\u0100Aa\\u3ac7\\u3acar\\xf2\\u03cer\\xf2\\u0a01\\u0100cq\\u3ad2\\u17b8r;\\uc000\\ud835\\udccd\\u0100pt\\u17d6\\u3adcr\\xe9\\u17d4\\u0400acefiosu\\u3af0\\u3afd\\u3b08\\u3b0c\\u3b11\\u3b15\\u3b1b\\u3b21c\\u0100uy\\u3af6\\u3afbte\\u803b\\xfd\\u40fd;\\u444f\\u0100iy\\u3b02\\u3b06rc;\\u4177;\\u444bn\\u803b\\xa5\\u40a5r;\\uc000\\ud835\\udd36cy;\\u4457pf;\\uc000\\ud835\\udd6acr;\\uc000\\ud835\\udcce\\u0100cm\\u3b26\\u3b29y;\\u444el\\u803b\\xff\\u40ff\\u0500acdefhiosw\\u3b42\\u3b48\\u3b54\\u3b58\\u3b64\\u3b69\\u3b6d\\u3b74\\u3b7a\\u3b80cute;\\u417a\\u0100ay\\u3b4d\\u3b52ron;\\u417e;\\u4437ot;\\u417c\\u0100et\\u3b5d\\u3b61tr\\xe6\\u155fa;\\u43b6r;\\uc000\\ud835\\udd37cy;\\u4436grarr;\\u61ddpf;\\uc000\\ud835\\udd6bcr;\\uc000\\ud835\\udccf\\u0100jn\\u3b85\\u3b87;\\u600dj;\\u600c\".split(\"\").map(c => c.charCodeAt(0)));\n", "// Generated using scripts/write-decode-map.ts\nexport default new Uint16Array(\n// prettier-ignore\n\"\\u0200aglq\\t\\x15\\x18\\x1b\\u026d\\x0f\\0\\0\\x12p;\\u4026os;\\u4027t;\\u403et;\\u403cuot;\\u4022\".split(\"\").map(c => c.charCodeAt(0)));\n", "// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134\nvar _a;\nconst decodeMap = new Map([[0, 65533],\n// C1 Unicode control character reference replacements\n[128, 8364], [130, 8218], [131, 402], [132, 8222], [133, 8230], [134, 8224], [135, 8225], [136, 710], [137, 8240], [138, 352], [139, 8249], [140, 338], [142, 381], [145, 8216], [146, 8217], [147, 8220], [148, 8221], [149, 8226], [150, 8211], [151, 8212], [152, 732], [153, 8482], [154, 353], [155, 8250], [156, 339], [158, 382], [159, 376]]);\n/**\n * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.\n */\nexport const fromCodePoint =\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins\n(_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function (codePoint) {\n  let output = \"\";\n  if (codePoint > 0xffff) {\n    codePoint -= 0x10000;\n    output += String.fromCharCode(codePoint >>> 10 & 0x3ff | 0xd800);\n    codePoint = 0xdc00 | codePoint & 0x3ff;\n  }\n  output += String.fromCharCode(codePoint);\n  return output;\n};\n/**\n * Replace the given code point with a replacement character if it is a\n * surrogate or is outside the valid range. Otherwise return the code\n * point unchanged.\n */\nexport function replaceCodePoint(codePoint) {\n  var _a;\n  if (codePoint >= 0xd800 && codePoint <= 0xdfff || codePoint > 0x10ffff) {\n    return 0xfffd;\n  }\n  return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;\n}\n/**\n * Replace the code point if relevant, then convert it to a string.\n *\n * @deprecated Use `fromCodePoint(replaceCodePoint(codePoint))` instead.\n * @param codePoint The code point to decode.\n * @returns The decoded code point.\n */\nexport default function decodeCodePoint(codePoint) {\n  return fromCodePoint(replaceCodePoint(codePoint));\n}\n", "import htmlDecodeTree from \"./generated/decode-data-html.js\";\nimport xmlDecodeTree from \"./generated/decode-data-xml.js\";\nimport decodeCodePoint, { replaceCodePoint, fromCodePoint } from \"./decode_codepoint.js\";\n// Re-export for use by eg. htmlparser2\nexport { htmlDecodeTree, xmlDecodeTree, decodeCodePoint };\nexport { replaceCodePoint, fromCodePoint } from \"./decode_codepoint.js\";\nvar CharCodes;\n(function (CharCodes) {\n  CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n  CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n  CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n  CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n  CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n  CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n  CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n  CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n  CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n  CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n  CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n  CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n})(CharCodes || (CharCodes = {}));\n/** Bit that needs to be set to convert an upper case ASCII character to lower case */\nconst TO_LOWER_BIT = 0b100000;\nexport var BinTrieFlags;\n(function (BinTrieFlags) {\n  BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n  BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n  BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags || (BinTrieFlags = {}));\nfunction isNumber(code) {\n  return code >= CharCodes.ZERO && code <= CharCodes.NINE;\n}\nfunction isHexadecimalCharacter(code) {\n  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;\n}\nfunction isAsciiAlphaNumeric(code) {\n  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);\n}\n/**\n * Checks if the given character is a valid end character for an entity in an attribute.\n *\n * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n */\nfunction isEntityInAttributeInvalidEnd(code) {\n  return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\n}\nvar EntityDecoderState;\n(function (EntityDecoderState) {\n  EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n  EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n  EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n  EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n  EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n})(EntityDecoderState || (EntityDecoderState = {}));\nexport var DecodingMode;\n(function (DecodingMode) {\n  /** Entities in text nodes that can end with any character. */\n  DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n  /** Only allow entities terminated with a semicolon. */\n  DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n  /** Entities in attributes have limitations on ending characters. */\n  DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n})(DecodingMode || (DecodingMode = {}));\n/**\n * Token decoder with support of writing partial entities.\n */\nexport class EntityDecoder {\n  constructor( /** The tree used to decode entities. */\n  decodeTree,\n  /**\n   * The function that is called when a codepoint is decoded.\n   *\n   * For multi-byte named entities, this will be called multiple times,\n   * with the second codepoint, and the same `consumed` value.\n   *\n   * @param codepoint The decoded codepoint.\n   * @param consumed The number of bytes consumed by the decoder.\n   */\n  emitCodePoint, /** An object that is used to produce errors. */\n  errors) {\n    this.decodeTree = decodeTree;\n    this.emitCodePoint = emitCodePoint;\n    this.errors = errors;\n    /** The current state of the decoder. */\n    this.state = EntityDecoderState.EntityStart;\n    /** Characters that were consumed while parsing an entity. */\n    this.consumed = 1;\n    /**\n     * The result of the entity.\n     *\n     * Either the result index of a numeric entity, or the codepoint of a\n     * numeric entity.\n     */\n    this.result = 0;\n    /** The current index in the decode tree. */\n    this.treeIndex = 0;\n    /** The number of characters that were consumed in excess. */\n    this.excess = 1;\n    /** The mode in which the decoder is operating. */\n    this.decodeMode = DecodingMode.Strict;\n  }\n  /** Resets the instance to make it reusable. */\n  startEntity(decodeMode) {\n    this.decodeMode = decodeMode;\n    this.state = EntityDecoderState.EntityStart;\n    this.result = 0;\n    this.treeIndex = 0;\n    this.excess = 1;\n    this.consumed = 1;\n  }\n  /**\n   * Write an entity to the decoder. This can be called multiple times with partial entities.\n   * If the entity is incomplete, the decoder will return -1.\n   *\n   * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\n   * entity is incomplete, and resume when the next string is written.\n   *\n   * @param string The string containing the entity (or a continuation of the entity).\n   * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n   */\n  write(str, offset) {\n    switch (this.state) {\n      case EntityDecoderState.EntityStart:\n        {\n          if (str.charCodeAt(offset) === CharCodes.NUM) {\n            this.state = EntityDecoderState.NumericStart;\n            this.consumed += 1;\n            return this.stateNumericStart(str, offset + 1);\n          }\n          this.state = EntityDecoderState.NamedEntity;\n          return this.stateNamedEntity(str, offset);\n        }\n      case EntityDecoderState.NumericStart:\n        {\n          return this.stateNumericStart(str, offset);\n        }\n      case EntityDecoderState.NumericDecimal:\n        {\n          return this.stateNumericDecimal(str, offset);\n        }\n      case EntityDecoderState.NumericHex:\n        {\n          return this.stateNumericHex(str, offset);\n        }\n      case EntityDecoderState.NamedEntity:\n        {\n          return this.stateNamedEntity(str, offset);\n        }\n    }\n  }\n  /**\n   * Switches between the numeric decimal and hexadecimal states.\n   *\n   * Equivalent to the `Numeric character reference state` in the HTML spec.\n   *\n   * @param str The string containing the entity (or a continuation of the entity).\n   * @param offset The current offset.\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n   */\n  stateNumericStart(str, offset) {\n    if (offset >= str.length) {\n      return -1;\n    }\n    if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\n      this.state = EntityDecoderState.NumericHex;\n      this.consumed += 1;\n      return this.stateNumericHex(str, offset + 1);\n    }\n    this.state = EntityDecoderState.NumericDecimal;\n    return this.stateNumericDecimal(str, offset);\n  }\n  addToNumericResult(str, start, end, base) {\n    if (start !== end) {\n      const digitCount = end - start;\n      this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);\n      this.consumed += digitCount;\n    }\n  }\n  /**\n   * Parses a hexadecimal numeric entity.\n   *\n   * Equivalent to the `Hexademical character reference state` in the HTML spec.\n   *\n   * @param str The string containing the entity (or a continuation of the entity).\n   * @param offset The current offset.\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n   */\n  stateNumericHex(str, offset) {\n    const startIdx = offset;\n    while (offset < str.length) {\n      const char = str.charCodeAt(offset);\n      if (isNumber(char) || isHexadecimalCharacter(char)) {\n        offset += 1;\n      } else {\n        this.addToNumericResult(str, startIdx, offset, 16);\n        return this.emitNumericEntity(char, 3);\n      }\n    }\n    this.addToNumericResult(str, startIdx, offset, 16);\n    return -1;\n  }\n  /**\n   * Parses a decimal numeric entity.\n   *\n   * Equivalent to the `Decimal character reference state` in the HTML spec.\n   *\n   * @param str The string containing the entity (or a continuation of the entity).\n   * @param offset The current offset.\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n   */\n  stateNumericDecimal(str, offset) {\n    const startIdx = offset;\n    while (offset < str.length) {\n      const char = str.charCodeAt(offset);\n      if (isNumber(char)) {\n        offset += 1;\n      } else {\n        this.addToNumericResult(str, startIdx, offset, 10);\n        return this.emitNumericEntity(char, 2);\n      }\n    }\n    this.addToNumericResult(str, startIdx, offset, 10);\n    return -1;\n  }\n  /**\n   * Validate and emit a numeric entity.\n   *\n   * Implements the logic from the `Hexademical character reference start\n   * state` and `Numeric character reference end state` in the HTML spec.\n   *\n   * @param lastCp The last code point of the entity. Used to see if the\n   *               entity was terminated with a semicolon.\n   * @param expectedLength The minimum number of characters that should be\n   *                       consumed. Used to validate that at least one digit\n   *                       was consumed.\n   * @returns The number of characters that were consumed.\n   */\n  emitNumericEntity(lastCp, expectedLength) {\n    var _a;\n    // Ensure we consumed at least one digit.\n    if (this.consumed <= expectedLength) {\n      (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n      return 0;\n    }\n    // Figure out if this is a legit end of the entity\n    if (lastCp === CharCodes.SEMI) {\n      this.consumed += 1;\n    } else if (this.decodeMode === DecodingMode.Strict) {\n      return 0;\n    }\n    this.emitCodePoint(replaceCodePoint(this.result), this.consumed);\n    if (this.errors) {\n      if (lastCp !== CharCodes.SEMI) {\n        this.errors.missingSemicolonAfterCharacterReference();\n      }\n      this.errors.validateNumericCharacterReference(this.result);\n    }\n    return this.consumed;\n  }\n  /**\n   * Parses a named entity.\n   *\n   * Equivalent to the `Named character reference state` in the HTML spec.\n   *\n   * @param str The string containing the entity (or a continuation of the entity).\n   * @param offset The current offset.\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n   */\n  stateNamedEntity(str, offset) {\n    const {\n      decodeTree\n    } = this;\n    let current = decodeTree[this.treeIndex];\n    // The mask is the number of bytes of the value, including the current byte.\n    let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n    for (; offset < str.length; offset++, this.excess++) {\n      const char = str.charCodeAt(offset);\n      this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n      if (this.treeIndex < 0) {\n        return this.result === 0 ||\n        // If we are parsing an attribute\n        this.decodeMode === DecodingMode.Attribute && (\n        // We shouldn't have consumed any characters after the entity,\n        valueLength === 0 ||\n        // And there should be no invalid characters.\n        isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();\n      }\n      current = decodeTree[this.treeIndex];\n      valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n      // If the branch is a value, store it and continue\n      if (valueLength !== 0) {\n        // If the entity is terminated by a semicolon, we are done.\n        if (char === CharCodes.SEMI) {\n          return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n        }\n        // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n        if (this.decodeMode !== DecodingMode.Strict) {\n          this.result = this.treeIndex;\n          this.consumed += this.excess;\n          this.excess = 0;\n        }\n      }\n    }\n    return -1;\n  }\n  /**\n   * Emit a named entity that was not terminated with a semicolon.\n   *\n   * @returns The number of characters consumed.\n   */\n  emitNotTerminatedNamedEntity() {\n    var _a;\n    const {\n      result,\n      decodeTree\n    } = this;\n    const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\n    this.emitNamedEntityData(result, valueLength, this.consumed);\n    (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();\n    return this.consumed;\n  }\n  /**\n   * Emit a named entity.\n   *\n   * @param result The index of the entity in the decode tree.\n   * @param valueLength The number of bytes in the entity.\n   * @param consumed The number of characters consumed.\n   *\n   * @returns The number of characters consumed.\n   */\n  emitNamedEntityData(result, valueLength, consumed) {\n    const {\n      decodeTree\n    } = this;\n    this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);\n    if (valueLength === 3) {\n      // For multi-byte values, we need to emit the second byte.\n      this.emitCodePoint(decodeTree[result + 2], consumed);\n    }\n    return consumed;\n  }\n  /**\n   * Signal to the parser that the end of the input was reached.\n   *\n   * Remaining data will be emitted and relevant errors will be produced.\n   *\n   * @returns The number of characters consumed.\n   */\n  end() {\n    var _a;\n    switch (this.state) {\n      case EntityDecoderState.NamedEntity:\n        {\n          // Emit a named entity if we have one.\n          return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;\n        }\n      // Otherwise, emit a numeric entity if we have one.\n      case EntityDecoderState.NumericDecimal:\n        {\n          return this.emitNumericEntity(0, 2);\n        }\n      case EntityDecoderState.NumericHex:\n        {\n          return this.emitNumericEntity(0, 3);\n        }\n      case EntityDecoderState.NumericStart:\n        {\n          (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n          return 0;\n        }\n      case EntityDecoderState.EntityStart:\n        {\n          // Return 0 if we have no entity.\n          return 0;\n        }\n    }\n  }\n}\n/**\n * Creates a function that decodes entities in a string.\n *\n * @param decodeTree The decode tree.\n * @returns A function that decodes entities in a string.\n */\nfunction getDecoder(decodeTree) {\n  let ret = \"\";\n  const decoder = new EntityDecoder(decodeTree, str => ret += fromCodePoint(str));\n  return function decodeWithTrie(str, decodeMode) {\n    let lastIndex = 0;\n    let offset = 0;\n    while ((offset = str.indexOf(\"&\", offset)) >= 0) {\n      ret += str.slice(lastIndex, offset);\n      decoder.startEntity(decodeMode);\n      const len = decoder.write(str,\n      // Skip the \"&\"\n      offset + 1);\n      if (len < 0) {\n        lastIndex = offset + decoder.end();\n        break;\n      }\n      lastIndex = offset + len;\n      // If `len` is 0, skip the current `&` and continue.\n      offset = len === 0 ? lastIndex + 1 : lastIndex;\n    }\n    const result = ret + str.slice(lastIndex);\n    // Make sure we don't keep a reference to the final string.\n    ret = \"\";\n    return result;\n  };\n}\n/**\n * Determines the branch of the current node that is taken given the current\n * character. This function is used to traverse the trie.\n *\n * @param decodeTree The trie.\n * @param current The current node.\n * @param nodeIdx The index right after the current node and its value.\n * @param char The current character.\n * @returns The index of the next node, or -1 if no branch is taken.\n */\nexport function determineBranch(decodeTree, current, nodeIdx, char) {\n  const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n  const jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n  // Case 1: Single branch encoded in jump offset\n  if (branchCount === 0) {\n    return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n  }\n  // Case 2: Multiple branches encoded in jump table\n  if (jumpOffset) {\n    const value = char - jumpOffset;\n    return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;\n  }\n  // Case 3: Multiple branches encoded in dictionary\n  // Binary search for the character.\n  let lo = nodeIdx;\n  let hi = lo + branchCount - 1;\n  while (lo <= hi) {\n    const mid = lo + hi >>> 1;\n    const midVal = decodeTree[mid];\n    if (midVal < char) {\n      lo = mid + 1;\n    } else if (midVal > char) {\n      hi = mid - 1;\n    } else {\n      return decodeTree[mid + branchCount];\n    }\n  }\n  return -1;\n}\nconst htmlDecoder = getDecoder(htmlDecodeTree);\nconst xmlDecoder = getDecoder(xmlDecodeTree);\n/**\n * Decodes an HTML string.\n *\n * @param str The string to decode.\n * @param mode The decoding mode.\n * @returns The decoded string.\n */\nexport function decodeHTML(str, mode = DecodingMode.Legacy) {\n  return htmlDecoder(str, mode);\n}\n/**\n * Decodes an HTML string in an attribute.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeHTMLAttribute(str) {\n  return htmlDecoder(str, DecodingMode.Attribute);\n}\n/**\n * Decodes an HTML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeHTMLStrict(str) {\n  return htmlDecoder(str, DecodingMode.Strict);\n}\n/**\n * Decodes an XML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeXML(str) {\n  return xmlDecoder(str, DecodingMode.Strict);\n}\n", "import { htmlDecodeTree, xmlDecodeTree, BinTrieFlags, determineBranch, replaceCodePoint } from \"entities/lib/decode.js\";\nvar CharCodes;\n(function (CharCodes) {\n  CharCodes[CharCodes[\"Tab\"] = 9] = \"Tab\";\n  CharCodes[CharCodes[\"NewLine\"] = 10] = \"NewLine\";\n  CharCodes[CharCodes[\"FormFeed\"] = 12] = \"FormFeed\";\n  CharCodes[CharCodes[\"CarriageReturn\"] = 13] = \"CarriageReturn\";\n  CharCodes[CharCodes[\"Space\"] = 32] = \"Space\";\n  CharCodes[CharCodes[\"ExclamationMark\"] = 33] = \"ExclamationMark\";\n  CharCodes[CharCodes[\"Number\"] = 35] = \"Number\";\n  CharCodes[CharCodes[\"Amp\"] = 38] = \"Amp\";\n  CharCodes[CharCodes[\"SingleQuote\"] = 39] = \"SingleQuote\";\n  CharCodes[CharCodes[\"DoubleQuote\"] = 34] = \"DoubleQuote\";\n  CharCodes[CharCodes[\"Dash\"] = 45] = \"Dash\";\n  CharCodes[CharCodes[\"Slash\"] = 47] = \"Slash\";\n  CharCodes[CharCodes[\"Zero\"] = 48] = \"Zero\";\n  CharCodes[CharCodes[\"Nine\"] = 57] = \"Nine\";\n  CharCodes[CharCodes[\"Semi\"] = 59] = \"Semi\";\n  CharCodes[CharCodes[\"Lt\"] = 60] = \"Lt\";\n  CharCodes[CharCodes[\"Eq\"] = 61] = \"Eq\";\n  CharCodes[CharCodes[\"Gt\"] = 62] = \"Gt\";\n  CharCodes[CharCodes[\"Questionmark\"] = 63] = \"Questionmark\";\n  CharCodes[CharCodes[\"UpperA\"] = 65] = \"UpperA\";\n  CharCodes[CharCodes[\"LowerA\"] = 97] = \"LowerA\";\n  CharCodes[CharCodes[\"UpperF\"] = 70] = \"UpperF\";\n  CharCodes[CharCodes[\"LowerF\"] = 102] = \"LowerF\";\n  CharCodes[CharCodes[\"UpperZ\"] = 90] = \"UpperZ\";\n  CharCodes[CharCodes[\"LowerZ\"] = 122] = \"LowerZ\";\n  CharCodes[CharCodes[\"LowerX\"] = 120] = \"LowerX\";\n  CharCodes[CharCodes[\"OpeningSquareBracket\"] = 91] = \"OpeningSquareBracket\";\n})(CharCodes || (CharCodes = {}));\n/** All the states the tokenizer can be in. */\nvar State;\n(function (State) {\n  State[State[\"Text\"] = 1] = \"Text\";\n  State[State[\"BeforeTagName\"] = 2] = \"BeforeTagName\";\n  State[State[\"InTagName\"] = 3] = \"InTagName\";\n  State[State[\"InSelfClosingTag\"] = 4] = \"InSelfClosingTag\";\n  State[State[\"BeforeClosingTagName\"] = 5] = \"BeforeClosingTagName\";\n  State[State[\"InClosingTagName\"] = 6] = \"InClosingTagName\";\n  State[State[\"AfterClosingTagName\"] = 7] = \"AfterClosingTagName\";\n  // Attributes\n  State[State[\"BeforeAttributeName\"] = 8] = \"BeforeAttributeName\";\n  State[State[\"InAttributeName\"] = 9] = \"InAttributeName\";\n  State[State[\"AfterAttributeName\"] = 10] = \"AfterAttributeName\";\n  State[State[\"BeforeAttributeValue\"] = 11] = \"BeforeAttributeValue\";\n  State[State[\"InAttributeValueDq\"] = 12] = \"InAttributeValueDq\";\n  State[State[\"InAttributeValueSq\"] = 13] = \"InAttributeValueSq\";\n  State[State[\"InAttributeValueNq\"] = 14] = \"InAttributeValueNq\";\n  // Declarations\n  State[State[\"BeforeDeclaration\"] = 15] = \"BeforeDeclaration\";\n  State[State[\"InDeclaration\"] = 16] = \"InDeclaration\";\n  // Processing instructions\n  State[State[\"InProcessingInstruction\"] = 17] = \"InProcessingInstruction\";\n  // Comments & CDATA\n  State[State[\"BeforeComment\"] = 18] = \"BeforeComment\";\n  State[State[\"CDATASequence\"] = 19] = \"CDATASequence\";\n  State[State[\"InSpecialComment\"] = 20] = \"InSpecialComment\";\n  State[State[\"InCommentLike\"] = 21] = \"InCommentLike\";\n  // Special tags\n  State[State[\"BeforeSpecialS\"] = 22] = \"BeforeSpecialS\";\n  State[State[\"SpecialStartSequence\"] = 23] = \"SpecialStartSequence\";\n  State[State[\"InSpecialTag\"] = 24] = \"InSpecialTag\";\n  State[State[\"BeforeEntity\"] = 25] = \"BeforeEntity\";\n  State[State[\"BeforeNumericEntity\"] = 26] = \"BeforeNumericEntity\";\n  State[State[\"InNamedEntity\"] = 27] = \"InNamedEntity\";\n  State[State[\"InNumericEntity\"] = 28] = \"InNumericEntity\";\n  State[State[\"InHexEntity\"] = 29] = \"InHexEntity\";\n})(State || (State = {}));\nfunction isWhitespace(c) {\n  return c === CharCodes.Space || c === CharCodes.NewLine || c === CharCodes.Tab || c === CharCodes.FormFeed || c === CharCodes.CarriageReturn;\n}\nfunction isEndOfTagSection(c) {\n  return c === CharCodes.Slash || c === CharCodes.Gt || isWhitespace(c);\n}\nfunction isNumber(c) {\n  return c >= CharCodes.Zero && c <= CharCodes.Nine;\n}\nfunction isASCIIAlpha(c) {\n  return c >= CharCodes.LowerA && c <= CharCodes.LowerZ || c >= CharCodes.UpperA && c <= CharCodes.UpperZ;\n}\nfunction isHexDigit(c) {\n  return c >= CharCodes.UpperA && c <= CharCodes.UpperF || c >= CharCodes.LowerA && c <= CharCodes.LowerF;\n}\nexport var QuoteType;\n(function (QuoteType) {\n  QuoteType[QuoteType[\"NoValue\"] = 0] = \"NoValue\";\n  QuoteType[QuoteType[\"Unquoted\"] = 1] = \"Unquoted\";\n  QuoteType[QuoteType[\"Single\"] = 2] = \"Single\";\n  QuoteType[QuoteType[\"Double\"] = 3] = \"Double\";\n})(QuoteType || (QuoteType = {}));\n/**\n * Sequences used to match longer strings.\n *\n * We don't have `Script`, `Style`, or `Title` here. Instead, we re-use the *End\n * sequences with an increased offset.\n */\nconst Sequences = {\n  Cdata: new Uint8Array([0x43, 0x44, 0x41, 0x54, 0x41, 0x5b]),\n  CdataEnd: new Uint8Array([0x5d, 0x5d, 0x3e]),\n  CommentEnd: new Uint8Array([0x2d, 0x2d, 0x3e]),\n  ScriptEnd: new Uint8Array([0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74]),\n  StyleEnd: new Uint8Array([0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65]),\n  TitleEnd: new Uint8Array([0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65]) // `</title`\n};\nexport default class Tokenizer {\n  constructor({\n    xmlMode = false,\n    decodeEntities = true\n  }, cbs) {\n    this.cbs = cbs;\n    /** The current state the tokenizer is in. */\n    this.state = State.Text;\n    /** The read buffer. */\n    this.buffer = \"\";\n    /** The beginning of the section that is currently being read. */\n    this.sectionStart = 0;\n    /** The index within the buffer that we are currently looking at. */\n    this.index = 0;\n    /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */\n    this.baseState = State.Text;\n    /** For special parsing behavior inside of script and style tags. */\n    this.isSpecial = false;\n    /** Indicates whether the tokenizer has been paused. */\n    this.running = true;\n    /** The offset of the current buffer. */\n    this.offset = 0;\n    this.currentSequence = undefined;\n    this.sequenceIndex = 0;\n    this.trieIndex = 0;\n    this.trieCurrent = 0;\n    /** For named entities, the index of the value. For numeric entities, the code point. */\n    this.entityResult = 0;\n    this.entityExcess = 0;\n    this.xmlMode = xmlMode;\n    this.decodeEntities = decodeEntities;\n    this.entityTrie = xmlMode ? xmlDecodeTree : htmlDecodeTree;\n  }\n  reset() {\n    this.state = State.Text;\n    this.buffer = \"\";\n    this.sectionStart = 0;\n    this.index = 0;\n    this.baseState = State.Text;\n    this.currentSequence = undefined;\n    this.running = true;\n    this.offset = 0;\n  }\n  write(chunk) {\n    this.offset += this.buffer.length;\n    this.buffer = chunk;\n    this.parse();\n  }\n  end() {\n    if (this.running) this.finish();\n  }\n  pause() {\n    this.running = false;\n  }\n  resume() {\n    this.running = true;\n    if (this.index < this.buffer.length + this.offset) {\n      this.parse();\n    }\n  }\n  /**\n   * The current index within all of the written data.\n   */\n  getIndex() {\n    return this.index;\n  }\n  /**\n   * The start of the current section.\n   */\n  getSectionStart() {\n    return this.sectionStart;\n  }\n  stateText(c) {\n    if (c === CharCodes.Lt || !this.decodeEntities && this.fastForwardTo(CharCodes.Lt)) {\n      if (this.index > this.sectionStart) {\n        this.cbs.ontext(this.sectionStart, this.index);\n      }\n      this.state = State.BeforeTagName;\n      this.sectionStart = this.index;\n    } else if (this.decodeEntities && c === CharCodes.Amp) {\n      this.state = State.BeforeEntity;\n    }\n  }\n  stateSpecialStartSequence(c) {\n    const isEnd = this.sequenceIndex === this.currentSequence.length;\n    const isMatch = isEnd ?\n    // If we are at the end of the sequence, make sure the tag name has ended\n    isEndOfTagSection(c) :\n    // Otherwise, do a case-insensitive comparison\n    (c | 0x20) === this.currentSequence[this.sequenceIndex];\n    if (!isMatch) {\n      this.isSpecial = false;\n    } else if (!isEnd) {\n      this.sequenceIndex++;\n      return;\n    }\n    this.sequenceIndex = 0;\n    this.state = State.InTagName;\n    this.stateInTagName(c);\n  }\n  /** Look for an end tag. For <title> tags, also decode entities. */\n  stateInSpecialTag(c) {\n    if (this.sequenceIndex === this.currentSequence.length) {\n      if (c === CharCodes.Gt || isWhitespace(c)) {\n        const endOfText = this.index - this.currentSequence.length;\n        if (this.sectionStart < endOfText) {\n          // Spoof the index so that reported locations match up.\n          const actualIndex = this.index;\n          this.index = endOfText;\n          this.cbs.ontext(this.sectionStart, endOfText);\n          this.index = actualIndex;\n        }\n        this.isSpecial = false;\n        this.sectionStart = endOfText + 2; // Skip over the `</`\n        this.stateInClosingTagName(c);\n        return; // We are done; skip the rest of the function.\n      }\n      this.sequenceIndex = 0;\n    }\n    if ((c | 0x20) === this.currentSequence[this.sequenceIndex]) {\n      this.sequenceIndex += 1;\n    } else if (this.sequenceIndex === 0) {\n      if (this.currentSequence === Sequences.TitleEnd) {\n        // We have to parse entities in <title> tags.\n        if (this.decodeEntities && c === CharCodes.Amp) {\n          this.state = State.BeforeEntity;\n        }\n      } else if (this.fastForwardTo(CharCodes.Lt)) {\n        // Outside of <title> tags, we can fast-forward.\n        this.sequenceIndex = 1;\n      }\n    } else {\n      // If we see a `<`, set the sequence index to 1; useful for eg. `<</script>`.\n      this.sequenceIndex = Number(c === CharCodes.Lt);\n    }\n  }\n  stateCDATASequence(c) {\n    if (c === Sequences.Cdata[this.sequenceIndex]) {\n      if (++this.sequenceIndex === Sequences.Cdata.length) {\n        this.state = State.InCommentLike;\n        this.currentSequence = Sequences.CdataEnd;\n        this.sequenceIndex = 0;\n        this.sectionStart = this.index + 1;\n      }\n    } else {\n      this.sequenceIndex = 0;\n      this.state = State.InDeclaration;\n      this.stateInDeclaration(c); // Reconsume the character\n    }\n  }\n  /**\n   * When we wait for one specific character, we can speed things up\n   * by skipping through the buffer until we find it.\n   *\n   * @returns Whether the character was found.\n   */\n  fastForwardTo(c) {\n    while (++this.index < this.buffer.length + this.offset) {\n      if (this.buffer.charCodeAt(this.index - this.offset) === c) {\n        return true;\n      }\n    }\n    /*\n     * We increment the index at the end of the `parse` loop,\n     * so set it to `buffer.length - 1` here.\n     *\n     * TODO: Refactor `parse` to increment index before calling states.\n     */\n    this.index = this.buffer.length + this.offset - 1;\n    return false;\n  }\n  /**\n   * Comments and CDATA end with `-->` and `]]>`.\n   *\n   * Their common qualities are:\n   * - Their end sequences have a distinct character they start with.\n   * - That character is then repeated, so we have to check multiple repeats.\n   * - All characters but the start character of the sequence can be skipped.\n   */\n  stateInCommentLike(c) {\n    if (c === this.currentSequence[this.sequenceIndex]) {\n      if (++this.sequenceIndex === this.currentSequence.length) {\n        if (this.currentSequence === Sequences.CdataEnd) {\n          this.cbs.oncdata(this.sectionStart, this.index, 2);\n        } else {\n          this.cbs.oncomment(this.sectionStart, this.index, 2);\n        }\n        this.sequenceIndex = 0;\n        this.sectionStart = this.index + 1;\n        this.state = State.Text;\n      }\n    } else if (this.sequenceIndex === 0) {\n      // Fast-forward to the first character of the sequence\n      if (this.fastForwardTo(this.currentSequence[0])) {\n        this.sequenceIndex = 1;\n      }\n    } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {\n      // Allow long sequences, eg. --->, ]]]>\n      this.sequenceIndex = 0;\n    }\n  }\n  /**\n   * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.\n   *\n   * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).\n   * We allow anything that wouldn't end the tag.\n   */\n  isTagStartChar(c) {\n    return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);\n  }\n  startSpecial(sequence, offset) {\n    this.isSpecial = true;\n    this.currentSequence = sequence;\n    this.sequenceIndex = offset;\n    this.state = State.SpecialStartSequence;\n  }\n  stateBeforeTagName(c) {\n    if (c === CharCodes.ExclamationMark) {\n      this.state = State.BeforeDeclaration;\n      this.sectionStart = this.index + 1;\n    } else if (c === CharCodes.Questionmark) {\n      this.state = State.InProcessingInstruction;\n      this.sectionStart = this.index + 1;\n    } else if (this.isTagStartChar(c)) {\n      const lower = c | 0x20;\n      this.sectionStart = this.index;\n      if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {\n        this.startSpecial(Sequences.TitleEnd, 3);\n      } else {\n        this.state = !this.xmlMode && lower === Sequences.ScriptEnd[2] ? State.BeforeSpecialS : State.InTagName;\n      }\n    } else if (c === CharCodes.Slash) {\n      this.state = State.BeforeClosingTagName;\n    } else {\n      this.state = State.Text;\n      this.stateText(c);\n    }\n  }\n  stateInTagName(c) {\n    if (isEndOfTagSection(c)) {\n      this.cbs.onopentagname(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.state = State.BeforeAttributeName;\n      this.stateBeforeAttributeName(c);\n    }\n  }\n  stateBeforeClosingTagName(c) {\n    if (isWhitespace(c)) {\n      // Ignore\n    } else if (c === CharCodes.Gt) {\n      this.state = State.Text;\n    } else {\n      this.state = this.isTagStartChar(c) ? State.InClosingTagName : State.InSpecialComment;\n      this.sectionStart = this.index;\n    }\n  }\n  stateInClosingTagName(c) {\n    if (c === CharCodes.Gt || isWhitespace(c)) {\n      this.cbs.onclosetag(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.state = State.AfterClosingTagName;\n      this.stateAfterClosingTagName(c);\n    }\n  }\n  stateAfterClosingTagName(c) {\n    // Skip everything until \">\"\n    if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n      this.state = State.Text;\n      this.baseState = State.Text;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateBeforeAttributeName(c) {\n    if (c === CharCodes.Gt) {\n      this.cbs.onopentagend(this.index);\n      if (this.isSpecial) {\n        this.state = State.InSpecialTag;\n        this.sequenceIndex = 0;\n      } else {\n        this.state = State.Text;\n      }\n      this.baseState = this.state;\n      this.sectionStart = this.index + 1;\n    } else if (c === CharCodes.Slash) {\n      this.state = State.InSelfClosingTag;\n    } else if (!isWhitespace(c)) {\n      this.state = State.InAttributeName;\n      this.sectionStart = this.index;\n    }\n  }\n  stateInSelfClosingTag(c) {\n    if (c === CharCodes.Gt) {\n      this.cbs.onselfclosingtag(this.index);\n      this.state = State.Text;\n      this.baseState = State.Text;\n      this.sectionStart = this.index + 1;\n      this.isSpecial = false; // Reset special state, in case of self-closing special tags\n    } else if (!isWhitespace(c)) {\n      this.state = State.BeforeAttributeName;\n      this.stateBeforeAttributeName(c);\n    }\n  }\n  stateInAttributeName(c) {\n    if (c === CharCodes.Eq || isEndOfTagSection(c)) {\n      this.cbs.onattribname(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.state = State.AfterAttributeName;\n      this.stateAfterAttributeName(c);\n    }\n  }\n  stateAfterAttributeName(c) {\n    if (c === CharCodes.Eq) {\n      this.state = State.BeforeAttributeValue;\n    } else if (c === CharCodes.Slash || c === CharCodes.Gt) {\n      this.cbs.onattribend(QuoteType.NoValue, this.index);\n      this.state = State.BeforeAttributeName;\n      this.stateBeforeAttributeName(c);\n    } else if (!isWhitespace(c)) {\n      this.cbs.onattribend(QuoteType.NoValue, this.index);\n      this.state = State.InAttributeName;\n      this.sectionStart = this.index;\n    }\n  }\n  stateBeforeAttributeValue(c) {\n    if (c === CharCodes.DoubleQuote) {\n      this.state = State.InAttributeValueDq;\n      this.sectionStart = this.index + 1;\n    } else if (c === CharCodes.SingleQuote) {\n      this.state = State.InAttributeValueSq;\n      this.sectionStart = this.index + 1;\n    } else if (!isWhitespace(c)) {\n      this.sectionStart = this.index;\n      this.state = State.InAttributeValueNq;\n      this.stateInAttributeValueNoQuotes(c); // Reconsume token\n    }\n  }\n  handleInAttributeValue(c, quote) {\n    if (c === quote || !this.decodeEntities && this.fastForwardTo(quote)) {\n      this.cbs.onattribdata(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.cbs.onattribend(quote === CharCodes.DoubleQuote ? QuoteType.Double : QuoteType.Single, this.index);\n      this.state = State.BeforeAttributeName;\n    } else if (this.decodeEntities && c === CharCodes.Amp) {\n      this.baseState = this.state;\n      this.state = State.BeforeEntity;\n    }\n  }\n  stateInAttributeValueDoubleQuotes(c) {\n    this.handleInAttributeValue(c, CharCodes.DoubleQuote);\n  }\n  stateInAttributeValueSingleQuotes(c) {\n    this.handleInAttributeValue(c, CharCodes.SingleQuote);\n  }\n  stateInAttributeValueNoQuotes(c) {\n    if (isWhitespace(c) || c === CharCodes.Gt) {\n      this.cbs.onattribdata(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.cbs.onattribend(QuoteType.Unquoted, this.index);\n      this.state = State.BeforeAttributeName;\n      this.stateBeforeAttributeName(c);\n    } else if (this.decodeEntities && c === CharCodes.Amp) {\n      this.baseState = this.state;\n      this.state = State.BeforeEntity;\n    }\n  }\n  stateBeforeDeclaration(c) {\n    if (c === CharCodes.OpeningSquareBracket) {\n      this.state = State.CDATASequence;\n      this.sequenceIndex = 0;\n    } else {\n      this.state = c === CharCodes.Dash ? State.BeforeComment : State.InDeclaration;\n    }\n  }\n  stateInDeclaration(c) {\n    if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n      this.cbs.ondeclaration(this.sectionStart, this.index);\n      this.state = State.Text;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateInProcessingInstruction(c) {\n    if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n      this.cbs.onprocessinginstruction(this.sectionStart, this.index);\n      this.state = State.Text;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateBeforeComment(c) {\n    if (c === CharCodes.Dash) {\n      this.state = State.InCommentLike;\n      this.currentSequence = Sequences.CommentEnd;\n      // Allow short comments (eg. <!-->)\n      this.sequenceIndex = 2;\n      this.sectionStart = this.index + 1;\n    } else {\n      this.state = State.InDeclaration;\n    }\n  }\n  stateInSpecialComment(c) {\n    if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n      this.cbs.oncomment(this.sectionStart, this.index, 0);\n      this.state = State.Text;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateBeforeSpecialS(c) {\n    const lower = c | 0x20;\n    if (lower === Sequences.ScriptEnd[3]) {\n      this.startSpecial(Sequences.ScriptEnd, 4);\n    } else if (lower === Sequences.StyleEnd[3]) {\n      this.startSpecial(Sequences.StyleEnd, 4);\n    } else {\n      this.state = State.InTagName;\n      this.stateInTagName(c); // Consume the token again\n    }\n  }\n  stateBeforeEntity(c) {\n    // Start excess with 1 to include the '&'\n    this.entityExcess = 1;\n    this.entityResult = 0;\n    if (c === CharCodes.Number) {\n      this.state = State.BeforeNumericEntity;\n    } else if (c === CharCodes.Amp) {\n      // We have two `&` characters in a row. Stay in the current state.\n    } else {\n      this.trieIndex = 0;\n      this.trieCurrent = this.entityTrie[0];\n      this.state = State.InNamedEntity;\n      this.stateInNamedEntity(c);\n    }\n  }\n  stateInNamedEntity(c) {\n    this.entityExcess += 1;\n    this.trieIndex = determineBranch(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);\n    if (this.trieIndex < 0) {\n      this.emitNamedEntity();\n      this.index--;\n      return;\n    }\n    this.trieCurrent = this.entityTrie[this.trieIndex];\n    const masked = this.trieCurrent & BinTrieFlags.VALUE_LENGTH;\n    // If the branch is a value, store it and continue\n    if (masked) {\n      // The mask is the number of bytes of the value, including the current byte.\n      const valueLength = (masked >> 14) - 1;\n      // If we have a legacy entity while parsing strictly, just skip the number of bytes\n      if (!this.allowLegacyEntity() && c !== CharCodes.Semi) {\n        this.trieIndex += valueLength;\n      } else {\n        // Add 1 as we have already incremented the excess\n        const entityStart = this.index - this.entityExcess + 1;\n        if (entityStart > this.sectionStart) {\n          this.emitPartial(this.sectionStart, entityStart);\n        }\n        // If this is a surrogate pair, consume the next two bytes\n        this.entityResult = this.trieIndex;\n        this.trieIndex += valueLength;\n        this.entityExcess = 0;\n        this.sectionStart = this.index + 1;\n        if (valueLength === 0) {\n          this.emitNamedEntity();\n        }\n      }\n    }\n  }\n  emitNamedEntity() {\n    this.state = this.baseState;\n    if (this.entityResult === 0) {\n      return;\n    }\n    const valueLength = (this.entityTrie[this.entityResult] & BinTrieFlags.VALUE_LENGTH) >> 14;\n    switch (valueLength) {\n      case 1:\n        {\n          this.emitCodePoint(this.entityTrie[this.entityResult] & ~BinTrieFlags.VALUE_LENGTH);\n          break;\n        }\n      case 2:\n        {\n          this.emitCodePoint(this.entityTrie[this.entityResult + 1]);\n          break;\n        }\n      case 3:\n        {\n          this.emitCodePoint(this.entityTrie[this.entityResult + 1]);\n          this.emitCodePoint(this.entityTrie[this.entityResult + 2]);\n        }\n    }\n  }\n  stateBeforeNumericEntity(c) {\n    if ((c | 0x20) === CharCodes.LowerX) {\n      this.entityExcess++;\n      this.state = State.InHexEntity;\n    } else {\n      this.state = State.InNumericEntity;\n      this.stateInNumericEntity(c);\n    }\n  }\n  emitNumericEntity(strict) {\n    const entityStart = this.index - this.entityExcess - 1;\n    const numberStart = entityStart + 2 + Number(this.state === State.InHexEntity);\n    if (numberStart !== this.index) {\n      // Emit leading data if any\n      if (entityStart > this.sectionStart) {\n        this.emitPartial(this.sectionStart, entityStart);\n      }\n      this.sectionStart = this.index + Number(strict);\n      this.emitCodePoint(replaceCodePoint(this.entityResult));\n    }\n    this.state = this.baseState;\n  }\n  stateInNumericEntity(c) {\n    if (c === CharCodes.Semi) {\n      this.emitNumericEntity(true);\n    } else if (isNumber(c)) {\n      this.entityResult = this.entityResult * 10 + (c - CharCodes.Zero);\n      this.entityExcess++;\n    } else {\n      if (this.allowLegacyEntity()) {\n        this.emitNumericEntity(false);\n      } else {\n        this.state = this.baseState;\n      }\n      this.index--;\n    }\n  }\n  stateInHexEntity(c) {\n    if (c === CharCodes.Semi) {\n      this.emitNumericEntity(true);\n    } else if (isNumber(c)) {\n      this.entityResult = this.entityResult * 16 + (c - CharCodes.Zero);\n      this.entityExcess++;\n    } else if (isHexDigit(c)) {\n      this.entityResult = this.entityResult * 16 + ((c | 0x20) - CharCodes.LowerA + 10);\n      this.entityExcess++;\n    } else {\n      if (this.allowLegacyEntity()) {\n        this.emitNumericEntity(false);\n      } else {\n        this.state = this.baseState;\n      }\n      this.index--;\n    }\n  }\n  allowLegacyEntity() {\n    return !this.xmlMode && (this.baseState === State.Text || this.baseState === State.InSpecialTag);\n  }\n  /**\n   * Remove data that has already been consumed from the buffer.\n   */\n  cleanup() {\n    // If we are inside of text or attributes, emit what we already have.\n    if (this.running && this.sectionStart !== this.index) {\n      if (this.state === State.Text || this.state === State.InSpecialTag && this.sequenceIndex === 0) {\n        this.cbs.ontext(this.sectionStart, this.index);\n        this.sectionStart = this.index;\n      } else if (this.state === State.InAttributeValueDq || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueNq) {\n        this.cbs.onattribdata(this.sectionStart, this.index);\n        this.sectionStart = this.index;\n      }\n    }\n  }\n  shouldContinue() {\n    return this.index < this.buffer.length + this.offset && this.running;\n  }\n  /**\n   * Iterates through the buffer, calling the function corresponding to the current state.\n   *\n   * States that are more likely to be hit are higher up, as a performance improvement.\n   */\n  parse() {\n    while (this.shouldContinue()) {\n      const c = this.buffer.charCodeAt(this.index - this.offset);\n      switch (this.state) {\n        case State.Text:\n          {\n            this.stateText(c);\n            break;\n          }\n        case State.SpecialStartSequence:\n          {\n            this.stateSpecialStartSequence(c);\n            break;\n          }\n        case State.InSpecialTag:\n          {\n            this.stateInSpecialTag(c);\n            break;\n          }\n        case State.CDATASequence:\n          {\n            this.stateCDATASequence(c);\n            break;\n          }\n        case State.InAttributeValueDq:\n          {\n            this.stateInAttributeValueDoubleQuotes(c);\n            break;\n          }\n        case State.InAttributeName:\n          {\n            this.stateInAttributeName(c);\n            break;\n          }\n        case State.InCommentLike:\n          {\n            this.stateInCommentLike(c);\n            break;\n          }\n        case State.InSpecialComment:\n          {\n            this.stateInSpecialComment(c);\n            break;\n          }\n        case State.BeforeAttributeName:\n          {\n            this.stateBeforeAttributeName(c);\n            break;\n          }\n        case State.InTagName:\n          {\n            this.stateInTagName(c);\n            break;\n          }\n        case State.InClosingTagName:\n          {\n            this.stateInClosingTagName(c);\n            break;\n          }\n        case State.BeforeTagName:\n          {\n            this.stateBeforeTagName(c);\n            break;\n          }\n        case State.AfterAttributeName:\n          {\n            this.stateAfterAttributeName(c);\n            break;\n          }\n        case State.InAttributeValueSq:\n          {\n            this.stateInAttributeValueSingleQuotes(c);\n            break;\n          }\n        case State.BeforeAttributeValue:\n          {\n            this.stateBeforeAttributeValue(c);\n            break;\n          }\n        case State.BeforeClosingTagName:\n          {\n            this.stateBeforeClosingTagName(c);\n            break;\n          }\n        case State.AfterClosingTagName:\n          {\n            this.stateAfterClosingTagName(c);\n            break;\n          }\n        case State.BeforeSpecialS:\n          {\n            this.stateBeforeSpecialS(c);\n            break;\n          }\n        case State.InAttributeValueNq:\n          {\n            this.stateInAttributeValueNoQuotes(c);\n            break;\n          }\n        case State.InSelfClosingTag:\n          {\n            this.stateInSelfClosingTag(c);\n            break;\n          }\n        case State.InDeclaration:\n          {\n            this.stateInDeclaration(c);\n            break;\n          }\n        case State.BeforeDeclaration:\n          {\n            this.stateBeforeDeclaration(c);\n            break;\n          }\n        case State.BeforeComment:\n          {\n            this.stateBeforeComment(c);\n            break;\n          }\n        case State.InProcessingInstruction:\n          {\n            this.stateInProcessingInstruction(c);\n            break;\n          }\n        case State.InNamedEntity:\n          {\n            this.stateInNamedEntity(c);\n            break;\n          }\n        case State.BeforeEntity:\n          {\n            this.stateBeforeEntity(c);\n            break;\n          }\n        case State.InHexEntity:\n          {\n            this.stateInHexEntity(c);\n            break;\n          }\n        case State.InNumericEntity:\n          {\n            this.stateInNumericEntity(c);\n            break;\n          }\n        default:\n          {\n            // `this._state === State.BeforeNumericEntity`\n            this.stateBeforeNumericEntity(c);\n          }\n      }\n      this.index++;\n    }\n    this.cleanup();\n  }\n  finish() {\n    if (this.state === State.InNamedEntity) {\n      this.emitNamedEntity();\n    }\n    // If there is remaining data, emit it in a reasonable way\n    if (this.sectionStart < this.index) {\n      this.handleTrailingData();\n    }\n    this.cbs.onend();\n  }\n  /** Handle any trailing data. */\n  handleTrailingData() {\n    const endIndex = this.buffer.length + this.offset;\n    if (this.state === State.InCommentLike) {\n      if (this.currentSequence === Sequences.CdataEnd) {\n        this.cbs.oncdata(this.sectionStart, endIndex, 0);\n      } else {\n        this.cbs.oncomment(this.sectionStart, endIndex, 0);\n      }\n    } else if (this.state === State.InNumericEntity && this.allowLegacyEntity()) {\n      this.emitNumericEntity(false);\n      // All trailing data will have been consumed\n    } else if (this.state === State.InHexEntity && this.allowLegacyEntity()) {\n      this.emitNumericEntity(false);\n      // All trailing data will have been consumed\n    } else if (this.state === State.InTagName || this.state === State.BeforeAttributeName || this.state === State.BeforeAttributeValue || this.state === State.AfterAttributeName || this.state === State.InAttributeName || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueDq || this.state === State.InAttributeValueNq || this.state === State.InClosingTagName) {\n      /*\n       * If we are currently in an opening or closing tag, us not calling the\n       * respective callback signals that the tag should be ignored.\n       */\n    } else {\n      this.cbs.ontext(this.sectionStart, endIndex);\n    }\n  }\n  emitPartial(start, endIndex) {\n    if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {\n      this.cbs.onattribdata(start, endIndex);\n    } else {\n      this.cbs.ontext(start, endIndex);\n    }\n  }\n  emitCodePoint(cp) {\n    if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {\n      this.cbs.onattribentity(cp);\n    } else {\n      this.cbs.ontextentity(cp);\n    }\n  }\n}\n", "import Tokenizer, { QuoteType } from \"./Tokenizer.js\";\nimport { fromCodePoint } from \"entities/lib/decode.js\";\nconst formTags = new Set([\"input\", \"option\", \"optgroup\", \"select\", \"button\", \"datalist\", \"textarea\"]);\nconst pTag = new Set([\"p\"]);\nconst tableSectionTags = new Set([\"thead\", \"tbody\"]);\nconst ddtTags = new Set([\"dd\", \"dt\"]);\nconst rtpTags = new Set([\"rt\", \"rp\"]);\nconst openImpliesClose = new Map([[\"tr\", new Set([\"tr\", \"th\", \"td\"])], [\"th\", new Set([\"th\"])], [\"td\", new Set([\"thead\", \"th\", \"td\"])], [\"body\", new Set([\"head\", \"link\", \"script\"])], [\"li\", new Set([\"li\"])], [\"p\", pTag], [\"h1\", pTag], [\"h2\", pTag], [\"h3\", pTag], [\"h4\", pTag], [\"h5\", pTag], [\"h6\", pTag], [\"select\", formTags], [\"input\", formTags], [\"output\", formTags], [\"button\", formTags], [\"datalist\", formTags], [\"textarea\", formTags], [\"option\", new Set([\"option\"])], [\"optgroup\", new Set([\"optgroup\", \"option\"])], [\"dd\", ddtTags], [\"dt\", ddtTags], [\"address\", pTag], [\"article\", pTag], [\"aside\", pTag], [\"blockquote\", pTag], [\"details\", pTag], [\"div\", pTag], [\"dl\", pTag], [\"fieldset\", pTag], [\"figcaption\", pTag], [\"figure\", pTag], [\"footer\", pTag], [\"form\", pTag], [\"header\", pTag], [\"hr\", pTag], [\"main\", pTag], [\"nav\", pTag], [\"ol\", pTag], [\"pre\", pTag], [\"section\", pTag], [\"table\", pTag], [\"ul\", pTag], [\"rt\", rtpTags], [\"rp\", rtpTags], [\"tbody\", tableSectionTags], [\"tfoot\", tableSectionTags]]);\nconst voidElements = new Set([\"area\", \"base\", \"basefont\", \"br\", \"col\", \"command\", \"embed\", \"frame\", \"hr\", \"img\", \"input\", \"isindex\", \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"]);\nconst foreignContextElements = new Set([\"math\", \"svg\"]);\nconst htmlIntegrationElements = new Set([\"mi\", \"mo\", \"mn\", \"ms\", \"mtext\", \"annotation-xml\", \"foreignobject\", \"desc\", \"title\"]);\nconst reNameEnd = /\\s|\\//;\nexport class Parser {\n  constructor(cbs, options = {}) {\n    var _a, _b, _c, _d, _e;\n    this.options = options;\n    /** The start index of the last event. */\n    this.startIndex = 0;\n    /** The end index of the last event. */\n    this.endIndex = 0;\n    /**\n     * Store the start index of the current open tag,\n     * so we can update the start index for attributes.\n     */\n    this.openTagStart = 0;\n    this.tagname = \"\";\n    this.attribname = \"\";\n    this.attribvalue = \"\";\n    this.attribs = null;\n    this.stack = [];\n    this.foreignContext = [];\n    this.buffers = [];\n    this.bufferOffset = 0;\n    /** The index of the last written buffer. Used when resuming after a `pause()`. */\n    this.writeIndex = 0;\n    /** Indicates whether the parser has finished running / `.end` has been called. */\n    this.ended = false;\n    this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};\n    this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;\n    this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;\n    this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer)(this.options, this);\n    (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);\n  }\n  // Tokenizer event handlers\n  /** @internal */\n  ontext(start, endIndex) {\n    var _a, _b;\n    const data = this.getSlice(start, endIndex);\n    this.endIndex = endIndex - 1;\n    (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);\n    this.startIndex = endIndex;\n  }\n  /** @internal */\n  ontextentity(cp) {\n    var _a, _b;\n    /*\n     * Entities can be emitted on the character, or directly after.\n     * We use the section start here to get accurate indices.\n     */\n    const index = this.tokenizer.getSectionStart();\n    this.endIndex = index - 1;\n    (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, fromCodePoint(cp));\n    this.startIndex = index;\n  }\n  isVoidElement(name) {\n    return !this.options.xmlMode && voidElements.has(name);\n  }\n  /** @internal */\n  onopentagname(start, endIndex) {\n    this.endIndex = endIndex;\n    let name = this.getSlice(start, endIndex);\n    if (this.lowerCaseTagNames) {\n      name = name.toLowerCase();\n    }\n    this.emitOpenTag(name);\n  }\n  emitOpenTag(name) {\n    var _a, _b, _c, _d;\n    this.openTagStart = this.startIndex;\n    this.tagname = name;\n    const impliesClose = !this.options.xmlMode && openImpliesClose.get(name);\n    if (impliesClose) {\n      while (this.stack.length > 0 && impliesClose.has(this.stack[this.stack.length - 1])) {\n        const element = this.stack.pop();\n        (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, element, true);\n      }\n    }\n    if (!this.isVoidElement(name)) {\n      this.stack.push(name);\n      if (foreignContextElements.has(name)) {\n        this.foreignContext.push(true);\n      } else if (htmlIntegrationElements.has(name)) {\n        this.foreignContext.push(false);\n      }\n    }\n    (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, name);\n    if (this.cbs.onopentag) this.attribs = {};\n  }\n  endOpenTag(isImplied) {\n    var _a, _b;\n    this.startIndex = this.openTagStart;\n    if (this.attribs) {\n      (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs, isImplied);\n      this.attribs = null;\n    }\n    if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {\n      this.cbs.onclosetag(this.tagname, true);\n    }\n    this.tagname = \"\";\n  }\n  /** @internal */\n  onopentagend(endIndex) {\n    this.endIndex = endIndex;\n    this.endOpenTag(false);\n    // Set `startIndex` for next node\n    this.startIndex = endIndex + 1;\n  }\n  /** @internal */\n  onclosetag(start, endIndex) {\n    var _a, _b, _c, _d, _e, _f;\n    this.endIndex = endIndex;\n    let name = this.getSlice(start, endIndex);\n    if (this.lowerCaseTagNames) {\n      name = name.toLowerCase();\n    }\n    if (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) {\n      this.foreignContext.pop();\n    }\n    if (!this.isVoidElement(name)) {\n      const pos = this.stack.lastIndexOf(name);\n      if (pos !== -1) {\n        if (this.cbs.onclosetag) {\n          let count = this.stack.length - pos;\n          while (count--) {\n            // We know the stack has sufficient elements.\n            this.cbs.onclosetag(this.stack.pop(), count !== 0);\n          }\n        } else this.stack.length = pos;\n      } else if (!this.options.xmlMode && name === \"p\") {\n        // Implicit open before close\n        this.emitOpenTag(\"p\");\n        this.closeCurrentTag(true);\n      }\n    } else if (!this.options.xmlMode && name === \"br\") {\n      // We can't use `emitOpenTag` for implicit open, as `br` would be implicitly closed.\n      (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a, \"br\");\n      (_d = (_c = this.cbs).onopentag) === null || _d === void 0 ? void 0 : _d.call(_c, \"br\", {}, true);\n      (_f = (_e = this.cbs).onclosetag) === null || _f === void 0 ? void 0 : _f.call(_e, \"br\", false);\n    }\n    // Set `startIndex` for next node\n    this.startIndex = endIndex + 1;\n  }\n  /** @internal */\n  onselfclosingtag(endIndex) {\n    this.endIndex = endIndex;\n    if (this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1]) {\n      this.closeCurrentTag(false);\n      // Set `startIndex` for next node\n      this.startIndex = endIndex + 1;\n    } else {\n      // Ignore the fact that the tag is self-closing.\n      this.onopentagend(endIndex);\n    }\n  }\n  closeCurrentTag(isOpenImplied) {\n    var _a, _b;\n    const name = this.tagname;\n    this.endOpenTag(isOpenImplied);\n    // Self-closing tags will be on the top of the stack\n    if (this.stack[this.stack.length - 1] === name) {\n      // If the opening tag isn't implied, the closing tag has to be implied.\n      (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name, !isOpenImplied);\n      this.stack.pop();\n    }\n  }\n  /** @internal */\n  onattribname(start, endIndex) {\n    this.startIndex = start;\n    const name = this.getSlice(start, endIndex);\n    this.attribname = this.lowerCaseAttributeNames ? name.toLowerCase() : name;\n  }\n  /** @internal */\n  onattribdata(start, endIndex) {\n    this.attribvalue += this.getSlice(start, endIndex);\n  }\n  /** @internal */\n  onattribentity(cp) {\n    this.attribvalue += fromCodePoint(cp);\n  }\n  /** @internal */\n  onattribend(quote, endIndex) {\n    var _a, _b;\n    this.endIndex = endIndex;\n    (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote === QuoteType.Double ? '\"' : quote === QuoteType.Single ? \"'\" : quote === QuoteType.NoValue ? undefined : null);\n    if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {\n      this.attribs[this.attribname] = this.attribvalue;\n    }\n    this.attribvalue = \"\";\n  }\n  getInstructionName(value) {\n    const index = value.search(reNameEnd);\n    let name = index < 0 ? value : value.substr(0, index);\n    if (this.lowerCaseTagNames) {\n      name = name.toLowerCase();\n    }\n    return name;\n  }\n  /** @internal */\n  ondeclaration(start, endIndex) {\n    this.endIndex = endIndex;\n    const value = this.getSlice(start, endIndex);\n    if (this.cbs.onprocessinginstruction) {\n      const name = this.getInstructionName(value);\n      this.cbs.onprocessinginstruction(`!${name}`, `!${value}`);\n    }\n    // Set `startIndex` for next node\n    this.startIndex = endIndex + 1;\n  }\n  /** @internal */\n  onprocessinginstruction(start, endIndex) {\n    this.endIndex = endIndex;\n    const value = this.getSlice(start, endIndex);\n    if (this.cbs.onprocessinginstruction) {\n      const name = this.getInstructionName(value);\n      this.cbs.onprocessinginstruction(`?${name}`, `?${value}`);\n    }\n    // Set `startIndex` for next node\n    this.startIndex = endIndex + 1;\n  }\n  /** @internal */\n  oncomment(start, endIndex, offset) {\n    var _a, _b, _c, _d;\n    this.endIndex = endIndex;\n    (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, this.getSlice(start, endIndex - offset));\n    (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);\n    // Set `startIndex` for next node\n    this.startIndex = endIndex + 1;\n  }\n  /** @internal */\n  oncdata(start, endIndex, offset) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n    this.endIndex = endIndex;\n    const value = this.getSlice(start, endIndex - offset);\n    if (this.options.xmlMode || this.options.recognizeCDATA) {\n      (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);\n      (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);\n      (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);\n    } else {\n      (_h = (_g = this.cbs).oncomment) === null || _h === void 0 ? void 0 : _h.call(_g, `[CDATA[${value}]]`);\n      (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 ? void 0 : _k.call(_j);\n    }\n    // Set `startIndex` for next node\n    this.startIndex = endIndex + 1;\n  }\n  /** @internal */\n  onend() {\n    var _a, _b;\n    if (this.cbs.onclosetag) {\n      // Set the end index for all remaining tags\n      this.endIndex = this.startIndex;\n      for (let index = this.stack.length; index > 0; this.cbs.onclosetag(this.stack[--index], true));\n    }\n    (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);\n  }\n  /**\n   * Resets the parser to a blank state, ready to parse a new HTML document\n   */\n  reset() {\n    var _a, _b, _c, _d;\n    (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);\n    this.tokenizer.reset();\n    this.tagname = \"\";\n    this.attribname = \"\";\n    this.attribs = null;\n    this.stack.length = 0;\n    this.startIndex = 0;\n    this.endIndex = 0;\n    (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);\n    this.buffers.length = 0;\n    this.bufferOffset = 0;\n    this.writeIndex = 0;\n    this.ended = false;\n  }\n  /**\n   * Resets the parser, then parses a complete document and\n   * pushes it to the handler.\n   *\n   * @param data Document to parse.\n   */\n  parseComplete(data) {\n    this.reset();\n    this.end(data);\n  }\n  getSlice(start, end) {\n    while (start - this.bufferOffset >= this.buffers[0].length) {\n      this.shiftBuffer();\n    }\n    let slice = this.buffers[0].slice(start - this.bufferOffset, end - this.bufferOffset);\n    while (end - this.bufferOffset > this.buffers[0].length) {\n      this.shiftBuffer();\n      slice += this.buffers[0].slice(0, end - this.bufferOffset);\n    }\n    return slice;\n  }\n  shiftBuffer() {\n    this.bufferOffset += this.buffers[0].length;\n    this.writeIndex--;\n    this.buffers.shift();\n  }\n  /**\n   * Parses a chunk of data and calls the corresponding callbacks.\n   *\n   * @param chunk Chunk to parse.\n   */\n  write(chunk) {\n    var _a, _b;\n    if (this.ended) {\n      (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(\".write() after done!\"));\n      return;\n    }\n    this.buffers.push(chunk);\n    if (this.tokenizer.running) {\n      this.tokenizer.write(chunk);\n      this.writeIndex++;\n    }\n  }\n  /**\n   * Parses the end of the buffer and clears the stack, calls onend.\n   *\n   * @param chunk Optional final chunk to parse.\n   */\n  end(chunk) {\n    var _a, _b;\n    if (this.ended) {\n      (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(\".end() after done!\"));\n      return;\n    }\n    if (chunk) this.write(chunk);\n    this.ended = true;\n    this.tokenizer.end();\n  }\n  /**\n   * Pauses parsing. The parser won't emit events until `resume` is called.\n   */\n  pause() {\n    this.tokenizer.pause();\n  }\n  /**\n   * Resumes parsing after `pause` was called.\n   */\n  resume() {\n    this.tokenizer.resume();\n    while (this.tokenizer.running && this.writeIndex < this.buffers.length) {\n      this.tokenizer.write(this.buffers[this.writeIndex++]);\n    }\n    if (this.ended) this.tokenizer.end();\n  }\n  /**\n   * Alias of `write`, for backwards compatibility.\n   *\n   * @param chunk Chunk to parse.\n   * @deprecated\n   */\n  parseChunk(chunk) {\n    this.write(chunk);\n  }\n  /**\n   * Alias of `end`, for backwards compatibility.\n   *\n   * @param chunk Optional final chunk to parse.\n   * @deprecated\n   */\n  done(chunk) {\n    this.end(chunk);\n  }\n}\n", "// Generated using scripts/write-encode-map.ts\nfunction restoreDiff(arr) {\n  for (let i = 1; i < arr.length; i++) {\n    arr[i][0] += arr[i - 1][0] + 1;\n  }\n  return arr;\n}\n// prettier-ignore\nexport default new Map( /* #__PURE__ */restoreDiff([[9, \"&Tab;\"], [0, \"&NewLine;\"], [22, \"&excl;\"], [0, \"&quot;\"], [0, \"&num;\"], [0, \"&dollar;\"], [0, \"&percnt;\"], [0, \"&amp;\"], [0, \"&apos;\"], [0, \"&lpar;\"], [0, \"&rpar;\"], [0, \"&ast;\"], [0, \"&plus;\"], [0, \"&comma;\"], [1, \"&period;\"], [0, \"&sol;\"], [10, \"&colon;\"], [0, \"&semi;\"], [0, {\n  v: \"&lt;\",\n  n: 8402,\n  o: \"&nvlt;\"\n}], [0, {\n  v: \"&equals;\",\n  n: 8421,\n  o: \"&bne;\"\n}], [0, {\n  v: \"&gt;\",\n  n: 8402,\n  o: \"&nvgt;\"\n}], [0, \"&quest;\"], [0, \"&commat;\"], [26, \"&lbrack;\"], [0, \"&bsol;\"], [0, \"&rbrack;\"], [0, \"&Hat;\"], [0, \"&lowbar;\"], [0, \"&DiacriticalGrave;\"], [5, {\n  n: 106,\n  o: \"&fjlig;\"\n}], [20, \"&lbrace;\"], [0, \"&verbar;\"], [0, \"&rbrace;\"], [34, \"&nbsp;\"], [0, \"&iexcl;\"], [0, \"&cent;\"], [0, \"&pound;\"], [0, \"&curren;\"], [0, \"&yen;\"], [0, \"&brvbar;\"], [0, \"&sect;\"], [0, \"&die;\"], [0, \"&copy;\"], [0, \"&ordf;\"], [0, \"&laquo;\"], [0, \"&not;\"], [0, \"&shy;\"], [0, \"&circledR;\"], [0, \"&macr;\"], [0, \"&deg;\"], [0, \"&PlusMinus;\"], [0, \"&sup2;\"], [0, \"&sup3;\"], [0, \"&acute;\"], [0, \"&micro;\"], [0, \"&para;\"], [0, \"&centerdot;\"], [0, \"&cedil;\"], [0, \"&sup1;\"], [0, \"&ordm;\"], [0, \"&raquo;\"], [0, \"&frac14;\"], [0, \"&frac12;\"], [0, \"&frac34;\"], [0, \"&iquest;\"], [0, \"&Agrave;\"], [0, \"&Aacute;\"], [0, \"&Acirc;\"], [0, \"&Atilde;\"], [0, \"&Auml;\"], [0, \"&angst;\"], [0, \"&AElig;\"], [0, \"&Ccedil;\"], [0, \"&Egrave;\"], [0, \"&Eacute;\"], [0, \"&Ecirc;\"], [0, \"&Euml;\"], [0, \"&Igrave;\"], [0, \"&Iacute;\"], [0, \"&Icirc;\"], [0, \"&Iuml;\"], [0, \"&ETH;\"], [0, \"&Ntilde;\"], [0, \"&Ograve;\"], [0, \"&Oacute;\"], [0, \"&Ocirc;\"], [0, \"&Otilde;\"], [0, \"&Ouml;\"], [0, \"&times;\"], [0, \"&Oslash;\"], [0, \"&Ugrave;\"], [0, \"&Uacute;\"], [0, \"&Ucirc;\"], [0, \"&Uuml;\"], [0, \"&Yacute;\"], [0, \"&THORN;\"], [0, \"&szlig;\"], [0, \"&agrave;\"], [0, \"&aacute;\"], [0, \"&acirc;\"], [0, \"&atilde;\"], [0, \"&auml;\"], [0, \"&aring;\"], [0, \"&aelig;\"], [0, \"&ccedil;\"], [0, \"&egrave;\"], [0, \"&eacute;\"], [0, \"&ecirc;\"], [0, \"&euml;\"], [0, \"&igrave;\"], [0, \"&iacute;\"], [0, \"&icirc;\"], [0, \"&iuml;\"], [0, \"&eth;\"], [0, \"&ntilde;\"], [0, \"&ograve;\"], [0, \"&oacute;\"], [0, \"&ocirc;\"], [0, \"&otilde;\"], [0, \"&ouml;\"], [0, \"&div;\"], [0, \"&oslash;\"], [0, \"&ugrave;\"], [0, \"&uacute;\"], [0, \"&ucirc;\"], [0, \"&uuml;\"], [0, \"&yacute;\"], [0, \"&thorn;\"], [0, \"&yuml;\"], [0, \"&Amacr;\"], [0, \"&amacr;\"], [0, \"&Abreve;\"], [0, \"&abreve;\"], [0, \"&Aogon;\"], [0, \"&aogon;\"], [0, \"&Cacute;\"], [0, \"&cacute;\"], [0, \"&Ccirc;\"], [0, \"&ccirc;\"], [0, \"&Cdot;\"], [0, \"&cdot;\"], [0, \"&Ccaron;\"], [0, \"&ccaron;\"], [0, \"&Dcaron;\"], [0, \"&dcaron;\"], [0, \"&Dstrok;\"], [0, \"&dstrok;\"], [0, \"&Emacr;\"], [0, \"&emacr;\"], [2, \"&Edot;\"], [0, \"&edot;\"], [0, \"&Eogon;\"], [0, \"&eogon;\"], [0, \"&Ecaron;\"], [0, \"&ecaron;\"], [0, \"&Gcirc;\"], [0, \"&gcirc;\"], [0, \"&Gbreve;\"], [0, \"&gbreve;\"], [0, \"&Gdot;\"], [0, \"&gdot;\"], [0, \"&Gcedil;\"], [1, \"&Hcirc;\"], [0, \"&hcirc;\"], [0, \"&Hstrok;\"], [0, \"&hstrok;\"], [0, \"&Itilde;\"], [0, \"&itilde;\"], [0, \"&Imacr;\"], [0, \"&imacr;\"], [2, \"&Iogon;\"], [0, \"&iogon;\"], [0, \"&Idot;\"], [0, \"&imath;\"], [0, \"&IJlig;\"], [0, \"&ijlig;\"], [0, \"&Jcirc;\"], [0, \"&jcirc;\"], [0, \"&Kcedil;\"], [0, \"&kcedil;\"], [0, \"&kgreen;\"], [0, \"&Lacute;\"], [0, \"&lacute;\"], [0, \"&Lcedil;\"], [0, \"&lcedil;\"], [0, \"&Lcaron;\"], [0, \"&lcaron;\"], [0, \"&Lmidot;\"], [0, \"&lmidot;\"], [0, \"&Lstrok;\"], [0, \"&lstrok;\"], [0, \"&Nacute;\"], [0, \"&nacute;\"], [0, \"&Ncedil;\"], [0, \"&ncedil;\"], [0, \"&Ncaron;\"], [0, \"&ncaron;\"], [0, \"&napos;\"], [0, \"&ENG;\"], [0, \"&eng;\"], [0, \"&Omacr;\"], [0, \"&omacr;\"], [2, \"&Odblac;\"], [0, \"&odblac;\"], [0, \"&OElig;\"], [0, \"&oelig;\"], [0, \"&Racute;\"], [0, \"&racute;\"], [0, \"&Rcedil;\"], [0, \"&rcedil;\"], [0, \"&Rcaron;\"], [0, \"&rcaron;\"], [0, \"&Sacute;\"], [0, \"&sacute;\"], [0, \"&Scirc;\"], [0, \"&scirc;\"], [0, \"&Scedil;\"], [0, \"&scedil;\"], [0, \"&Scaron;\"], [0, \"&scaron;\"], [0, \"&Tcedil;\"], [0, \"&tcedil;\"], [0, \"&Tcaron;\"], [0, \"&tcaron;\"], [0, \"&Tstrok;\"], [0, \"&tstrok;\"], [0, \"&Utilde;\"], [0, \"&utilde;\"], [0, \"&Umacr;\"], [0, \"&umacr;\"], [0, \"&Ubreve;\"], [0, \"&ubreve;\"], [0, \"&Uring;\"], [0, \"&uring;\"], [0, \"&Udblac;\"], [0, \"&udblac;\"], [0, \"&Uogon;\"], [0, \"&uogon;\"], [0, \"&Wcirc;\"], [0, \"&wcirc;\"], [0, \"&Ycirc;\"], [0, \"&ycirc;\"], [0, \"&Yuml;\"], [0, \"&Zacute;\"], [0, \"&zacute;\"], [0, \"&Zdot;\"], [0, \"&zdot;\"], [0, \"&Zcaron;\"], [0, \"&zcaron;\"], [19, \"&fnof;\"], [34, \"&imped;\"], [63, \"&gacute;\"], [65, \"&jmath;\"], [142, \"&circ;\"], [0, \"&caron;\"], [16, \"&breve;\"], [0, \"&DiacriticalDot;\"], [0, \"&ring;\"], [0, \"&ogon;\"], [0, \"&DiacriticalTilde;\"], [0, \"&dblac;\"], [51, \"&DownBreve;\"], [127, \"&Alpha;\"], [0, \"&Beta;\"], [0, \"&Gamma;\"], [0, \"&Delta;\"], [0, \"&Epsilon;\"], [0, \"&Zeta;\"], [0, \"&Eta;\"], [0, \"&Theta;\"], [0, \"&Iota;\"], [0, \"&Kappa;\"], [0, \"&Lambda;\"], [0, \"&Mu;\"], [0, \"&Nu;\"], [0, \"&Xi;\"], [0, \"&Omicron;\"], [0, \"&Pi;\"], [0, \"&Rho;\"], [1, \"&Sigma;\"], [0, \"&Tau;\"], [0, \"&Upsilon;\"], [0, \"&Phi;\"], [0, \"&Chi;\"], [0, \"&Psi;\"], [0, \"&ohm;\"], [7, \"&alpha;\"], [0, \"&beta;\"], [0, \"&gamma;\"], [0, \"&delta;\"], [0, \"&epsi;\"], [0, \"&zeta;\"], [0, \"&eta;\"], [0, \"&theta;\"], [0, \"&iota;\"], [0, \"&kappa;\"], [0, \"&lambda;\"], [0, \"&mu;\"], [0, \"&nu;\"], [0, \"&xi;\"], [0, \"&omicron;\"], [0, \"&pi;\"], [0, \"&rho;\"], [0, \"&sigmaf;\"], [0, \"&sigma;\"], [0, \"&tau;\"], [0, \"&upsi;\"], [0, \"&phi;\"], [0, \"&chi;\"], [0, \"&psi;\"], [0, \"&omega;\"], [7, \"&thetasym;\"], [0, \"&Upsi;\"], [2, \"&phiv;\"], [0, \"&piv;\"], [5, \"&Gammad;\"], [0, \"&digamma;\"], [18, \"&kappav;\"], [0, \"&rhov;\"], [3, \"&epsiv;\"], [0, \"&backepsilon;\"], [10, \"&IOcy;\"], [0, \"&DJcy;\"], [0, \"&GJcy;\"], [0, \"&Jukcy;\"], [0, \"&DScy;\"], [0, \"&Iukcy;\"], [0, \"&YIcy;\"], [0, \"&Jsercy;\"], [0, \"&LJcy;\"], [0, \"&NJcy;\"], [0, \"&TSHcy;\"], [0, \"&KJcy;\"], [1, \"&Ubrcy;\"], [0, \"&DZcy;\"], [0, \"&Acy;\"], [0, \"&Bcy;\"], [0, \"&Vcy;\"], [0, \"&Gcy;\"], [0, \"&Dcy;\"], [0, \"&IEcy;\"], [0, \"&ZHcy;\"], [0, \"&Zcy;\"], [0, \"&Icy;\"], [0, \"&Jcy;\"], [0, \"&Kcy;\"], [0, \"&Lcy;\"], [0, \"&Mcy;\"], [0, \"&Ncy;\"], [0, \"&Ocy;\"], [0, \"&Pcy;\"], [0, \"&Rcy;\"], [0, \"&Scy;\"], [0, \"&Tcy;\"], [0, \"&Ucy;\"], [0, \"&Fcy;\"], [0, \"&KHcy;\"], [0, \"&TScy;\"], [0, \"&CHcy;\"], [0, \"&SHcy;\"], [0, \"&SHCHcy;\"], [0, \"&HARDcy;\"], [0, \"&Ycy;\"], [0, \"&SOFTcy;\"], [0, \"&Ecy;\"], [0, \"&YUcy;\"], [0, \"&YAcy;\"], [0, \"&acy;\"], [0, \"&bcy;\"], [0, \"&vcy;\"], [0, \"&gcy;\"], [0, \"&dcy;\"], [0, \"&iecy;\"], [0, \"&zhcy;\"], [0, \"&zcy;\"], [0, \"&icy;\"], [0, \"&jcy;\"], [0, \"&kcy;\"], [0, \"&lcy;\"], [0, \"&mcy;\"], [0, \"&ncy;\"], [0, \"&ocy;\"], [0, \"&pcy;\"], [0, \"&rcy;\"], [0, \"&scy;\"], [0, \"&tcy;\"], [0, \"&ucy;\"], [0, \"&fcy;\"], [0, \"&khcy;\"], [0, \"&tscy;\"], [0, \"&chcy;\"], [0, \"&shcy;\"], [0, \"&shchcy;\"], [0, \"&hardcy;\"], [0, \"&ycy;\"], [0, \"&softcy;\"], [0, \"&ecy;\"], [0, \"&yucy;\"], [0, \"&yacy;\"], [1, \"&iocy;\"], [0, \"&djcy;\"], [0, \"&gjcy;\"], [0, \"&jukcy;\"], [0, \"&dscy;\"], [0, \"&iukcy;\"], [0, \"&yicy;\"], [0, \"&jsercy;\"], [0, \"&ljcy;\"], [0, \"&njcy;\"], [0, \"&tshcy;\"], [0, \"&kjcy;\"], [1, \"&ubrcy;\"], [0, \"&dzcy;\"], [7074, \"&ensp;\"], [0, \"&emsp;\"], [0, \"&emsp13;\"], [0, \"&emsp14;\"], [1, \"&numsp;\"], [0, \"&puncsp;\"], [0, \"&ThinSpace;\"], [0, \"&hairsp;\"], [0, \"&NegativeMediumSpace;\"], [0, \"&zwnj;\"], [0, \"&zwj;\"], [0, \"&lrm;\"], [0, \"&rlm;\"], [0, \"&dash;\"], [2, \"&ndash;\"], [0, \"&mdash;\"], [0, \"&horbar;\"], [0, \"&Verbar;\"], [1, \"&lsquo;\"], [0, \"&CloseCurlyQuote;\"], [0, \"&lsquor;\"], [1, \"&ldquo;\"], [0, \"&CloseCurlyDoubleQuote;\"], [0, \"&bdquo;\"], [1, \"&dagger;\"], [0, \"&Dagger;\"], [0, \"&bull;\"], [2, \"&nldr;\"], [0, \"&hellip;\"], [9, \"&permil;\"], [0, \"&pertenk;\"], [0, \"&prime;\"], [0, \"&Prime;\"], [0, \"&tprime;\"], [0, \"&backprime;\"], [3, \"&lsaquo;\"], [0, \"&rsaquo;\"], [3, \"&oline;\"], [2, \"&caret;\"], [1, \"&hybull;\"], [0, \"&frasl;\"], [10, \"&bsemi;\"], [7, \"&qprime;\"], [7, {\n  v: \"&MediumSpace;\",\n  n: 8202,\n  o: \"&ThickSpace;\"\n}], [0, \"&NoBreak;\"], [0, \"&af;\"], [0, \"&InvisibleTimes;\"], [0, \"&ic;\"], [72, \"&euro;\"], [46, \"&tdot;\"], [0, \"&DotDot;\"], [37, \"&complexes;\"], [2, \"&incare;\"], [4, \"&gscr;\"], [0, \"&hamilt;\"], [0, \"&Hfr;\"], [0, \"&Hopf;\"], [0, \"&planckh;\"], [0, \"&hbar;\"], [0, \"&imagline;\"], [0, \"&Ifr;\"], [0, \"&lagran;\"], [0, \"&ell;\"], [1, \"&naturals;\"], [0, \"&numero;\"], [0, \"&copysr;\"], [0, \"&weierp;\"], [0, \"&Popf;\"], [0, \"&Qopf;\"], [0, \"&realine;\"], [0, \"&real;\"], [0, \"&reals;\"], [0, \"&rx;\"], [3, \"&trade;\"], [1, \"&integers;\"], [2, \"&mho;\"], [0, \"&zeetrf;\"], [0, \"&iiota;\"], [2, \"&bernou;\"], [0, \"&Cayleys;\"], [1, \"&escr;\"], [0, \"&Escr;\"], [0, \"&Fouriertrf;\"], [1, \"&Mellintrf;\"], [0, \"&order;\"], [0, \"&alefsym;\"], [0, \"&beth;\"], [0, \"&gimel;\"], [0, \"&daleth;\"], [12, \"&CapitalDifferentialD;\"], [0, \"&dd;\"], [0, \"&ee;\"], [0, \"&ii;\"], [10, \"&frac13;\"], [0, \"&frac23;\"], [0, \"&frac15;\"], [0, \"&frac25;\"], [0, \"&frac35;\"], [0, \"&frac45;\"], [0, \"&frac16;\"], [0, \"&frac56;\"], [0, \"&frac18;\"], [0, \"&frac38;\"], [0, \"&frac58;\"], [0, \"&frac78;\"], [49, \"&larr;\"], [0, \"&ShortUpArrow;\"], [0, \"&rarr;\"], [0, \"&darr;\"], [0, \"&harr;\"], [0, \"&updownarrow;\"], [0, \"&nwarr;\"], [0, \"&nearr;\"], [0, \"&LowerRightArrow;\"], [0, \"&LowerLeftArrow;\"], [0, \"&nlarr;\"], [0, \"&nrarr;\"], [1, {\n  v: \"&rarrw;\",\n  n: 824,\n  o: \"&nrarrw;\"\n}], [0, \"&Larr;\"], [0, \"&Uarr;\"], [0, \"&Rarr;\"], [0, \"&Darr;\"], [0, \"&larrtl;\"], [0, \"&rarrtl;\"], [0, \"&LeftTeeArrow;\"], [0, \"&mapstoup;\"], [0, \"&map;\"], [0, \"&DownTeeArrow;\"], [1, \"&hookleftarrow;\"], [0, \"&hookrightarrow;\"], [0, \"&larrlp;\"], [0, \"&looparrowright;\"], [0, \"&harrw;\"], [0, \"&nharr;\"], [1, \"&lsh;\"], [0, \"&rsh;\"], [0, \"&ldsh;\"], [0, \"&rdsh;\"], [1, \"&crarr;\"], [0, \"&cularr;\"], [0, \"&curarr;\"], [2, \"&circlearrowleft;\"], [0, \"&circlearrowright;\"], [0, \"&leftharpoonup;\"], [0, \"&DownLeftVector;\"], [0, \"&RightUpVector;\"], [0, \"&LeftUpVector;\"], [0, \"&rharu;\"], [0, \"&DownRightVector;\"], [0, \"&dharr;\"], [0, \"&dharl;\"], [0, \"&RightArrowLeftArrow;\"], [0, \"&udarr;\"], [0, \"&LeftArrowRightArrow;\"], [0, \"&leftleftarrows;\"], [0, \"&upuparrows;\"], [0, \"&rightrightarrows;\"], [0, \"&ddarr;\"], [0, \"&leftrightharpoons;\"], [0, \"&Equilibrium;\"], [0, \"&nlArr;\"], [0, \"&nhArr;\"], [0, \"&nrArr;\"], [0, \"&DoubleLeftArrow;\"], [0, \"&DoubleUpArrow;\"], [0, \"&DoubleRightArrow;\"], [0, \"&dArr;\"], [0, \"&DoubleLeftRightArrow;\"], [0, \"&DoubleUpDownArrow;\"], [0, \"&nwArr;\"], [0, \"&neArr;\"], [0, \"&seArr;\"], [0, \"&swArr;\"], [0, \"&lAarr;\"], [0, \"&rAarr;\"], [1, \"&zigrarr;\"], [6, \"&larrb;\"], [0, \"&rarrb;\"], [15, \"&DownArrowUpArrow;\"], [7, \"&loarr;\"], [0, \"&roarr;\"], [0, \"&hoarr;\"], [0, \"&forall;\"], [0, \"&comp;\"], [0, {\n  v: \"&part;\",\n  n: 824,\n  o: \"&npart;\"\n}], [0, \"&exist;\"], [0, \"&nexist;\"], [0, \"&empty;\"], [1, \"&Del;\"], [0, \"&Element;\"], [0, \"&NotElement;\"], [1, \"&ni;\"], [0, \"&notni;\"], [2, \"&prod;\"], [0, \"&coprod;\"], [0, \"&sum;\"], [0, \"&minus;\"], [0, \"&MinusPlus;\"], [0, \"&dotplus;\"], [1, \"&Backslash;\"], [0, \"&lowast;\"], [0, \"&compfn;\"], [1, \"&radic;\"], [2, \"&prop;\"], [0, \"&infin;\"], [0, \"&angrt;\"], [0, {\n  v: \"&ang;\",\n  n: 8402,\n  o: \"&nang;\"\n}], [0, \"&angmsd;\"], [0, \"&angsph;\"], [0, \"&mid;\"], [0, \"&nmid;\"], [0, \"&DoubleVerticalBar;\"], [0, \"&NotDoubleVerticalBar;\"], [0, \"&and;\"], [0, \"&or;\"], [0, {\n  v: \"&cap;\",\n  n: 65024,\n  o: \"&caps;\"\n}], [0, {\n  v: \"&cup;\",\n  n: 65024,\n  o: \"&cups;\"\n}], [0, \"&int;\"], [0, \"&Int;\"], [0, \"&iiint;\"], [0, \"&conint;\"], [0, \"&Conint;\"], [0, \"&Cconint;\"], [0, \"&cwint;\"], [0, \"&ClockwiseContourIntegral;\"], [0, \"&awconint;\"], [0, \"&there4;\"], [0, \"&becaus;\"], [0, \"&ratio;\"], [0, \"&Colon;\"], [0, \"&dotminus;\"], [1, \"&mDDot;\"], [0, \"&homtht;\"], [0, {\n  v: \"&sim;\",\n  n: 8402,\n  o: \"&nvsim;\"\n}], [0, {\n  v: \"&backsim;\",\n  n: 817,\n  o: \"&race;\"\n}], [0, {\n  v: \"&ac;\",\n  n: 819,\n  o: \"&acE;\"\n}], [0, \"&acd;\"], [0, \"&VerticalTilde;\"], [0, \"&NotTilde;\"], [0, {\n  v: \"&eqsim;\",\n  n: 824,\n  o: \"&nesim;\"\n}], [0, \"&sime;\"], [0, \"&NotTildeEqual;\"], [0, \"&cong;\"], [0, \"&simne;\"], [0, \"&ncong;\"], [0, \"&ap;\"], [0, \"&nap;\"], [0, \"&ape;\"], [0, {\n  v: \"&apid;\",\n  n: 824,\n  o: \"&napid;\"\n}], [0, \"&backcong;\"], [0, {\n  v: \"&asympeq;\",\n  n: 8402,\n  o: \"&nvap;\"\n}], [0, {\n  v: \"&bump;\",\n  n: 824,\n  o: \"&nbump;\"\n}], [0, {\n  v: \"&bumpe;\",\n  n: 824,\n  o: \"&nbumpe;\"\n}], [0, {\n  v: \"&doteq;\",\n  n: 824,\n  o: \"&nedot;\"\n}], [0, \"&doteqdot;\"], [0, \"&efDot;\"], [0, \"&erDot;\"], [0, \"&Assign;\"], [0, \"&ecolon;\"], [0, \"&ecir;\"], [0, \"&circeq;\"], [1, \"&wedgeq;\"], [0, \"&veeeq;\"], [1, \"&triangleq;\"], [2, \"&equest;\"], [0, \"&ne;\"], [0, {\n  v: \"&Congruent;\",\n  n: 8421,\n  o: \"&bnequiv;\"\n}], [0, \"&nequiv;\"], [1, {\n  v: \"&le;\",\n  n: 8402,\n  o: \"&nvle;\"\n}], [0, {\n  v: \"&ge;\",\n  n: 8402,\n  o: \"&nvge;\"\n}], [0, {\n  v: \"&lE;\",\n  n: 824,\n  o: \"&nlE;\"\n}], [0, {\n  v: \"&gE;\",\n  n: 824,\n  o: \"&ngE;\"\n}], [0, {\n  v: \"&lnE;\",\n  n: 65024,\n  o: \"&lvertneqq;\"\n}], [0, {\n  v: \"&gnE;\",\n  n: 65024,\n  o: \"&gvertneqq;\"\n}], [0, {\n  v: \"&ll;\",\n  n: new Map( /* #__PURE__ */restoreDiff([[824, \"&nLtv;\"], [7577, \"&nLt;\"]]))\n}], [0, {\n  v: \"&gg;\",\n  n: new Map( /* #__PURE__ */restoreDiff([[824, \"&nGtv;\"], [7577, \"&nGt;\"]]))\n}], [0, \"&between;\"], [0, \"&NotCupCap;\"], [0, \"&nless;\"], [0, \"&ngt;\"], [0, \"&nle;\"], [0, \"&nge;\"], [0, \"&lesssim;\"], [0, \"&GreaterTilde;\"], [0, \"&nlsim;\"], [0, \"&ngsim;\"], [0, \"&LessGreater;\"], [0, \"&gl;\"], [0, \"&NotLessGreater;\"], [0, \"&NotGreaterLess;\"], [0, \"&pr;\"], [0, \"&sc;\"], [0, \"&prcue;\"], [0, \"&sccue;\"], [0, \"&PrecedesTilde;\"], [0, {\n  v: \"&scsim;\",\n  n: 824,\n  o: \"&NotSucceedsTilde;\"\n}], [0, \"&NotPrecedes;\"], [0, \"&NotSucceeds;\"], [0, {\n  v: \"&sub;\",\n  n: 8402,\n  o: \"&NotSubset;\"\n}], [0, {\n  v: \"&sup;\",\n  n: 8402,\n  o: \"&NotSuperset;\"\n}], [0, \"&nsub;\"], [0, \"&nsup;\"], [0, \"&sube;\"], [0, \"&supe;\"], [0, \"&NotSubsetEqual;\"], [0, \"&NotSupersetEqual;\"], [0, {\n  v: \"&subne;\",\n  n: 65024,\n  o: \"&varsubsetneq;\"\n}], [0, {\n  v: \"&supne;\",\n  n: 65024,\n  o: \"&varsupsetneq;\"\n}], [1, \"&cupdot;\"], [0, \"&UnionPlus;\"], [0, {\n  v: \"&sqsub;\",\n  n: 824,\n  o: \"&NotSquareSubset;\"\n}], [0, {\n  v: \"&sqsup;\",\n  n: 824,\n  o: \"&NotSquareSuperset;\"\n}], [0, \"&sqsube;\"], [0, \"&sqsupe;\"], [0, {\n  v: \"&sqcap;\",\n  n: 65024,\n  o: \"&sqcaps;\"\n}], [0, {\n  v: \"&sqcup;\",\n  n: 65024,\n  o: \"&sqcups;\"\n}], [0, \"&CirclePlus;\"], [0, \"&CircleMinus;\"], [0, \"&CircleTimes;\"], [0, \"&osol;\"], [0, \"&CircleDot;\"], [0, \"&circledcirc;\"], [0, \"&circledast;\"], [1, \"&circleddash;\"], [0, \"&boxplus;\"], [0, \"&boxminus;\"], [0, \"&boxtimes;\"], [0, \"&dotsquare;\"], [0, \"&RightTee;\"], [0, \"&dashv;\"], [0, \"&DownTee;\"], [0, \"&bot;\"], [1, \"&models;\"], [0, \"&DoubleRightTee;\"], [0, \"&Vdash;\"], [0, \"&Vvdash;\"], [0, \"&VDash;\"], [0, \"&nvdash;\"], [0, \"&nvDash;\"], [0, \"&nVdash;\"], [0, \"&nVDash;\"], [0, \"&prurel;\"], [1, \"&LeftTriangle;\"], [0, \"&RightTriangle;\"], [0, {\n  v: \"&LeftTriangleEqual;\",\n  n: 8402,\n  o: \"&nvltrie;\"\n}], [0, {\n  v: \"&RightTriangleEqual;\",\n  n: 8402,\n  o: \"&nvrtrie;\"\n}], [0, \"&origof;\"], [0, \"&imof;\"], [0, \"&multimap;\"], [0, \"&hercon;\"], [0, \"&intcal;\"], [0, \"&veebar;\"], [1, \"&barvee;\"], [0, \"&angrtvb;\"], [0, \"&lrtri;\"], [0, \"&bigwedge;\"], [0, \"&bigvee;\"], [0, \"&bigcap;\"], [0, \"&bigcup;\"], [0, \"&diam;\"], [0, \"&sdot;\"], [0, \"&sstarf;\"], [0, \"&divideontimes;\"], [0, \"&bowtie;\"], [0, \"&ltimes;\"], [0, \"&rtimes;\"], [0, \"&leftthreetimes;\"], [0, \"&rightthreetimes;\"], [0, \"&backsimeq;\"], [0, \"&curlyvee;\"], [0, \"&curlywedge;\"], [0, \"&Sub;\"], [0, \"&Sup;\"], [0, \"&Cap;\"], [0, \"&Cup;\"], [0, \"&fork;\"], [0, \"&epar;\"], [0, \"&lessdot;\"], [0, \"&gtdot;\"], [0, {\n  v: \"&Ll;\",\n  n: 824,\n  o: \"&nLl;\"\n}], [0, {\n  v: \"&Gg;\",\n  n: 824,\n  o: \"&nGg;\"\n}], [0, {\n  v: \"&leg;\",\n  n: 65024,\n  o: \"&lesg;\"\n}], [0, {\n  v: \"&gel;\",\n  n: 65024,\n  o: \"&gesl;\"\n}], [2, \"&cuepr;\"], [0, \"&cuesc;\"], [0, \"&NotPrecedesSlantEqual;\"], [0, \"&NotSucceedsSlantEqual;\"], [0, \"&NotSquareSubsetEqual;\"], [0, \"&NotSquareSupersetEqual;\"], [2, \"&lnsim;\"], [0, \"&gnsim;\"], [0, \"&precnsim;\"], [0, \"&scnsim;\"], [0, \"&nltri;\"], [0, \"&NotRightTriangle;\"], [0, \"&nltrie;\"], [0, \"&NotRightTriangleEqual;\"], [0, \"&vellip;\"], [0, \"&ctdot;\"], [0, \"&utdot;\"], [0, \"&dtdot;\"], [0, \"&disin;\"], [0, \"&isinsv;\"], [0, \"&isins;\"], [0, {\n  v: \"&isindot;\",\n  n: 824,\n  o: \"&notindot;\"\n}], [0, \"&notinvc;\"], [0, \"&notinvb;\"], [1, {\n  v: \"&isinE;\",\n  n: 824,\n  o: \"&notinE;\"\n}], [0, \"&nisd;\"], [0, \"&xnis;\"], [0, \"&nis;\"], [0, \"&notnivc;\"], [0, \"&notnivb;\"], [6, \"&barwed;\"], [0, \"&Barwed;\"], [1, \"&lceil;\"], [0, \"&rceil;\"], [0, \"&LeftFloor;\"], [0, \"&rfloor;\"], [0, \"&drcrop;\"], [0, \"&dlcrop;\"], [0, \"&urcrop;\"], [0, \"&ulcrop;\"], [0, \"&bnot;\"], [1, \"&profline;\"], [0, \"&profsurf;\"], [1, \"&telrec;\"], [0, \"&target;\"], [5, \"&ulcorn;\"], [0, \"&urcorn;\"], [0, \"&dlcorn;\"], [0, \"&drcorn;\"], [2, \"&frown;\"], [0, \"&smile;\"], [9, \"&cylcty;\"], [0, \"&profalar;\"], [7, \"&topbot;\"], [6, \"&ovbar;\"], [1, \"&solbar;\"], [60, \"&angzarr;\"], [51, \"&lmoustache;\"], [0, \"&rmoustache;\"], [2, \"&OverBracket;\"], [0, \"&bbrk;\"], [0, \"&bbrktbrk;\"], [37, \"&OverParenthesis;\"], [0, \"&UnderParenthesis;\"], [0, \"&OverBrace;\"], [0, \"&UnderBrace;\"], [2, \"&trpezium;\"], [4, \"&elinters;\"], [59, \"&blank;\"], [164, \"&circledS;\"], [55, \"&boxh;\"], [1, \"&boxv;\"], [9, \"&boxdr;\"], [3, \"&boxdl;\"], [3, \"&boxur;\"], [3, \"&boxul;\"], [3, \"&boxvr;\"], [7, \"&boxvl;\"], [7, \"&boxhd;\"], [7, \"&boxhu;\"], [7, \"&boxvh;\"], [19, \"&boxH;\"], [0, \"&boxV;\"], [0, \"&boxdR;\"], [0, \"&boxDr;\"], [0, \"&boxDR;\"], [0, \"&boxdL;\"], [0, \"&boxDl;\"], [0, \"&boxDL;\"], [0, \"&boxuR;\"], [0, \"&boxUr;\"], [0, \"&boxUR;\"], [0, \"&boxuL;\"], [0, \"&boxUl;\"], [0, \"&boxUL;\"], [0, \"&boxvR;\"], [0, \"&boxVr;\"], [0, \"&boxVR;\"], [0, \"&boxvL;\"], [0, \"&boxVl;\"], [0, \"&boxVL;\"], [0, \"&boxHd;\"], [0, \"&boxhD;\"], [0, \"&boxHD;\"], [0, \"&boxHu;\"], [0, \"&boxhU;\"], [0, \"&boxHU;\"], [0, \"&boxvH;\"], [0, \"&boxVh;\"], [0, \"&boxVH;\"], [19, \"&uhblk;\"], [3, \"&lhblk;\"], [3, \"&block;\"], [8, \"&blk14;\"], [0, \"&blk12;\"], [0, \"&blk34;\"], [13, \"&square;\"], [8, \"&blacksquare;\"], [0, \"&EmptyVerySmallSquare;\"], [1, \"&rect;\"], [0, \"&marker;\"], [2, \"&fltns;\"], [1, \"&bigtriangleup;\"], [0, \"&blacktriangle;\"], [0, \"&triangle;\"], [2, \"&blacktriangleright;\"], [0, \"&rtri;\"], [3, \"&bigtriangledown;\"], [0, \"&blacktriangledown;\"], [0, \"&dtri;\"], [2, \"&blacktriangleleft;\"], [0, \"&ltri;\"], [6, \"&loz;\"], [0, \"&cir;\"], [32, \"&tridot;\"], [2, \"&bigcirc;\"], [8, \"&ultri;\"], [0, \"&urtri;\"], [0, \"&lltri;\"], [0, \"&EmptySmallSquare;\"], [0, \"&FilledSmallSquare;\"], [8, \"&bigstar;\"], [0, \"&star;\"], [7, \"&phone;\"], [49, \"&female;\"], [1, \"&male;\"], [29, \"&spades;\"], [2, \"&clubs;\"], [1, \"&hearts;\"], [0, \"&diamondsuit;\"], [3, \"&sung;\"], [2, \"&flat;\"], [0, \"&natural;\"], [0, \"&sharp;\"], [163, \"&check;\"], [3, \"&cross;\"], [8, \"&malt;\"], [21, \"&sext;\"], [33, \"&VerticalSeparator;\"], [25, \"&lbbrk;\"], [0, \"&rbbrk;\"], [84, \"&bsolhsub;\"], [0, \"&suphsol;\"], [28, \"&LeftDoubleBracket;\"], [0, \"&RightDoubleBracket;\"], [0, \"&lang;\"], [0, \"&rang;\"], [0, \"&Lang;\"], [0, \"&Rang;\"], [0, \"&loang;\"], [0, \"&roang;\"], [7, \"&longleftarrow;\"], [0, \"&longrightarrow;\"], [0, \"&longleftrightarrow;\"], [0, \"&DoubleLongLeftArrow;\"], [0, \"&DoubleLongRightArrow;\"], [0, \"&DoubleLongLeftRightArrow;\"], [1, \"&longmapsto;\"], [2, \"&dzigrarr;\"], [258, \"&nvlArr;\"], [0, \"&nvrArr;\"], [0, \"&nvHarr;\"], [0, \"&Map;\"], [6, \"&lbarr;\"], [0, \"&bkarow;\"], [0, \"&lBarr;\"], [0, \"&dbkarow;\"], [0, \"&drbkarow;\"], [0, \"&DDotrahd;\"], [0, \"&UpArrowBar;\"], [0, \"&DownArrowBar;\"], [2, \"&Rarrtl;\"], [2, \"&latail;\"], [0, \"&ratail;\"], [0, \"&lAtail;\"], [0, \"&rAtail;\"], [0, \"&larrfs;\"], [0, \"&rarrfs;\"], [0, \"&larrbfs;\"], [0, \"&rarrbfs;\"], [2, \"&nwarhk;\"], [0, \"&nearhk;\"], [0, \"&hksearow;\"], [0, \"&hkswarow;\"], [0, \"&nwnear;\"], [0, \"&nesear;\"], [0, \"&seswar;\"], [0, \"&swnwar;\"], [8, {\n  v: \"&rarrc;\",\n  n: 824,\n  o: \"&nrarrc;\"\n}], [1, \"&cudarrr;\"], [0, \"&ldca;\"], [0, \"&rdca;\"], [0, \"&cudarrl;\"], [0, \"&larrpl;\"], [2, \"&curarrm;\"], [0, \"&cularrp;\"], [7, \"&rarrpl;\"], [2, \"&harrcir;\"], [0, \"&Uarrocir;\"], [0, \"&lurdshar;\"], [0, \"&ldrushar;\"], [2, \"&LeftRightVector;\"], [0, \"&RightUpDownVector;\"], [0, \"&DownLeftRightVector;\"], [0, \"&LeftUpDownVector;\"], [0, \"&LeftVectorBar;\"], [0, \"&RightVectorBar;\"], [0, \"&RightUpVectorBar;\"], [0, \"&RightDownVectorBar;\"], [0, \"&DownLeftVectorBar;\"], [0, \"&DownRightVectorBar;\"], [0, \"&LeftUpVectorBar;\"], [0, \"&LeftDownVectorBar;\"], [0, \"&LeftTeeVector;\"], [0, \"&RightTeeVector;\"], [0, \"&RightUpTeeVector;\"], [0, \"&RightDownTeeVector;\"], [0, \"&DownLeftTeeVector;\"], [0, \"&DownRightTeeVector;\"], [0, \"&LeftUpTeeVector;\"], [0, \"&LeftDownTeeVector;\"], [0, \"&lHar;\"], [0, \"&uHar;\"], [0, \"&rHar;\"], [0, \"&dHar;\"], [0, \"&luruhar;\"], [0, \"&ldrdhar;\"], [0, \"&ruluhar;\"], [0, \"&rdldhar;\"], [0, \"&lharul;\"], [0, \"&llhard;\"], [0, \"&rharul;\"], [0, \"&lrhard;\"], [0, \"&udhar;\"], [0, \"&duhar;\"], [0, \"&RoundImplies;\"], [0, \"&erarr;\"], [0, \"&simrarr;\"], [0, \"&larrsim;\"], [0, \"&rarrsim;\"], [0, \"&rarrap;\"], [0, \"&ltlarr;\"], [1, \"&gtrarr;\"], [0, \"&subrarr;\"], [1, \"&suplarr;\"], [0, \"&lfisht;\"], [0, \"&rfisht;\"], [0, \"&ufisht;\"], [0, \"&dfisht;\"], [5, \"&lopar;\"], [0, \"&ropar;\"], [4, \"&lbrke;\"], [0, \"&rbrke;\"], [0, \"&lbrkslu;\"], [0, \"&rbrksld;\"], [0, \"&lbrksld;\"], [0, \"&rbrkslu;\"], [0, \"&langd;\"], [0, \"&rangd;\"], [0, \"&lparlt;\"], [0, \"&rpargt;\"], [0, \"&gtlPar;\"], [0, \"&ltrPar;\"], [3, \"&vzigzag;\"], [1, \"&vangrt;\"], [0, \"&angrtvbd;\"], [6, \"&ange;\"], [0, \"&range;\"], [0, \"&dwangle;\"], [0, \"&uwangle;\"], [0, \"&angmsdaa;\"], [0, \"&angmsdab;\"], [0, \"&angmsdac;\"], [0, \"&angmsdad;\"], [0, \"&angmsdae;\"], [0, \"&angmsdaf;\"], [0, \"&angmsdag;\"], [0, \"&angmsdah;\"], [0, \"&bemptyv;\"], [0, \"&demptyv;\"], [0, \"&cemptyv;\"], [0, \"&raemptyv;\"], [0, \"&laemptyv;\"], [0, \"&ohbar;\"], [0, \"&omid;\"], [0, \"&opar;\"], [1, \"&operp;\"], [1, \"&olcross;\"], [0, \"&odsold;\"], [1, \"&olcir;\"], [0, \"&ofcir;\"], [0, \"&olt;\"], [0, \"&ogt;\"], [0, \"&cirscir;\"], [0, \"&cirE;\"], [0, \"&solb;\"], [0, \"&bsolb;\"], [3, \"&boxbox;\"], [3, \"&trisb;\"], [0, \"&rtriltri;\"], [0, {\n  v: \"&LeftTriangleBar;\",\n  n: 824,\n  o: \"&NotLeftTriangleBar;\"\n}], [0, {\n  v: \"&RightTriangleBar;\",\n  n: 824,\n  o: \"&NotRightTriangleBar;\"\n}], [11, \"&iinfin;\"], [0, \"&infintie;\"], [0, \"&nvinfin;\"], [4, \"&eparsl;\"], [0, \"&smeparsl;\"], [0, \"&eqvparsl;\"], [5, \"&blacklozenge;\"], [8, \"&RuleDelayed;\"], [1, \"&dsol;\"], [9, \"&bigodot;\"], [0, \"&bigoplus;\"], [0, \"&bigotimes;\"], [1, \"&biguplus;\"], [1, \"&bigsqcup;\"], [5, \"&iiiint;\"], [0, \"&fpartint;\"], [2, \"&cirfnint;\"], [0, \"&awint;\"], [0, \"&rppolint;\"], [0, \"&scpolint;\"], [0, \"&npolint;\"], [0, \"&pointint;\"], [0, \"&quatint;\"], [0, \"&intlarhk;\"], [10, \"&pluscir;\"], [0, \"&plusacir;\"], [0, \"&simplus;\"], [0, \"&plusdu;\"], [0, \"&plussim;\"], [0, \"&plustwo;\"], [1, \"&mcomma;\"], [0, \"&minusdu;\"], [2, \"&loplus;\"], [0, \"&roplus;\"], [0, \"&Cross;\"], [0, \"&timesd;\"], [0, \"&timesbar;\"], [1, \"&smashp;\"], [0, \"&lotimes;\"], [0, \"&rotimes;\"], [0, \"&otimesas;\"], [0, \"&Otimes;\"], [0, \"&odiv;\"], [0, \"&triplus;\"], [0, \"&triminus;\"], [0, \"&tritime;\"], [0, \"&intprod;\"], [2, \"&amalg;\"], [0, \"&capdot;\"], [1, \"&ncup;\"], [0, \"&ncap;\"], [0, \"&capand;\"], [0, \"&cupor;\"], [0, \"&cupcap;\"], [0, \"&capcup;\"], [0, \"&cupbrcap;\"], [0, \"&capbrcup;\"], [0, \"&cupcup;\"], [0, \"&capcap;\"], [0, \"&ccups;\"], [0, \"&ccaps;\"], [2, \"&ccupssm;\"], [2, \"&And;\"], [0, \"&Or;\"], [0, \"&andand;\"], [0, \"&oror;\"], [0, \"&orslope;\"], [0, \"&andslope;\"], [1, \"&andv;\"], [0, \"&orv;\"], [0, \"&andd;\"], [0, \"&ord;\"], [1, \"&wedbar;\"], [6, \"&sdote;\"], [3, \"&simdot;\"], [2, {\n  v: \"&congdot;\",\n  n: 824,\n  o: \"&ncongdot;\"\n}], [0, \"&easter;\"], [0, \"&apacir;\"], [0, {\n  v: \"&apE;\",\n  n: 824,\n  o: \"&napE;\"\n}], [0, \"&eplus;\"], [0, \"&pluse;\"], [0, \"&Esim;\"], [0, \"&Colone;\"], [0, \"&Equal;\"], [1, \"&ddotseq;\"], [0, \"&equivDD;\"], [0, \"&ltcir;\"], [0, \"&gtcir;\"], [0, \"&ltquest;\"], [0, \"&gtquest;\"], [0, {\n  v: \"&leqslant;\",\n  n: 824,\n  o: \"&nleqslant;\"\n}], [0, {\n  v: \"&geqslant;\",\n  n: 824,\n  o: \"&ngeqslant;\"\n}], [0, \"&lesdot;\"], [0, \"&gesdot;\"], [0, \"&lesdoto;\"], [0, \"&gesdoto;\"], [0, \"&lesdotor;\"], [0, \"&gesdotol;\"], [0, \"&lap;\"], [0, \"&gap;\"], [0, \"&lne;\"], [0, \"&gne;\"], [0, \"&lnap;\"], [0, \"&gnap;\"], [0, \"&lEg;\"], [0, \"&gEl;\"], [0, \"&lsime;\"], [0, \"&gsime;\"], [0, \"&lsimg;\"], [0, \"&gsiml;\"], [0, \"&lgE;\"], [0, \"&glE;\"], [0, \"&lesges;\"], [0, \"&gesles;\"], [0, \"&els;\"], [0, \"&egs;\"], [0, \"&elsdot;\"], [0, \"&egsdot;\"], [0, \"&el;\"], [0, \"&eg;\"], [2, \"&siml;\"], [0, \"&simg;\"], [0, \"&simlE;\"], [0, \"&simgE;\"], [0, {\n  v: \"&LessLess;\",\n  n: 824,\n  o: \"&NotNestedLessLess;\"\n}], [0, {\n  v: \"&GreaterGreater;\",\n  n: 824,\n  o: \"&NotNestedGreaterGreater;\"\n}], [1, \"&glj;\"], [0, \"&gla;\"], [0, \"&ltcc;\"], [0, \"&gtcc;\"], [0, \"&lescc;\"], [0, \"&gescc;\"], [0, \"&smt;\"], [0, \"&lat;\"], [0, {\n  v: \"&smte;\",\n  n: 65024,\n  o: \"&smtes;\"\n}], [0, {\n  v: \"&late;\",\n  n: 65024,\n  o: \"&lates;\"\n}], [0, \"&bumpE;\"], [0, {\n  v: \"&PrecedesEqual;\",\n  n: 824,\n  o: \"&NotPrecedesEqual;\"\n}], [0, {\n  v: \"&sce;\",\n  n: 824,\n  o: \"&NotSucceedsEqual;\"\n}], [2, \"&prE;\"], [0, \"&scE;\"], [0, \"&precneqq;\"], [0, \"&scnE;\"], [0, \"&prap;\"], [0, \"&scap;\"], [0, \"&precnapprox;\"], [0, \"&scnap;\"], [0, \"&Pr;\"], [0, \"&Sc;\"], [0, \"&subdot;\"], [0, \"&supdot;\"], [0, \"&subplus;\"], [0, \"&supplus;\"], [0, \"&submult;\"], [0, \"&supmult;\"], [0, \"&subedot;\"], [0, \"&supedot;\"], [0, {\n  v: \"&subE;\",\n  n: 824,\n  o: \"&nsubE;\"\n}], [0, {\n  v: \"&supE;\",\n  n: 824,\n  o: \"&nsupE;\"\n}], [0, \"&subsim;\"], [0, \"&supsim;\"], [2, {\n  v: \"&subnE;\",\n  n: 65024,\n  o: \"&varsubsetneqq;\"\n}], [0, {\n  v: \"&supnE;\",\n  n: 65024,\n  o: \"&varsupsetneqq;\"\n}], [2, \"&csub;\"], [0, \"&csup;\"], [0, \"&csube;\"], [0, \"&csupe;\"], [0, \"&subsup;\"], [0, \"&supsub;\"], [0, \"&subsub;\"], [0, \"&supsup;\"], [0, \"&suphsub;\"], [0, \"&supdsub;\"], [0, \"&forkv;\"], [0, \"&topfork;\"], [0, \"&mlcp;\"], [8, \"&Dashv;\"], [1, \"&Vdashl;\"], [0, \"&Barv;\"], [0, \"&vBar;\"], [0, \"&vBarv;\"], [1, \"&Vbar;\"], [0, \"&Not;\"], [0, \"&bNot;\"], [0, \"&rnmid;\"], [0, \"&cirmid;\"], [0, \"&midcir;\"], [0, \"&topcir;\"], [0, \"&nhpar;\"], [0, \"&parsim;\"], [9, {\n  v: \"&parsl;\",\n  n: 8421,\n  o: \"&nparsl;\"\n}], [44343, {\n  n: new Map( /* #__PURE__ */restoreDiff([[56476, \"&Ascr;\"], [1, \"&Cscr;\"], [0, \"&Dscr;\"], [2, \"&Gscr;\"], [2, \"&Jscr;\"], [0, \"&Kscr;\"], [2, \"&Nscr;\"], [0, \"&Oscr;\"], [0, \"&Pscr;\"], [0, \"&Qscr;\"], [1, \"&Sscr;\"], [0, \"&Tscr;\"], [0, \"&Uscr;\"], [0, \"&Vscr;\"], [0, \"&Wscr;\"], [0, \"&Xscr;\"], [0, \"&Yscr;\"], [0, \"&Zscr;\"], [0, \"&ascr;\"], [0, \"&bscr;\"], [0, \"&cscr;\"], [0, \"&dscr;\"], [1, \"&fscr;\"], [1, \"&hscr;\"], [0, \"&iscr;\"], [0, \"&jscr;\"], [0, \"&kscr;\"], [0, \"&lscr;\"], [0, \"&mscr;\"], [0, \"&nscr;\"], [1, \"&pscr;\"], [0, \"&qscr;\"], [0, \"&rscr;\"], [0, \"&sscr;\"], [0, \"&tscr;\"], [0, \"&uscr;\"], [0, \"&vscr;\"], [0, \"&wscr;\"], [0, \"&xscr;\"], [0, \"&yscr;\"], [0, \"&zscr;\"], [52, \"&Afr;\"], [0, \"&Bfr;\"], [1, \"&Dfr;\"], [0, \"&Efr;\"], [0, \"&Ffr;\"], [0, \"&Gfr;\"], [2, \"&Jfr;\"], [0, \"&Kfr;\"], [0, \"&Lfr;\"], [0, \"&Mfr;\"], [0, \"&Nfr;\"], [0, \"&Ofr;\"], [0, \"&Pfr;\"], [0, \"&Qfr;\"], [1, \"&Sfr;\"], [0, \"&Tfr;\"], [0, \"&Ufr;\"], [0, \"&Vfr;\"], [0, \"&Wfr;\"], [0, \"&Xfr;\"], [0, \"&Yfr;\"], [1, \"&afr;\"], [0, \"&bfr;\"], [0, \"&cfr;\"], [0, \"&dfr;\"], [0, \"&efr;\"], [0, \"&ffr;\"], [0, \"&gfr;\"], [0, \"&hfr;\"], [0, \"&ifr;\"], [0, \"&jfr;\"], [0, \"&kfr;\"], [0, \"&lfr;\"], [0, \"&mfr;\"], [0, \"&nfr;\"], [0, \"&ofr;\"], [0, \"&pfr;\"], [0, \"&qfr;\"], [0, \"&rfr;\"], [0, \"&sfr;\"], [0, \"&tfr;\"], [0, \"&ufr;\"], [0, \"&vfr;\"], [0, \"&wfr;\"], [0, \"&xfr;\"], [0, \"&yfr;\"], [0, \"&zfr;\"], [0, \"&Aopf;\"], [0, \"&Bopf;\"], [1, \"&Dopf;\"], [0, \"&Eopf;\"], [0, \"&Fopf;\"], [0, \"&Gopf;\"], [1, \"&Iopf;\"], [0, \"&Jopf;\"], [0, \"&Kopf;\"], [0, \"&Lopf;\"], [0, \"&Mopf;\"], [1, \"&Oopf;\"], [3, \"&Sopf;\"], [0, \"&Topf;\"], [0, \"&Uopf;\"], [0, \"&Vopf;\"], [0, \"&Wopf;\"], [0, \"&Xopf;\"], [0, \"&Yopf;\"], [1, \"&aopf;\"], [0, \"&bopf;\"], [0, \"&copf;\"], [0, \"&dopf;\"], [0, \"&eopf;\"], [0, \"&fopf;\"], [0, \"&gopf;\"], [0, \"&hopf;\"], [0, \"&iopf;\"], [0, \"&jopf;\"], [0, \"&kopf;\"], [0, \"&lopf;\"], [0, \"&mopf;\"], [0, \"&nopf;\"], [0, \"&oopf;\"], [0, \"&popf;\"], [0, \"&qopf;\"], [0, \"&ropf;\"], [0, \"&sopf;\"], [0, \"&topf;\"], [0, \"&uopf;\"], [0, \"&vopf;\"], [0, \"&wopf;\"], [0, \"&xopf;\"], [0, \"&yopf;\"], [0, \"&zopf;\"]]))\n}], [8906, \"&fflig;\"], [0, \"&filig;\"], [0, \"&fllig;\"], [0, \"&ffilig;\"], [0, \"&ffllig;\"]]));\n", "export const xmlReplacer = /[\"&'<>$\\x80-\\uFFFF]/g;\nconst xmlCodeMap = new Map([[34, \"&quot;\"], [38, \"&amp;\"], [39, \"&apos;\"], [60, \"&lt;\"], [62, \"&gt;\"]]);\n// For compatibility with node < 4, we wrap `codePointAt`\nexport const getCodePoint =\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.prototype.codePointAt != null ? (str, index) => str.codePointAt(index) :\n// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n(c, index) => (c.charCodeAt(index) & 0xfc00) === 0xd800 ? (c.charCodeAt(index) - 0xd800) * 0x400 + c.charCodeAt(index + 1) - 0xdc00 + 0x10000 : c.charCodeAt(index);\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using XML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexport function encodeXML(str) {\n  let ret = \"\";\n  let lastIdx = 0;\n  let match;\n  while ((match = xmlReplacer.exec(str)) !== null) {\n    const i = match.index;\n    const char = str.charCodeAt(i);\n    const next = xmlCodeMap.get(char);\n    if (next !== undefined) {\n      ret += str.substring(lastIdx, i) + next;\n      lastIdx = i + 1;\n    } else {\n      ret += `${str.substring(lastIdx, i)}&#x${getCodePoint(str, i).toString(16)};`;\n      // Increase by 1 if we have a surrogate pair\n      lastIdx = xmlReplacer.lastIndex += Number((char & 0xfc00) === 0xd800);\n    }\n  }\n  return ret + str.substr(lastIdx);\n}\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n *\n * Have a look at `escapeUTF8` if you want a more concise output at the expense\n * of reduced transportability.\n *\n * @param data String to escape.\n */\nexport const escape = encodeXML;\n/**\n * Creates a function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n *\n * @param regex Regular expression to match characters to escape.\n * @param map Map of characters to escape to their entities.\n *\n * @returns Function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n */\nfunction getEscaper(regex, map) {\n  return function escape(data) {\n    let match;\n    let lastIdx = 0;\n    let result = \"\";\n    while (match = regex.exec(data)) {\n      if (lastIdx !== match.index) {\n        result += data.substring(lastIdx, match.index);\n      }\n      // We know that this character will be in the map.\n      result += map.get(match[0].charCodeAt(0));\n      // Every match will be of length 1\n      lastIdx = match.index + 1;\n    }\n    return result + data.substring(lastIdx);\n  };\n}\n/**\n * Encodes all characters not valid in XML documents using XML entities.\n *\n * Note that the output will be character-set dependent.\n *\n * @param data String to escape.\n */\nexport const escapeUTF8 = getEscaper(/[&<>'\"]/g, xmlCodeMap);\n/**\n * Encodes all characters that have to be escaped in HTML attributes,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */\nexport const escapeAttribute = getEscaper(/[\"&\\u00A0]/g, new Map([[34, \"&quot;\"], [38, \"&amp;\"], [160, \"&nbsp;\"]]));\n/**\n * Encodes all characters that have to be escaped in HTML text,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */\nexport const escapeText = getEscaper(/[&<>\\u00A0]/g, new Map([[38, \"&amp;\"], [60, \"&lt;\"], [62, \"&gt;\"], [160, \"&nbsp;\"]]));\n", "import { decodeXML, decodeHTML, DecodingMode } from \"./decode.js\";\nimport { encodeHTML, encodeNonAsciiHTML } from \"./encode.js\";\nimport { encodeXML, escapeUTF8, escapeAttribute, escapeText } from \"./escape.js\";\n/** The level of entities to support. */\nexport var EntityLevel;\n(function (EntityLevel) {\n  /** Support only XML entities. */\n  EntityLevel[EntityLevel[\"XML\"] = 0] = \"XML\";\n  /** Support HTML entities, which are a superset of XML entities. */\n  EntityLevel[EntityLevel[\"HTML\"] = 1] = \"HTML\";\n})(EntityLevel || (EntityLevel = {}));\nexport var EncodingMode;\n(function (EncodingMode) {\n  /**\n   * The output is UTF-8 encoded. Only characters that need escaping within\n   * XML will be escaped.\n   */\n  EncodingMode[EncodingMode[\"UTF8\"] = 0] = \"UTF8\";\n  /**\n   * The output consists only of ASCII characters. Characters that need\n   * escaping within HTML, and characters that aren't ASCII characters will\n   * be escaped.\n   */\n  EncodingMode[EncodingMode[\"ASCII\"] = 1] = \"ASCII\";\n  /**\n   * Encode all characters that have an equivalent entity, as well as all\n   * characters that are not ASCII characters.\n   */\n  EncodingMode[EncodingMode[\"Extensive\"] = 2] = \"Extensive\";\n  /**\n   * Encode all characters that have to be escaped in HTML attributes,\n   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n   */\n  EncodingMode[EncodingMode[\"Attribute\"] = 3] = \"Attribute\";\n  /**\n   * Encode all characters that have to be escaped in HTML text,\n   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n   */\n  EncodingMode[EncodingMode[\"Text\"] = 4] = \"Text\";\n})(EncodingMode || (EncodingMode = {}));\n/**\n * Decodes a string with entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n */\nexport function decode(data, options = EntityLevel.XML) {\n  const level = typeof options === \"number\" ? options : options.level;\n  if (level === EntityLevel.HTML) {\n    const mode = typeof options === \"object\" ? options.mode : undefined;\n    return decodeHTML(data, mode);\n  }\n  return decodeXML(data);\n}\n/**\n * Decodes a string with entities. Does not allow missing trailing semicolons for entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n * @deprecated Use `decode` with the `mode` set to `Strict`.\n */\nexport function decodeStrict(data, options = EntityLevel.XML) {\n  var _a;\n  const opts = typeof options === \"number\" ? {\n    level: options\n  } : options;\n  (_a = opts.mode) !== null && _a !== void 0 ? _a : opts.mode = DecodingMode.Strict;\n  return decode(data, opts);\n}\n/**\n * Encodes a string with entities.\n *\n * @param data String to encode.\n * @param options Encoding options.\n */\nexport function encode(data, options = EntityLevel.XML) {\n  const opts = typeof options === \"number\" ? {\n    level: options\n  } : options;\n  // Mode `UTF8` just escapes XML entities\n  if (opts.mode === EncodingMode.UTF8) return escapeUTF8(data);\n  if (opts.mode === EncodingMode.Attribute) return escapeAttribute(data);\n  if (opts.mode === EncodingMode.Text) return escapeText(data);\n  if (opts.level === EntityLevel.HTML) {\n    if (opts.mode === EncodingMode.ASCII) {\n      return encodeNonAsciiHTML(data);\n    }\n    return encodeHTML(data);\n  }\n  // ASCII and Extensive are equivalent\n  return encodeXML(data);\n}\nexport { encodeXML, escape, escapeUTF8, escapeAttribute, escapeText } from \"./escape.js\";\nexport { encodeHTML, encodeNonAsciiHTML,\n// Legacy aliases (deprecated)\nencodeHTML as encodeHTML4, encodeHTML as encodeHTML5 } from \"./encode.js\";\nexport { EntityDecoder, DecodingMode, decodeXML, decodeHTML, decodeHTMLStrict, decodeHTMLAttribute,\n// Legacy aliases (deprecated)\ndecodeHTML as decodeHTML4, decodeHTML as decodeHTML5, decodeHTMLStrict as decodeHTML4Strict, decodeHTMLStrict as decodeHTML5Strict, decodeXML as decodeXMLStrict } from \"./decode.js\";\n", "export const elementNames = new Map([\"altGlyph\", \"altGlyphDef\", \"altGlyphItem\", \"animateColor\", \"animateMotion\", \"animateTransform\", \"clipPath\", \"feBlend\", \"feColorMatrix\", \"feComponentTransfer\", \"feComposite\", \"feConvolveMatrix\", \"feDiffuseLighting\", \"feDisplacementMap\", \"feDistantLight\", \"feDropShadow\", \"feFlood\", \"feFuncA\", \"feFuncB\", \"feFuncG\", \"feFuncR\", \"feGaussianBlur\", \"feImage\", \"feMerge\", \"feMergeNode\", \"feMorphology\", \"feOffset\", \"fePointLight\", \"feSpecularLighting\", \"feSpotLight\", \"feTile\", \"feTurbulence\", \"foreignObject\", \"glyphRef\", \"linearGradient\", \"radialGradient\", \"textPath\"].map(val => [val.toLowerCase(), val]));\nexport const attributeNames = new Map([\"definitionURL\", \"attributeName\", \"attributeType\", \"baseFrequency\", \"baseProfile\", \"calcMode\", \"clipPathUnits\", \"diffuseConstant\", \"edgeMode\", \"filterUnits\", \"glyphRef\", \"gradientTransform\", \"gradientUnits\", \"kernelMatrix\", \"kernelUnitLength\", \"keyPoints\", \"keySplines\", \"keyTimes\", \"lengthAdjust\", \"limitingConeAngle\", \"markerHeight\", \"markerUnits\", \"markerWidth\", \"maskContentUnits\", \"maskUnits\", \"numOctaves\", \"pathLength\", \"patternContentUnits\", \"patternTransform\", \"patternUnits\", \"pointsAtX\", \"pointsAtY\", \"pointsAtZ\", \"preserveAlpha\", \"preserveAspectRatio\", \"primitiveUnits\", \"refX\", \"refY\", \"repeatCount\", \"repeatDur\", \"requiredExtensions\", \"requiredFeatures\", \"specularConstant\", \"specularExponent\", \"spreadMethod\", \"startOffset\", \"stdDeviation\", \"stitchTiles\", \"surfaceScale\", \"systemLanguage\", \"tableValues\", \"targetX\", \"targetY\", \"textLength\", \"viewBox\", \"viewTarget\", \"xChannelSelector\", \"yChannelSelector\", \"zoomAndPan\"].map(val => [val.toLowerCase(), val]));", "/*\n * Module dependencies\n */\nimport * as ElementType from \"domelementtype\";\nimport { encodeXML, escapeAttribute, escapeText } from \"entities\";\n/**\n * Mixed-case SVG and MathML tags & attributes\n * recognized by the HTML parser.\n *\n * @see https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign\n */\nimport { elementNames, attributeNames } from \"./foreignNames.js\";\nconst unencodedElements = new Set([\"style\", \"script\", \"xmp\", \"iframe\", \"noembed\", \"noframes\", \"plaintext\", \"noscript\"]);\nfunction replaceQuotes(value) {\n  return value.replace(/\"/g, \"&quot;\");\n}\n/**\n * Format attributes\n */\nfunction formatAttributes(attributes, opts) {\n  var _a;\n  if (!attributes) return;\n  const encode = ((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) === false ? replaceQuotes : opts.xmlMode || opts.encodeEntities !== \"utf8\" ? encodeXML : escapeAttribute;\n  return Object.keys(attributes).map(key => {\n    var _a, _b;\n    const value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : \"\";\n    if (opts.xmlMode === \"foreign\") {\n      /* Fix up mixed-case attribute names */\n      key = (_b = attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;\n    }\n    if (!opts.emptyAttrs && !opts.xmlMode && value === \"\") {\n      return key;\n    }\n    return `${key}=\"${encode(value)}\"`;\n  }).join(\" \");\n}\n/**\n * Self-enclosing tags\n */\nconst singleTag = new Set([\"area\", \"base\", \"basefont\", \"br\", \"col\", \"command\", \"embed\", \"frame\", \"hr\", \"img\", \"input\", \"isindex\", \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"]);\n/**\n * Renders a DOM node or an array of DOM nodes to a string.\n *\n * Can be thought of as the equivalent of the `outerHTML` of the passed node(s).\n *\n * @param node Node to be rendered.\n * @param options Changes serialization behavior\n */\nexport function render(node, options = {}) {\n  const nodes = \"length\" in node ? node : [node];\n  let output = \"\";\n  for (let i = 0; i < nodes.length; i++) {\n    output += renderNode(nodes[i], options);\n  }\n  return output;\n}\nexport default render;\nfunction renderNode(node, options) {\n  switch (node.type) {\n    case ElementType.Root:\n      return render(node.children, options);\n    // @ts-expect-error We don't use `Doctype` yet\n    case ElementType.Doctype:\n    case ElementType.Directive:\n      return renderDirective(node);\n    case ElementType.Comment:\n      return renderComment(node);\n    case ElementType.CDATA:\n      return renderCdata(node);\n    case ElementType.Script:\n    case ElementType.Style:\n    case ElementType.Tag:\n      return renderTag(node, options);\n    case ElementType.Text:\n      return renderText(node, options);\n  }\n}\nconst foreignModeIntegrationPoints = new Set([\"mi\", \"mo\", \"mn\", \"ms\", \"mtext\", \"annotation-xml\", \"foreignObject\", \"desc\", \"title\"]);\nconst foreignElements = new Set([\"svg\", \"math\"]);\nfunction renderTag(elem, opts) {\n  var _a;\n  // Handle SVG / MathML in HTML\n  if (opts.xmlMode === \"foreign\") {\n    /* Fix up mixed-case element names */\n    elem.name = (_a = elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;\n    /* Exit foreign mode at integration points */\n    if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) {\n      opts = {\n        ...opts,\n        xmlMode: false\n      };\n    }\n  }\n  if (!opts.xmlMode && foreignElements.has(elem.name)) {\n    opts = {\n      ...opts,\n      xmlMode: \"foreign\"\n    };\n  }\n  let tag = `<${elem.name}`;\n  const attribs = formatAttributes(elem.attribs, opts);\n  if (attribs) {\n    tag += ` ${attribs}`;\n  }\n  if (elem.children.length === 0 && (opts.xmlMode ?\n  // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags\n  opts.selfClosingTags !== false :\n  // User explicitly asked for self-closing tags, even in HTML mode\n  opts.selfClosingTags && singleTag.has(elem.name))) {\n    if (!opts.xmlMode) tag += \" \";\n    tag += \"/>\";\n  } else {\n    tag += \">\";\n    if (elem.children.length > 0) {\n      tag += render(elem.children, opts);\n    }\n    if (opts.xmlMode || !singleTag.has(elem.name)) {\n      tag += `</${elem.name}>`;\n    }\n  }\n  return tag;\n}\nfunction renderDirective(elem) {\n  return `<${elem.data}>`;\n}\nfunction renderText(elem, opts) {\n  var _a;\n  let data = elem.data || \"\";\n  // If entities weren't decoded, no need to encode them back\n  if (((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) !== false && !(!opts.xmlMode && elem.parent && unencodedElements.has(elem.parent.name))) {\n    data = opts.xmlMode || opts.encodeEntities !== \"utf8\" ? encodeXML(data) : escapeText(data);\n  }\n  return data;\n}\nfunction renderCdata(elem) {\n  return `<![CDATA[${elem.children[0].data}]]>`;\n}\nfunction renderComment(elem) {\n  return `<!--${elem.data}-->`;\n}", "import { hasChildren } from \"domhandler\";\n/**\n * Given an array of nodes, remove any member that is contained by another\n * member.\n *\n * @category Helpers\n * @param nodes Nodes to filter.\n * @returns Remaining nodes that aren't contained by other nodes.\n */\nexport function removeSubsets(nodes) {\n  let idx = nodes.length;\n  /*\n   * Check if each node (or one of its ancestors) is already contained in the\n   * array.\n   */\n  while (--idx >= 0) {\n    const node = nodes[idx];\n    /*\n     * Remove the node if it is not unique.\n     * We are going through the array from the end, so we only\n     * have to check nodes that preceed the node under consideration in the array.\n     */\n    if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {\n      nodes.splice(idx, 1);\n      continue;\n    }\n    for (let ancestor = node.parent; ancestor; ancestor = ancestor.parent) {\n      if (nodes.includes(ancestor)) {\n        nodes.splice(idx, 1);\n        break;\n      }\n    }\n  }\n  return nodes;\n}\n/**\n * @category Helpers\n * @see {@link http://dom.spec.whatwg.org/#dom-node-comparedocumentposition}\n */\nexport var DocumentPosition;\n(function (DocumentPosition) {\n  DocumentPosition[DocumentPosition[\"DISCONNECTED\"] = 1] = \"DISCONNECTED\";\n  DocumentPosition[DocumentPosition[\"PRECEDING\"] = 2] = \"PRECEDING\";\n  DocumentPosition[DocumentPosition[\"FOLLOWING\"] = 4] = \"FOLLOWING\";\n  DocumentPosition[DocumentPosition[\"CONTAINS\"] = 8] = \"CONTAINS\";\n  DocumentPosition[DocumentPosition[\"CONTAINED_BY\"] = 16] = \"CONTAINED_BY\";\n})(DocumentPosition || (DocumentPosition = {}));\n/**\n * Compare the position of one node against another node in any other document,\n * returning a bitmask with the values from {@link DocumentPosition}.\n *\n * Document order:\n * > There is an ordering, document order, defined on all the nodes in the\n * > document corresponding to the order in which the first character of the\n * > XML representation of each node occurs in the XML representation of the\n * > document after expansion of general entities. Thus, the document element\n * > node will be the first node. Element nodes occur before their children.\n * > Thus, document order orders element nodes in order of the occurrence of\n * > their start-tag in the XML (after expansion of entities). The attribute\n * > nodes of an element occur after the element and before its children. The\n * > relative order of attribute nodes is implementation-dependent.\n *\n * Source:\n * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order\n *\n * @category Helpers\n * @param nodeA The first node to use in the comparison\n * @param nodeB The second node to use in the comparison\n * @returns A bitmask describing the input nodes' relative position.\n *\n * See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for\n * a description of these values.\n */\nexport function compareDocumentPosition(nodeA, nodeB) {\n  const aParents = [];\n  const bParents = [];\n  if (nodeA === nodeB) {\n    return 0;\n  }\n  let current = hasChildren(nodeA) ? nodeA : nodeA.parent;\n  while (current) {\n    aParents.unshift(current);\n    current = current.parent;\n  }\n  current = hasChildren(nodeB) ? nodeB : nodeB.parent;\n  while (current) {\n    bParents.unshift(current);\n    current = current.parent;\n  }\n  const maxIdx = Math.min(aParents.length, bParents.length);\n  let idx = 0;\n  while (idx < maxIdx && aParents[idx] === bParents[idx]) {\n    idx++;\n  }\n  if (idx === 0) {\n    return DocumentPosition.DISCONNECTED;\n  }\n  const sharedParent = aParents[idx - 1];\n  const siblings = sharedParent.children;\n  const aSibling = aParents[idx];\n  const bSibling = bParents[idx];\n  if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {\n    if (sharedParent === nodeB) {\n      return DocumentPosition.FOLLOWING | DocumentPosition.CONTAINED_BY;\n    }\n    return DocumentPosition.FOLLOWING;\n  }\n  if (sharedParent === nodeA) {\n    return DocumentPosition.PRECEDING | DocumentPosition.CONTAINS;\n  }\n  return DocumentPosition.PRECEDING;\n}\n/**\n * Sort an array of nodes based on their relative position in the document,\n * removing any duplicate nodes. If the array contains nodes that do not belong\n * to the same document, sort order is unspecified.\n *\n * @category Helpers\n * @param nodes Array of DOM nodes.\n * @returns Collection of unique nodes, sorted in document order.\n */\nexport function uniqueSort(nodes) {\n  nodes = nodes.filter((node, i, arr) => !arr.includes(node, i + 1));\n  nodes.sort((a, b) => {\n    const relative = compareDocumentPosition(a, b);\n    if (relative & DocumentPosition.PRECEDING) {\n      return -1;\n    } else if (relative & DocumentPosition.FOLLOWING) {\n      return 1;\n    }\n    return 0;\n  });\n  return nodes;\n}\n", "import { Parser } from \"./Parser.js\";\nexport { Parser } from \"./Parser.js\";\nimport { DomHandler } from \"domhandler\";\nexport { DomHandler,\n// Old name for DomHandler\nDomHandler as DefaultHandler } from \"domhandler\";\n// Helper methods\n/**\n * Parses the data, returns the resulting document.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n */\nexport function parseDocument(data, options) {\n  const handler = new DomHandler(undefined, options);\n  new Parser(handler, options).end(data);\n  return handler.root;\n}\n/**\n * Parses data, returns an array of the root nodes.\n *\n * Note that the root nodes still have a `Document` node as their parent.\n * Use `parseDocument` to get the `Document` node instead.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n * @deprecated Use `parseDocument` instead.\n */\nexport function parseDOM(data, options) {\n  return parseDocument(data, options).children;\n}\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param callback A callback that will be called once parsing has been completed.\n * @param options Optional options for the parser and DOM builder.\n * @param elementCallback An optional callback that will be called every time a tag has been completed inside of the DOM.\n */\nexport function createDomStream(callback, options, elementCallback) {\n  const handler = new DomHandler(callback, options, elementCallback);\n  return new Parser(handler, options);\n}\nexport { default as Tokenizer } from \"./Tokenizer.js\";\n/*\n * All of the following exports exist for backwards-compatibility.\n * They should probably be removed eventually.\n */\nexport * as ElementType from \"domelementtype\";\nimport { getFeed } from \"domutils\";\nexport { getFeed } from \"domutils\";\nconst parseFeedDefaultOptions = {\n  xmlMode: true\n};\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.\n */\nexport function parseFeed(feed, options = parseFeedDefaultOptions) {\n  return getFeed(parseDOM(feed, options));\n}\nexport * as DomUtils from \"domutils\";\n", "import { hp2Builder } from '@selderee/plugin-htmlparser2';\nimport { parseDocument } from 'htmlparser2';\nimport { DecisionTree } from 'selderee';\nimport merge from 'deepmerge';\nimport { render } from 'dom-serializer';\n\n/**\n * Make a recursive function that will only run to a given depth\n * and switches to an alternative function at that depth. \\\n * No limitation if `n` is `undefined` (Just wraps `f` in that case).\n *\n * @param   { number | undefined } n   Allowed depth of recursion. `undefined` for no limitation.\n * @param   { Function }           f   Function that accepts recursive callback as the first argument.\n * @param   { Function }           [g] Function to run instead, when maximum depth was reached. Do nothing by default.\n * @returns { Function }\n */\nfunction limitedDepthRecursive(n, f, g = () => undefined) {\n  if (n === undefined) {\n    const f1 = function (...args) {\n      return f(f1, ...args);\n    };\n    return f1;\n  }\n  if (n >= 0) {\n    return function (...args) {\n      return f(limitedDepthRecursive(n - 1, f, g), ...args);\n    };\n  }\n  return g;\n}\n\n/**\n * Return the same string or a substring with\n * the given character occurrences removed from each side.\n *\n * @param   { string } str  A string to trim.\n * @param   { string } char A character to be trimmed.\n * @returns { string }\n */\nfunction trimCharacter(str, char) {\n  let start = 0;\n  let end = str.length;\n  while (start < end && str[start] === char) {\n    ++start;\n  }\n  while (end > start && str[end - 1] === char) {\n    --end;\n  }\n  return start > 0 || end < str.length ? str.substring(start, end) : str;\n}\n\n/**\n * Return the same string or a substring with\n * the given character occurrences removed from the end only.\n *\n * @param   { string } str  A string to trim.\n * @param   { string } char A character to be trimmed.\n * @returns { string }\n */\nfunction trimCharacterEnd(str, char) {\n  let end = str.length;\n  while (end > 0 && str[end - 1] === char) {\n    --end;\n  }\n  return end < str.length ? str.substring(0, end) : str;\n}\n\n/**\n * Return a new string will all characters replaced with unicode escape sequences.\n * This extreme kind of escaping can used to be safely compose regular expressions.\n *\n * @param { string } str A string to escape.\n * @returns { string } A string of unicode escape sequences.\n */\nfunction unicodeEscape(str) {\n  return str.replace(/[\\s\\S]/g, c => '\\\\u' + c.charCodeAt().toString(16).padStart(4, '0'));\n}\n\n/**\n * Deduplicate an array by a given key callback.\n * Item properties are merged recursively and with the preference for last defined values.\n * Of items with the same key, merged item takes the place of the last item,\n * others are omitted.\n *\n * @param { any[] } items An array to deduplicate.\n * @param { (x: any) => string } getKey Callback to get a value that distinguishes unique items.\n * @returns { any[] }\n */\nfunction mergeDuplicatesPreferLast(items, getKey) {\n  const map = new Map();\n  for (let i = items.length; i-- > 0;) {\n    const item = items[i];\n    const key = getKey(item);\n    map.set(key, map.has(key) ? merge(item, map.get(key), {\n      arrayMerge: overwriteMerge$1\n    }) : item);\n  }\n  return [...map.values()].reverse();\n}\nconst overwriteMerge$1 = (acc, src, options) => [...src];\n\n/**\n * Get a nested property from an object.\n *\n * @param   { object }   obj  The object to query for the value.\n * @param   { string[] } path The path to the property.\n * @returns { any }\n */\nfunction get(obj, path) {\n  for (const key of path) {\n    if (!obj) {\n      return undefined;\n    }\n    obj = obj[key];\n  }\n  return obj;\n}\n\n/**\n * Convert a number into alphabetic sequence representation (Sequence without zeroes).\n *\n * For example: `a, ..., z, aa, ..., zz, aaa, ...`.\n *\n * @param   { number } num              Number to convert. Must be >= 1.\n * @param   { string } [baseChar = 'a'] Character for 1 in the sequence.\n * @param   { number } [base = 26]      Number of characters in the sequence.\n * @returns { string }\n */\nfunction numberToLetterSequence(num, baseChar = 'a', base = 26) {\n  const digits = [];\n  do {\n    num -= 1;\n    digits.push(num % base);\n    num = num / base >> 0; // quick `floor`\n  } while (num > 0);\n  const baseCode = baseChar.charCodeAt(0);\n  return digits.reverse().map(n => String.fromCharCode(baseCode + n)).join('');\n}\nconst I = ['I', 'X', 'C', 'M'];\nconst V = ['V', 'L', 'D'];\n\n/**\n * Convert a number to it's Roman representation. No large numbers extension.\n *\n * @param   { number } num Number to convert. `0 < num <= 3999`.\n * @returns { string }\n */\nfunction numberToRoman(num) {\n  return [...(num + '')].map(n => +n).reverse().map((v, i) => v % 5 < 4 ? (v < 5 ? '' : V[i]) + I[i].repeat(v % 5) : I[i] + (v < 5 ? V[i] : I[i + 1])).reverse().join('');\n}\n\n/**\n * Helps to build text from words.\n */\nclass InlineTextBuilder {\n  /**\n   * Creates an instance of InlineTextBuilder.\n   *\n   * If `maxLineLength` is not provided then it is either `options.wordwrap` or unlimited.\n   *\n   * @param { Options } options           HtmlToText options.\n   * @param { number }  [ maxLineLength ] This builder will try to wrap text to fit this line length.\n   */\n  constructor(options, maxLineLength = undefined) {\n    /** @type { string[][] } */\n    this.lines = [];\n    /** @type { string[] }   */\n    this.nextLineWords = [];\n    this.maxLineLength = maxLineLength || options.wordwrap || Number.MAX_VALUE;\n    this.nextLineAvailableChars = this.maxLineLength;\n    this.wrapCharacters = get(options, ['longWordSplit', 'wrapCharacters']) || [];\n    this.forceWrapOnLimit = get(options, ['longWordSplit', 'forceWrapOnLimit']) || false;\n    this.stashedSpace = false;\n    this.wordBreakOpportunity = false;\n  }\n\n  /**\n   * Add a new word.\n   *\n   * @param { string } word A word to add.\n   * @param { boolean } [noWrap] Don't wrap text even if the line is too long.\n   */\n  pushWord(word, noWrap = false) {\n    if (this.nextLineAvailableChars <= 0 && !noWrap) {\n      this.startNewLine();\n    }\n    const isLineStart = this.nextLineWords.length === 0;\n    const cost = word.length + (isLineStart ? 0 : 1);\n    if (cost <= this.nextLineAvailableChars || noWrap) {\n      // Fits into available budget\n\n      this.nextLineWords.push(word);\n      this.nextLineAvailableChars -= cost;\n    } else {\n      // Does not fit - try to split the word\n\n      // The word is moved to a new line - prefer to wrap between words.\n      const [first, ...rest] = this.splitLongWord(word);\n      if (!isLineStart) {\n        this.startNewLine();\n      }\n      this.nextLineWords.push(first);\n      this.nextLineAvailableChars -= first.length;\n      for (const part of rest) {\n        this.startNewLine();\n        this.nextLineWords.push(part);\n        this.nextLineAvailableChars -= part.length;\n      }\n    }\n  }\n\n  /**\n   * Pop a word from the currently built line.\n   * This doesn't affect completed lines.\n   *\n   * @returns { string }\n   */\n  popWord() {\n    const lastWord = this.nextLineWords.pop();\n    if (lastWord !== undefined) {\n      const isLineStart = this.nextLineWords.length === 0;\n      const cost = lastWord.length + (isLineStart ? 0 : 1);\n      this.nextLineAvailableChars += cost;\n    }\n    return lastWord;\n  }\n\n  /**\n   * Concat a word to the last word already in the builder.\n   * Adds a new word in case there are no words yet in the last line.\n   *\n   * @param { string } word A word to be concatenated.\n   * @param { boolean } [noWrap] Don't wrap text even if the line is too long.\n   */\n  concatWord(word, noWrap = false) {\n    if (this.wordBreakOpportunity && word.length > this.nextLineAvailableChars) {\n      this.pushWord(word, noWrap);\n      this.wordBreakOpportunity = false;\n    } else {\n      const lastWord = this.popWord();\n      this.pushWord(lastWord ? lastWord.concat(word) : word, noWrap);\n    }\n  }\n\n  /**\n   * Add current line (and more empty lines if provided argument > 1) to the list of complete lines and start a new one.\n   *\n   * @param { number } n Number of line breaks that will be added to the resulting string.\n   */\n  startNewLine(n = 1) {\n    this.lines.push(this.nextLineWords);\n    if (n > 1) {\n      this.lines.push(...Array.from({\n        length: n - 1\n      }, () => []));\n    }\n    this.nextLineWords = [];\n    this.nextLineAvailableChars = this.maxLineLength;\n  }\n\n  /**\n   * No words in this builder.\n   *\n   * @returns { boolean }\n   */\n  isEmpty() {\n    return this.lines.length === 0 && this.nextLineWords.length === 0;\n  }\n  clear() {\n    this.lines.length = 0;\n    this.nextLineWords.length = 0;\n    this.nextLineAvailableChars = this.maxLineLength;\n  }\n\n  /**\n   * Join all lines of words inside the InlineTextBuilder into a complete string.\n   *\n   * @returns { string }\n   */\n  toString() {\n    return [...this.lines, this.nextLineWords].map(words => words.join(' ')).join('\\n');\n  }\n\n  /**\n   * Split a long word up to fit within the word wrap limit.\n   * Use either a character to split looking back from the word wrap limit,\n   * or truncate to the word wrap limit.\n   *\n   * @param   { string }   word Input word.\n   * @returns { string[] }      Parts of the word.\n   */\n  splitLongWord(word) {\n    const parts = [];\n    let idx = 0;\n    while (word.length > this.maxLineLength) {\n      const firstLine = word.substring(0, this.maxLineLength);\n      const remainingChars = word.substring(this.maxLineLength);\n      const splitIndex = firstLine.lastIndexOf(this.wrapCharacters[idx]);\n      if (splitIndex > -1) {\n        // Found a character to split on\n\n        word = firstLine.substring(splitIndex + 1) + remainingChars;\n        parts.push(firstLine.substring(0, splitIndex + 1));\n      } else {\n        // Not found a character to split on\n\n        idx++;\n        if (idx < this.wrapCharacters.length) {\n          // There is next character to try\n\n          word = firstLine + remainingChars;\n        } else {\n          // No more characters to try\n\n          if (this.forceWrapOnLimit) {\n            parts.push(firstLine);\n            word = remainingChars;\n            if (word.length > this.maxLineLength) {\n              continue;\n            }\n          } else {\n            word = firstLine + remainingChars;\n          }\n          break;\n        }\n      }\n    }\n    parts.push(word); // Add remaining part to array\n    return parts;\n  }\n}\n\n/* eslint-disable max-classes-per-file */\n\nclass StackItem {\n  constructor(next = null) {\n    this.next = next;\n  }\n  getRoot() {\n    return this.next ? this.next : this;\n  }\n}\nclass BlockStackItem extends StackItem {\n  constructor(options, next = null, leadingLineBreaks = 1, maxLineLength = undefined) {\n    super(next);\n    this.leadingLineBreaks = leadingLineBreaks;\n    this.inlineTextBuilder = new InlineTextBuilder(options, maxLineLength);\n    this.rawText = '';\n    this.stashedLineBreaks = 0;\n    this.isPre = next && next.isPre;\n    this.isNoWrap = next && next.isNoWrap;\n  }\n}\nclass ListStackItem extends BlockStackItem {\n  constructor(options, next = null, {\n    interRowLineBreaks = 1,\n    leadingLineBreaks = 2,\n    maxLineLength = undefined,\n    maxPrefixLength = 0,\n    prefixAlign = 'left'\n  } = {}) {\n    super(options, next, leadingLineBreaks, maxLineLength);\n    this.maxPrefixLength = maxPrefixLength;\n    this.prefixAlign = prefixAlign;\n    this.interRowLineBreaks = interRowLineBreaks;\n  }\n}\nclass ListItemStackItem extends BlockStackItem {\n  constructor(options, next = null, {\n    leadingLineBreaks = 1,\n    maxLineLength = undefined,\n    prefix = ''\n  } = {}) {\n    super(options, next, leadingLineBreaks, maxLineLength);\n    this.prefix = prefix;\n  }\n}\nclass TableStackItem extends StackItem {\n  constructor(next = null) {\n    super(next);\n    this.rows = [];\n    this.isPre = next && next.isPre;\n    this.isNoWrap = next && next.isNoWrap;\n  }\n}\nclass TableRowStackItem extends StackItem {\n  constructor(next = null) {\n    super(next);\n    this.cells = [];\n    this.isPre = next && next.isPre;\n    this.isNoWrap = next && next.isNoWrap;\n  }\n}\nclass TableCellStackItem extends StackItem {\n  constructor(options, next = null, maxColumnWidth = undefined) {\n    super(next);\n    this.inlineTextBuilder = new InlineTextBuilder(options, maxColumnWidth);\n    this.rawText = '';\n    this.stashedLineBreaks = 0;\n    this.isPre = next && next.isPre;\n    this.isNoWrap = next && next.isNoWrap;\n  }\n}\nclass TransformerStackItem extends StackItem {\n  constructor(next = null, transform) {\n    super(next);\n    this.transform = transform;\n  }\n}\nfunction charactersToCodes(str) {\n  return [...str].map(c => '\\\\u' + c.charCodeAt(0).toString(16).padStart(4, '0')).join('');\n}\n\n/**\n * Helps to handle HTML whitespaces.\n *\n * @class WhitespaceProcessor\n */\nclass WhitespaceProcessor {\n  /**\n   * Creates an instance of WhitespaceProcessor.\n   *\n   * @param { Options } options    HtmlToText options.\n   * @memberof WhitespaceProcessor\n   */\n  constructor(options) {\n    this.whitespaceChars = options.preserveNewlines ? options.whitespaceCharacters.replace(/\\n/g, '') : options.whitespaceCharacters;\n    const whitespaceCodes = charactersToCodes(this.whitespaceChars);\n    this.leadingWhitespaceRe = new RegExp(`^[${whitespaceCodes}]`);\n    this.trailingWhitespaceRe = new RegExp(`[${whitespaceCodes}]$`);\n    this.allWhitespaceOrEmptyRe = new RegExp(`^[${whitespaceCodes}]*$`);\n    this.newlineOrNonWhitespaceRe = new RegExp(`(\\\\n|[^\\\\n${whitespaceCodes}])`, 'g');\n    this.newlineOrNonNewlineStringRe = new RegExp(`(\\\\n|[^\\\\n]+)`, 'g');\n    if (options.preserveNewlines) {\n      const wordOrNewlineRe = new RegExp(`\\\\n|[^\\\\n${whitespaceCodes}]+`, 'gm');\n\n      /**\n       * Shrink whitespaces and wrap text, add to the builder.\n       *\n       * @param { string }                  text              Input text.\n       * @param { InlineTextBuilder }       inlineTextBuilder A builder to receive processed text.\n       * @param { (str: string) => string } [ transform ]     A transform to be applied to words.\n       * @param { boolean }                 [noWrap] Don't wrap text even if the line is too long.\n       */\n      this.shrinkWrapAdd = function (text, inlineTextBuilder, transform = str => str, noWrap = false) {\n        if (!text) {\n          return;\n        }\n        const previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n        let anyMatch = false;\n        let m = wordOrNewlineRe.exec(text);\n        if (m) {\n          anyMatch = true;\n          if (m[0] === '\\n') {\n            inlineTextBuilder.startNewLine();\n          } else if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {\n            inlineTextBuilder.pushWord(transform(m[0]), noWrap);\n          } else {\n            inlineTextBuilder.concatWord(transform(m[0]), noWrap);\n          }\n          while ((m = wordOrNewlineRe.exec(text)) !== null) {\n            if (m[0] === '\\n') {\n              inlineTextBuilder.startNewLine();\n            } else {\n              inlineTextBuilder.pushWord(transform(m[0]), noWrap);\n            }\n          }\n        }\n        inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch || this.testTrailingWhitespace(text);\n        // No need to stash a space in case last added item was a new line,\n        // but that won't affect anything later anyway.\n      };\n    } else {\n      const wordRe = new RegExp(`[^${whitespaceCodes}]+`, 'g');\n      this.shrinkWrapAdd = function (text, inlineTextBuilder, transform = str => str, noWrap = false) {\n        if (!text) {\n          return;\n        }\n        const previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n        let anyMatch = false;\n        let m = wordRe.exec(text);\n        if (m) {\n          anyMatch = true;\n          if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {\n            inlineTextBuilder.pushWord(transform(m[0]), noWrap);\n          } else {\n            inlineTextBuilder.concatWord(transform(m[0]), noWrap);\n          }\n          while ((m = wordRe.exec(text)) !== null) {\n            inlineTextBuilder.pushWord(transform(m[0]), noWrap);\n          }\n        }\n        inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch || this.testTrailingWhitespace(text);\n      };\n    }\n  }\n\n  /**\n   * Add text with only minimal processing.\n   * Everything between newlines considered a single word.\n   * No whitespace is trimmed.\n   * Not affected by preserveNewlines option - `\\n` always starts a new line.\n   *\n   * `noWrap` argument is `true` by default - this won't start a new line\n   * even if there is not enough space left in the current line.\n   *\n   * @param { string }            text              Input text.\n   * @param { InlineTextBuilder } inlineTextBuilder A builder to receive processed text.\n   * @param { boolean }           [noWrap] Don't wrap text even if the line is too long.\n   */\n  addLiteral(text, inlineTextBuilder, noWrap = true) {\n    if (!text) {\n      return;\n    }\n    const previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n    let anyMatch = false;\n    let m = this.newlineOrNonNewlineStringRe.exec(text);\n    if (m) {\n      anyMatch = true;\n      if (m[0] === '\\n') {\n        inlineTextBuilder.startNewLine();\n      } else if (previouslyStashedSpace) {\n        inlineTextBuilder.pushWord(m[0], noWrap);\n      } else {\n        inlineTextBuilder.concatWord(m[0], noWrap);\n      }\n      while ((m = this.newlineOrNonNewlineStringRe.exec(text)) !== null) {\n        if (m[0] === '\\n') {\n          inlineTextBuilder.startNewLine();\n        } else {\n          inlineTextBuilder.pushWord(m[0], noWrap);\n        }\n      }\n    }\n    inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch;\n  }\n\n  /**\n   * Test whether the given text starts with HTML whitespace character.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */\n  testLeadingWhitespace(text) {\n    return this.leadingWhitespaceRe.test(text);\n  }\n\n  /**\n   * Test whether the given text ends with HTML whitespace character.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */\n  testTrailingWhitespace(text) {\n    return this.trailingWhitespaceRe.test(text);\n  }\n\n  /**\n   * Test whether the given text contains any non-whitespace characters.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */\n  testContainsWords(text) {\n    return !this.allWhitespaceOrEmptyRe.test(text);\n  }\n\n  /**\n   * Return the number of newlines if there are no words.\n   *\n   * If any word is found then return zero regardless of the actual number of newlines.\n   *\n   * @param   { string }  text  Input string.\n   * @returns { number }\n   */\n  countNewlinesNoWords(text) {\n    this.newlineOrNonWhitespaceRe.lastIndex = 0;\n    let counter = 0;\n    let match;\n    while ((match = this.newlineOrNonWhitespaceRe.exec(text)) !== null) {\n      if (match[0] === '\\n') {\n        counter++;\n      } else {\n        return 0;\n      }\n    }\n    return counter;\n  }\n}\n\n/**\n * Helps to build text from inline and block elements.\n *\n * @class BlockTextBuilder\n */\nclass BlockTextBuilder {\n  /**\n   * Creates an instance of BlockTextBuilder.\n   *\n   * @param { Options } options HtmlToText options.\n   * @param { import('selderee').Picker<DomNode, TagDefinition> } picker Selectors decision tree picker.\n   * @param { any} [metadata] Optional metadata for HTML document, for use in formatters.\n   */\n  constructor(options, picker, metadata = undefined) {\n    this.options = options;\n    this.picker = picker;\n    this.metadata = metadata;\n    this.whitespaceProcessor = new WhitespaceProcessor(options);\n    /** @type { StackItem } */\n    this._stackItem = new BlockStackItem(options);\n    /** @type { TransformerStackItem } */\n    this._wordTransformer = undefined;\n  }\n\n  /**\n   * Put a word-by-word transform function onto the transformations stack.\n   *\n   * Mainly used for uppercasing. Can be bypassed to add unformatted text such as URLs.\n   *\n   * Word transformations applied before wrapping.\n   *\n   * @param { (str: string) => string } wordTransform Word transformation function.\n   */\n  pushWordTransform(wordTransform) {\n    this._wordTransformer = new TransformerStackItem(this._wordTransformer, wordTransform);\n  }\n\n  /**\n   * Remove a function from the word transformations stack.\n   *\n   * @returns { (str: string) => string } A function that was removed.\n   */\n  popWordTransform() {\n    if (!this._wordTransformer) {\n      return undefined;\n    }\n    const transform = this._wordTransformer.transform;\n    this._wordTransformer = this._wordTransformer.next;\n    return transform;\n  }\n\n  /**\n   * Ignore wordwrap option in followup inline additions and disable automatic wrapping.\n   */\n  startNoWrap() {\n    this._stackItem.isNoWrap = true;\n  }\n\n  /**\n   * Return automatic wrapping to behavior defined by options.\n   */\n  stopNoWrap() {\n    this._stackItem.isNoWrap = false;\n  }\n\n  /** @returns { (str: string) => string } */\n  _getCombinedWordTransformer() {\n    const wt = this._wordTransformer ? str => applyTransformer(str, this._wordTransformer) : undefined;\n    const ce = this.options.encodeCharacters;\n    return wt ? ce ? str => ce(wt(str)) : wt : ce;\n  }\n  _popStackItem() {\n    const item = this._stackItem;\n    this._stackItem = item.next;\n    return item;\n  }\n\n  /**\n   * Add a line break into currently built block.\n   */\n  addLineBreak() {\n    if (!(this._stackItem instanceof BlockStackItem || this._stackItem instanceof ListItemStackItem || this._stackItem instanceof TableCellStackItem)) {\n      return;\n    }\n    if (this._stackItem.isPre) {\n      this._stackItem.rawText += '\\n';\n    } else {\n      this._stackItem.inlineTextBuilder.startNewLine();\n    }\n  }\n\n  /**\n   * Allow to break line in case directly following text will not fit.\n   */\n  addWordBreakOpportunity() {\n    if (this._stackItem instanceof BlockStackItem || this._stackItem instanceof ListItemStackItem || this._stackItem instanceof TableCellStackItem) {\n      this._stackItem.inlineTextBuilder.wordBreakOpportunity = true;\n    }\n  }\n\n  /**\n   * Add a node inline into the currently built block.\n   *\n   * @param { string } str\n   * Text content of a node to add.\n   *\n   * @param { object } [param1]\n   * Object holding the parameters of the operation.\n   *\n   * @param { boolean } [param1.noWordTransform]\n   * Ignore word transformers if there are any.\n   * Don't encode characters as well.\n   * (Use this for things like URL addresses).\n   */\n  addInline(str, {\n    noWordTransform = false\n  } = {}) {\n    if (!(this._stackItem instanceof BlockStackItem || this._stackItem instanceof ListItemStackItem || this._stackItem instanceof TableCellStackItem)) {\n      return;\n    }\n    if (this._stackItem.isPre) {\n      this._stackItem.rawText += str;\n      return;\n    }\n    if (str.length === 0 ||\n    // empty string\n\n    this._stackItem.stashedLineBreaks &&\n    // stashed linebreaks make whitespace irrelevant\n    !this.whitespaceProcessor.testContainsWords(str) // no words to add\n    ) {\n      return;\n    }\n    if (this.options.preserveNewlines) {\n      const newlinesNumber = this.whitespaceProcessor.countNewlinesNoWords(str);\n      if (newlinesNumber > 0) {\n        this._stackItem.inlineTextBuilder.startNewLine(newlinesNumber);\n        // keep stashedLineBreaks unchanged\n        return;\n      }\n    }\n    if (this._stackItem.stashedLineBreaks) {\n      this._stackItem.inlineTextBuilder.startNewLine(this._stackItem.stashedLineBreaks);\n    }\n    this.whitespaceProcessor.shrinkWrapAdd(str, this._stackItem.inlineTextBuilder, noWordTransform ? undefined : this._getCombinedWordTransformer(), this._stackItem.isNoWrap);\n    this._stackItem.stashedLineBreaks = 0; // inline text doesn't introduce line breaks\n  }\n\n  /**\n   * Add a string inline into the currently built block.\n   *\n   * Use this for markup elements that don't have to adhere\n   * to text layout rules.\n   *\n   * @param { string } str Text to add.\n   */\n  addLiteral(str) {\n    if (!(this._stackItem instanceof BlockStackItem || this._stackItem instanceof ListItemStackItem || this._stackItem instanceof TableCellStackItem)) {\n      return;\n    }\n    if (str.length === 0) {\n      return;\n    }\n    if (this._stackItem.isPre) {\n      this._stackItem.rawText += str;\n      return;\n    }\n    if (this._stackItem.stashedLineBreaks) {\n      this._stackItem.inlineTextBuilder.startNewLine(this._stackItem.stashedLineBreaks);\n    }\n    this.whitespaceProcessor.addLiteral(str, this._stackItem.inlineTextBuilder, this._stackItem.isNoWrap);\n    this._stackItem.stashedLineBreaks = 0;\n  }\n\n  /**\n   * Start building a new block.\n   *\n   * @param { object } [param0]\n   * Object holding the parameters of the block.\n   *\n   * @param { number } [param0.leadingLineBreaks]\n   * This block should have at least this number of line breaks to separate it from any preceding block.\n   *\n   * @param { number }  [param0.reservedLineLength]\n   * Reserve this number of characters on each line for block markup.\n   *\n   * @param { boolean } [param0.isPre]\n   * Should HTML whitespace be preserved inside this block.\n   */\n  openBlock({\n    leadingLineBreaks = 1,\n    reservedLineLength = 0,\n    isPre = false\n  } = {}) {\n    const maxLineLength = Math.max(20, this._stackItem.inlineTextBuilder.maxLineLength - reservedLineLength);\n    this._stackItem = new BlockStackItem(this.options, this._stackItem, leadingLineBreaks, maxLineLength);\n    if (isPre) {\n      this._stackItem.isPre = true;\n    }\n  }\n\n  /**\n   * Finalize currently built block, add it's content to the parent block.\n   *\n   * @param { object } [param0]\n   * Object holding the parameters of the block.\n   *\n   * @param { number } [param0.trailingLineBreaks]\n   * This block should have at least this number of line breaks to separate it from any following block.\n   *\n   * @param { (str: string) => string } [param0.blockTransform]\n   * A function to transform the block text before adding to the parent block.\n   * This happens after word wrap and should be used in combination with reserved line length\n   * in order to keep line lengths correct.\n   * Used for whole block markup.\n   */\n  closeBlock({\n    trailingLineBreaks = 1,\n    blockTransform = undefined\n  } = {}) {\n    const block = this._popStackItem();\n    const blockText = blockTransform ? blockTransform(getText(block)) : getText(block);\n    addText(this._stackItem, blockText, block.leadingLineBreaks, Math.max(block.stashedLineBreaks, trailingLineBreaks));\n  }\n\n  /**\n   * Start building a new list.\n   *\n   * @param { object } [param0]\n   * Object holding the parameters of the list.\n   *\n   * @param { number } [param0.maxPrefixLength]\n   * Length of the longest list item prefix.\n   * If not supplied or too small then list items won't be aligned properly.\n   *\n   * @param { 'left' | 'right' } [param0.prefixAlign]\n   * Specify how prefixes of different lengths have to be aligned\n   * within a column.\n   *\n   * @param { number } [param0.interRowLineBreaks]\n   * Minimum number of line breaks between list items.\n   *\n   * @param { number } [param0.leadingLineBreaks]\n   * This list should have at least this number of line breaks to separate it from any preceding block.\n   */\n  openList({\n    maxPrefixLength = 0,\n    prefixAlign = 'left',\n    interRowLineBreaks = 1,\n    leadingLineBreaks = 2\n  } = {}) {\n    this._stackItem = new ListStackItem(this.options, this._stackItem, {\n      interRowLineBreaks: interRowLineBreaks,\n      leadingLineBreaks: leadingLineBreaks,\n      maxLineLength: this._stackItem.inlineTextBuilder.maxLineLength,\n      maxPrefixLength: maxPrefixLength,\n      prefixAlign: prefixAlign\n    });\n  }\n\n  /**\n   * Start building a new list item.\n   *\n   * @param {object} param0\n   * Object holding the parameters of the list item.\n   *\n   * @param { string } [param0.prefix]\n   * Prefix for this list item (item number, bullet point, etc).\n   */\n  openListItem({\n    prefix = ''\n  } = {}) {\n    if (!(this._stackItem instanceof ListStackItem)) {\n      throw new Error('Can\\'t add a list item to something that is not a list! Check the formatter.');\n    }\n    const list = this._stackItem;\n    const prefixLength = Math.max(prefix.length, list.maxPrefixLength);\n    const maxLineLength = Math.max(20, list.inlineTextBuilder.maxLineLength - prefixLength);\n    this._stackItem = new ListItemStackItem(this.options, list, {\n      prefix: prefix,\n      maxLineLength: maxLineLength,\n      leadingLineBreaks: list.interRowLineBreaks\n    });\n  }\n\n  /**\n   * Finalize currently built list item, add it's content to the parent list.\n   */\n  closeListItem() {\n    const listItem = this._popStackItem();\n    const list = listItem.next;\n    const prefixLength = Math.max(listItem.prefix.length, list.maxPrefixLength);\n    const spacing = '\\n' + ' '.repeat(prefixLength);\n    const prefix = list.prefixAlign === 'right' ? listItem.prefix.padStart(prefixLength) : listItem.prefix.padEnd(prefixLength);\n    const text = prefix + getText(listItem).replace(/\\n/g, spacing);\n    addText(list, text, listItem.leadingLineBreaks, Math.max(listItem.stashedLineBreaks, list.interRowLineBreaks));\n  }\n\n  /**\n   * Finalize currently built list, add it's content to the parent block.\n   *\n   * @param { object } param0\n   * Object holding the parameters of the list.\n   *\n   * @param { number } [param0.trailingLineBreaks]\n   * This list should have at least this number of line breaks to separate it from any following block.\n   */\n  closeList({\n    trailingLineBreaks = 2\n  } = {}) {\n    const list = this._popStackItem();\n    const text = getText(list);\n    if (text) {\n      addText(this._stackItem, text, list.leadingLineBreaks, trailingLineBreaks);\n    }\n  }\n\n  /**\n   * Start building a table.\n   */\n  openTable() {\n    this._stackItem = new TableStackItem(this._stackItem);\n  }\n\n  /**\n   * Start building a table row.\n   */\n  openTableRow() {\n    if (!(this._stackItem instanceof TableStackItem)) {\n      throw new Error('Can\\'t add a table row to something that is not a table! Check the formatter.');\n    }\n    this._stackItem = new TableRowStackItem(this._stackItem);\n  }\n\n  /**\n   * Start building a table cell.\n   *\n   * @param { object } [param0]\n   * Object holding the parameters of the cell.\n   *\n   * @param { number } [param0.maxColumnWidth]\n   * Wrap cell content to this width. Fall back to global wordwrap value if undefined.\n   */\n  openTableCell({\n    maxColumnWidth = undefined\n  } = {}) {\n    if (!(this._stackItem instanceof TableRowStackItem)) {\n      throw new Error('Can\\'t add a table cell to something that is not a table row! Check the formatter.');\n    }\n    this._stackItem = new TableCellStackItem(this.options, this._stackItem, maxColumnWidth);\n  }\n\n  /**\n   * Finalize currently built table cell and add it to parent table row's cells.\n   *\n   * @param { object } [param0]\n   * Object holding the parameters of the cell.\n   *\n   * @param { number } [param0.colspan] How many columns this cell should occupy.\n   * @param { number } [param0.rowspan] How many rows this cell should occupy.\n   */\n  closeTableCell({\n    colspan = 1,\n    rowspan = 1\n  } = {}) {\n    const cell = this._popStackItem();\n    const text = trimCharacter(getText(cell), '\\n');\n    cell.next.cells.push({\n      colspan: colspan,\n      rowspan: rowspan,\n      text: text\n    });\n  }\n\n  /**\n   * Finalize currently built table row and add it to parent table's rows.\n   */\n  closeTableRow() {\n    const row = this._popStackItem();\n    row.next.rows.push(row.cells);\n  }\n\n  /**\n   * Finalize currently built table and add the rendered text to the parent block.\n   *\n   * @param { object } param0\n   * Object holding the parameters of the table.\n   *\n   * @param { TablePrinter } param0.tableToString\n   * A function to convert a table of stringified cells into a complete table.\n   *\n   * @param { number } [param0.leadingLineBreaks]\n   * This table should have at least this number of line breaks to separate if from any preceding block.\n   *\n   * @param { number } [param0.trailingLineBreaks]\n   * This table should have at least this number of line breaks to separate it from any following block.\n   */\n  closeTable({\n    tableToString,\n    leadingLineBreaks = 2,\n    trailingLineBreaks = 2\n  }) {\n    const table = this._popStackItem();\n    const output = tableToString(table.rows);\n    if (output) {\n      addText(this._stackItem, output, leadingLineBreaks, trailingLineBreaks);\n    }\n  }\n\n  /**\n   * Return the rendered text content of this builder.\n   *\n   * @returns { string }\n   */\n  toString() {\n    return getText(this._stackItem.getRoot());\n    // There should only be the root item if everything is closed properly.\n  }\n}\nfunction getText(stackItem) {\n  if (!(stackItem instanceof BlockStackItem || stackItem instanceof ListItemStackItem || stackItem instanceof TableCellStackItem)) {\n    throw new Error('Only blocks, list items and table cells can be requested for text contents.');\n  }\n  return stackItem.inlineTextBuilder.isEmpty() ? stackItem.rawText : stackItem.rawText + stackItem.inlineTextBuilder.toString();\n}\nfunction addText(stackItem, text, leadingLineBreaks, trailingLineBreaks) {\n  if (!(stackItem instanceof BlockStackItem || stackItem instanceof ListItemStackItem || stackItem instanceof TableCellStackItem)) {\n    throw new Error('Only blocks, list items and table cells can contain text.');\n  }\n  const parentText = getText(stackItem);\n  const lineBreaks = Math.max(stackItem.stashedLineBreaks, leadingLineBreaks);\n  stackItem.inlineTextBuilder.clear();\n  if (parentText) {\n    stackItem.rawText = parentText + '\\n'.repeat(lineBreaks) + text;\n  } else {\n    stackItem.rawText = text;\n    stackItem.leadingLineBreaks = lineBreaks;\n  }\n  stackItem.stashedLineBreaks = trailingLineBreaks;\n}\n\n/**\n * @param { string } str A string to transform.\n * @param { TransformerStackItem } transformer A transformer item (with possible continuation).\n * @returns { string }\n */\nfunction applyTransformer(str, transformer) {\n  return transformer ? applyTransformer(transformer.transform(str), transformer.next) : str;\n}\n\n/**\n * Compile selectors into a decision tree,\n * return a function intended for batch processing.\n *\n * @param   { Options } [options = {}]   HtmlToText options (defaults, formatters, user options merged, deduplicated).\n * @returns { (html: string, metadata?: any) => string } Pre-configured converter function.\n * @static\n */\nfunction compile$1(options = {}) {\n  const selectorsWithoutFormat = options.selectors.filter(s => !s.format);\n  if (selectorsWithoutFormat.length) {\n    throw new Error('Following selectors have no specified format: ' + selectorsWithoutFormat.map(s => `\\`${s.selector}\\``).join(', '));\n  }\n  const picker = new DecisionTree(options.selectors.map(s => [s.selector, s])).build(hp2Builder);\n  if (typeof options.encodeCharacters !== 'function') {\n    options.encodeCharacters = makeReplacerFromDict(options.encodeCharacters);\n  }\n  const baseSelectorsPicker = new DecisionTree(options.baseElements.selectors.map((s, i) => [s, i + 1])).build(hp2Builder);\n  function findBaseElements(dom) {\n    return findBases(dom, options, baseSelectorsPicker);\n  }\n  const limitedWalk = limitedDepthRecursive(options.limits.maxDepth, recursiveWalk, function (dom, builder) {\n    builder.addInline(options.limits.ellipsis || '');\n  });\n  return function (html, metadata = undefined) {\n    return process(html, metadata, options, picker, findBaseElements, limitedWalk);\n  };\n}\n\n/**\n * Convert given HTML according to preprocessed options.\n *\n * @param { string } html HTML content to convert.\n * @param { any } metadata Optional metadata for HTML document, for use in formatters.\n * @param { Options } options HtmlToText options (preprocessed).\n * @param { import('selderee').Picker<DomNode, TagDefinition> } picker\n * Tag definition picker for DOM nodes processing.\n * @param { (dom: DomNode[]) => DomNode[] } findBaseElements\n * Function to extract elements from HTML DOM\n * that will only be present in the output text.\n * @param { RecursiveCallback } walk Recursive callback.\n * @returns { string }\n */\nfunction process(html, metadata, options, picker, findBaseElements, walk) {\n  const maxInputLength = options.limits.maxInputLength;\n  if (maxInputLength && html && html.length > maxInputLength) {\n    console.warn(`Input length ${html.length} is above allowed limit of ${maxInputLength}. Truncating without ellipsis.`);\n    html = html.substring(0, maxInputLength);\n  }\n  const document = parseDocument(html, {\n    decodeEntities: options.decodeEntities\n  });\n  const bases = findBaseElements(document.children);\n  const builder = new BlockTextBuilder(options, picker, metadata);\n  walk(bases, builder);\n  return builder.toString();\n}\nfunction findBases(dom, options, baseSelectorsPicker) {\n  const results = [];\n  function recursiveWalk(walk, /** @type { DomNode[] } */dom) {\n    dom = dom.slice(0, options.limits.maxChildNodes);\n    for (const elem of dom) {\n      if (elem.type !== 'tag') {\n        continue;\n      }\n      const pickedSelectorIndex = baseSelectorsPicker.pick1(elem);\n      if (pickedSelectorIndex > 0) {\n        results.push({\n          selectorIndex: pickedSelectorIndex,\n          element: elem\n        });\n      } else if (elem.children) {\n        walk(elem.children);\n      }\n      if (results.length >= options.limits.maxBaseElements) {\n        return;\n      }\n    }\n  }\n  const limitedWalk = limitedDepthRecursive(options.limits.maxDepth, recursiveWalk);\n  limitedWalk(dom);\n  if (options.baseElements.orderBy !== 'occurrence') {\n    // 'selectors'\n    results.sort((a, b) => a.selectorIndex - b.selectorIndex);\n  }\n  return options.baseElements.returnDomByDefault && results.length === 0 ? dom : results.map(x => x.element);\n}\n\n/**\n * Function to walk through DOM nodes and accumulate their string representations.\n *\n * @param   { RecursiveCallback } walk    Recursive callback.\n * @param   { DomNode[] }         [dom]   Nodes array to process.\n * @param   { BlockTextBuilder }  builder Passed around to accumulate output text.\n * @private\n */\nfunction recursiveWalk(walk, dom, builder) {\n  if (!dom) {\n    return;\n  }\n  const options = builder.options;\n  const tooManyChildNodes = dom.length > options.limits.maxChildNodes;\n  if (tooManyChildNodes) {\n    dom = dom.slice(0, options.limits.maxChildNodes);\n    dom.push({\n      data: options.limits.ellipsis,\n      type: 'text'\n    });\n  }\n  for (const elem of dom) {\n    switch (elem.type) {\n      case 'text':\n        {\n          builder.addInline(elem.data);\n          break;\n        }\n      case 'tag':\n        {\n          const tagDefinition = builder.picker.pick1(elem);\n          const format = options.formatters[tagDefinition.format];\n          format(elem, walk, builder, tagDefinition.options || {});\n          break;\n        }\n    }\n  }\n  return;\n}\n\n/**\n * @param { Object<string,string | false> } dict\n * A dictionary where keys are characters to replace\n * and values are replacement strings.\n *\n * First code point from dict keys is used.\n * Compound emojis with ZWJ are not supported (not until Node 16).\n *\n * @returns { ((str: string) => string) | undefined }\n */\nfunction makeReplacerFromDict(dict) {\n  if (!dict || Object.keys(dict).length === 0) {\n    return undefined;\n  }\n  /** @type { [string, string][] } */\n  const entries = Object.entries(dict).filter(([, v]) => v !== false);\n  const regex = new RegExp(entries.map(([c]) => `(${unicodeEscape([...c][0])})`).join('|'), 'g');\n  const values = entries.map(([, v]) => v);\n  const replacer = (m, ...cgs) => values[cgs.findIndex(cg => cg)];\n  return str => str.replace(regex, replacer);\n}\n\n/**\n * Dummy formatter that discards the input and does nothing.\n *\n * @type { FormatCallback }\n */\nfunction formatSkip(elem, walk, builder, formatOptions) {\n  /* do nothing */\n}\n\n/**\n * Insert the given string literal inline instead of a tag.\n *\n * @type { FormatCallback }\n */\nfunction formatInlineString(elem, walk, builder, formatOptions) {\n  builder.addLiteral(formatOptions.string || '');\n}\n\n/**\n * Insert a block with the given string literal instead of a tag.\n *\n * @type { FormatCallback }\n */\nfunction formatBlockString(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n  });\n  builder.addLiteral(formatOptions.string || '');\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n  });\n}\n\n/**\n * Process an inline-level element.\n *\n * @type { FormatCallback }\n */\nfunction formatInline(elem, walk, builder, formatOptions) {\n  walk(elem.children, builder);\n}\n\n/**\n * Process a block-level container.\n *\n * @type { FormatCallback }\n */\nfunction formatBlock$1(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n  });\n  walk(elem.children, builder);\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n  });\n}\nfunction renderOpenTag(elem) {\n  const attrs = elem.attribs && elem.attribs.length ? ' ' + Object.entries(elem.attribs).map(([k, v]) => v === '' ? k : `${k}=${v.replace(/\"/g, '&quot;')}`).join(' ') : '';\n  return `<${elem.name}${attrs}>`;\n}\nfunction renderCloseTag(elem) {\n  return `</${elem.name}>`;\n}\n\n/**\n * Render an element as inline HTML tag, walk through it's children.\n *\n * @type { FormatCallback }\n */\nfunction formatInlineTag(elem, walk, builder, formatOptions) {\n  builder.startNoWrap();\n  builder.addLiteral(renderOpenTag(elem));\n  builder.stopNoWrap();\n  walk(elem.children, builder);\n  builder.startNoWrap();\n  builder.addLiteral(renderCloseTag(elem));\n  builder.stopNoWrap();\n}\n\n/**\n * Render an element as HTML block bag, walk through it's children.\n *\n * @type { FormatCallback }\n */\nfunction formatBlockTag(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n  });\n  builder.startNoWrap();\n  builder.addLiteral(renderOpenTag(elem));\n  builder.stopNoWrap();\n  walk(elem.children, builder);\n  builder.startNoWrap();\n  builder.addLiteral(renderCloseTag(elem));\n  builder.stopNoWrap();\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n  });\n}\n\n/**\n * Render an element with all it's children as inline HTML.\n *\n * @type { FormatCallback }\n */\nfunction formatInlineHtml(elem, walk, builder, formatOptions) {\n  builder.startNoWrap();\n  builder.addLiteral(render(elem, {\n    decodeEntities: builder.options.decodeEntities\n  }));\n  builder.stopNoWrap();\n}\n\n/**\n * Render an element with all it's children as HTML block.\n *\n * @type { FormatCallback }\n */\nfunction formatBlockHtml(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n  });\n  builder.startNoWrap();\n  builder.addLiteral(render(elem, {\n    decodeEntities: builder.options.decodeEntities\n  }));\n  builder.stopNoWrap();\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n  });\n}\n\n/**\n * Render inline element wrapped with given strings.\n *\n * @type { FormatCallback }\n */\nfunction formatInlineSurround(elem, walk, builder, formatOptions) {\n  builder.addLiteral(formatOptions.prefix || '');\n  walk(elem.children, builder);\n  builder.addLiteral(formatOptions.suffix || '');\n}\nvar genericFormatters = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  block: formatBlock$1,\n  blockHtml: formatBlockHtml,\n  blockString: formatBlockString,\n  blockTag: formatBlockTag,\n  inline: formatInline,\n  inlineHtml: formatInlineHtml,\n  inlineString: formatInlineString,\n  inlineSurround: formatInlineSurround,\n  inlineTag: formatInlineTag,\n  skip: formatSkip\n});\nfunction getRow(matrix, j) {\n  if (!matrix[j]) {\n    matrix[j] = [];\n  }\n  return matrix[j];\n}\nfunction findFirstVacantIndex(row, x = 0) {\n  while (row[x]) {\n    x++;\n  }\n  return x;\n}\nfunction transposeInPlace(matrix, maxSize) {\n  for (let i = 0; i < maxSize; i++) {\n    const rowI = getRow(matrix, i);\n    for (let j = 0; j < i; j++) {\n      const rowJ = getRow(matrix, j);\n      if (rowI[j] || rowJ[i]) {\n        const temp = rowI[j];\n        rowI[j] = rowJ[i];\n        rowJ[i] = temp;\n      }\n    }\n  }\n}\nfunction putCellIntoLayout(cell, layout, baseRow, baseCol) {\n  for (let r = 0; r < cell.rowspan; r++) {\n    const layoutRow = getRow(layout, baseRow + r);\n    for (let c = 0; c < cell.colspan; c++) {\n      layoutRow[baseCol + c] = cell;\n    }\n  }\n}\nfunction getOrInitOffset(offsets, index) {\n  if (offsets[index] === undefined) {\n    offsets[index] = index === 0 ? 0 : 1 + getOrInitOffset(offsets, index - 1);\n  }\n  return offsets[index];\n}\nfunction updateOffset(offsets, base, span, value) {\n  offsets[base + span] = Math.max(getOrInitOffset(offsets, base + span), getOrInitOffset(offsets, base) + value);\n}\n\n/**\n * Render a table into a string.\n * Cells can contain multiline text and span across multiple rows and columns.\n *\n * Modifies cells to add lines array.\n *\n * @param { TablePrinterCell[][] } tableRows Table to render.\n * @param { number } rowSpacing Number of spaces between columns.\n * @param { number } colSpacing Number of empty lines between rows.\n * @returns { string }\n */\nfunction tableToString(tableRows, rowSpacing, colSpacing) {\n  const layout = [];\n  let colNumber = 0;\n  const rowNumber = tableRows.length;\n  const rowOffsets = [0];\n  // Fill the layout table and row offsets row-by-row.\n  for (let j = 0; j < rowNumber; j++) {\n    const layoutRow = getRow(layout, j);\n    const cells = tableRows[j];\n    let x = 0;\n    for (let i = 0; i < cells.length; i++) {\n      const cell = cells[i];\n      x = findFirstVacantIndex(layoutRow, x);\n      putCellIntoLayout(cell, layout, j, x);\n      x += cell.colspan;\n      cell.lines = cell.text.split('\\n');\n      const cellHeight = cell.lines.length;\n      updateOffset(rowOffsets, j, cell.rowspan, cellHeight + rowSpacing);\n    }\n    colNumber = layoutRow.length > colNumber ? layoutRow.length : colNumber;\n  }\n  transposeInPlace(layout, rowNumber > colNumber ? rowNumber : colNumber);\n  const outputLines = [];\n  const colOffsets = [0];\n  // Fill column offsets and output lines column-by-column.\n  for (let x = 0; x < colNumber; x++) {\n    let y = 0;\n    let cell;\n    const rowsInThisColumn = Math.min(rowNumber, layout[x].length);\n    while (y < rowsInThisColumn) {\n      cell = layout[x][y];\n      if (cell) {\n        if (!cell.rendered) {\n          let cellWidth = 0;\n          for (let j = 0; j < cell.lines.length; j++) {\n            const line = cell.lines[j];\n            const lineOffset = rowOffsets[y] + j;\n            outputLines[lineOffset] = (outputLines[lineOffset] || '').padEnd(colOffsets[x]) + line;\n            cellWidth = line.length > cellWidth ? line.length : cellWidth;\n          }\n          updateOffset(colOffsets, x, cell.colspan, cellWidth + colSpacing);\n          cell.rendered = true;\n        }\n        y += cell.rowspan;\n      } else {\n        const lineOffset = rowOffsets[y];\n        outputLines[lineOffset] = outputLines[lineOffset] || '';\n        y++;\n      }\n    }\n  }\n  return outputLines.join('\\n');\n}\n\n/**\n * Process a line-break.\n *\n * @type { FormatCallback }\n */\nfunction formatLineBreak(elem, walk, builder, formatOptions) {\n  builder.addLineBreak();\n}\n\n/**\n * Process a `wbr` tag (word break opportunity).\n *\n * @type { FormatCallback }\n */\nfunction formatWbr(elem, walk, builder, formatOptions) {\n  builder.addWordBreakOpportunity();\n}\n\n/**\n * Process a horizontal line.\n *\n * @type { FormatCallback }\n */\nfunction formatHorizontalLine(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n  });\n  builder.addInline('-'.repeat(formatOptions.length || builder.options.wordwrap || 40));\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n  });\n}\n\n/**\n * Process a paragraph.\n *\n * @type { FormatCallback }\n */\nfunction formatParagraph(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n  });\n  walk(elem.children, builder);\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n  });\n}\n\n/**\n * Process a preformatted content.\n *\n * @type { FormatCallback }\n */\nfunction formatPre(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    isPre: true,\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n  });\n  walk(elem.children, builder);\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n  });\n}\n\n/**\n * Process a heading.\n *\n * @type { FormatCallback }\n */\nfunction formatHeading(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n  });\n  if (formatOptions.uppercase !== false) {\n    builder.pushWordTransform(str => str.toUpperCase());\n    walk(elem.children, builder);\n    builder.popWordTransform();\n  } else {\n    walk(elem.children, builder);\n  }\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n  });\n}\n\n/**\n * Process a blockquote.\n *\n * @type { FormatCallback }\n */\nfunction formatBlockquote(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2,\n    reservedLineLength: 2\n  });\n  walk(elem.children, builder);\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2,\n    blockTransform: str => (formatOptions.trimEmptyLines !== false ? trimCharacter(str, '\\n') : str).split('\\n').map(line => '> ' + line).join('\\n')\n  });\n}\nfunction withBrackets(str, brackets) {\n  if (!brackets) {\n    return str;\n  }\n  const lbr = typeof brackets[0] === 'string' ? brackets[0] : '[';\n  const rbr = typeof brackets[1] === 'string' ? brackets[1] : ']';\n  return lbr + str + rbr;\n}\nfunction pathRewrite(path, rewriter, baseUrl, metadata, elem) {\n  const modifiedPath = typeof rewriter === 'function' ? rewriter(path, metadata, elem) : path;\n  return modifiedPath[0] === '/' && baseUrl ? trimCharacterEnd(baseUrl, '/') + modifiedPath : modifiedPath;\n}\n\n/**\n * Process an image.\n *\n * @type { FormatCallback }\n */\nfunction formatImage(elem, walk, builder, formatOptions) {\n  const attribs = elem.attribs || {};\n  const alt = attribs.alt ? attribs.alt : '';\n  const src = !attribs.src ? '' : pathRewrite(attribs.src, formatOptions.pathRewrite, formatOptions.baseUrl, builder.metadata, elem);\n  const text = !src ? alt : !alt ? withBrackets(src, formatOptions.linkBrackets) : alt + ' ' + withBrackets(src, formatOptions.linkBrackets);\n  builder.addInline(text, {\n    noWordTransform: true\n  });\n}\n\n// a img baseUrl\n// a img pathRewrite\n// a img linkBrackets\n\n// a     ignoreHref: false\n//            ignoreText ?\n// a     noAnchorUrl: true\n//            can be replaced with selector\n// a     hideLinkHrefIfSameAsText: false\n//            how to compare, what to show (text, href, normalized) ?\n// a     mailto protocol removed without options\n\n// a     protocols: mailto, tel, ...\n//            can be matched with selector?\n\n// anchors, protocols - only if no pathRewrite fn is provided\n\n// normalize-url ?\n\n// a\n// a[href^=\"#\"] - format:skip by default\n// a[href^=\"mailto:\"] - ?\n\n/**\n * Process an anchor.\n *\n * @type { FormatCallback }\n */\nfunction formatAnchor(elem, walk, builder, formatOptions) {\n  function getHref() {\n    if (formatOptions.ignoreHref) {\n      return '';\n    }\n    if (!elem.attribs || !elem.attribs.href) {\n      return '';\n    }\n    let href = elem.attribs.href.replace(/^mailto:/, '');\n    if (formatOptions.noAnchorUrl && href[0] === '#') {\n      return '';\n    }\n    href = pathRewrite(href, formatOptions.pathRewrite, formatOptions.baseUrl, builder.metadata, elem);\n    return href;\n  }\n  const href = getHref();\n  if (!href) {\n    walk(elem.children, builder);\n  } else {\n    let text = '';\n    builder.pushWordTransform(str => {\n      if (str) {\n        text += str;\n      }\n      return str;\n    });\n    walk(elem.children, builder);\n    builder.popWordTransform();\n    const hideSameLink = formatOptions.hideLinkHrefIfSameAsText && href === text;\n    if (!hideSameLink) {\n      builder.addInline(!text ? href : ' ' + withBrackets(href, formatOptions.linkBrackets), {\n        noWordTransform: true\n      });\n    }\n  }\n}\n\n/**\n * @param { DomNode }           elem               List items with their prefixes.\n * @param { RecursiveCallback } walk               Recursive callback to process child nodes.\n * @param { BlockTextBuilder }  builder            Passed around to accumulate output text.\n * @param { FormatOptions }     formatOptions      Options specific to a formatter.\n * @param { () => string }      nextPrefixCallback Function that returns increasing index each time it is called.\n */\nfunction formatList(elem, walk, builder, formatOptions, nextPrefixCallback) {\n  const isNestedList = get(elem, ['parent', 'name']) === 'li';\n\n  // With Roman numbers, index length is not as straightforward as with Arabic numbers or letters,\n  // so the dumb length comparison is the most robust way to get the correct value.\n  let maxPrefixLength = 0;\n  const listItems = (elem.children || []\n  // it might be more accurate to check only for html spaces here, but no significant benefit\n  ).filter(child => child.type !== 'text' || !/^\\s*$/.test(child.data)).map(function (child) {\n    if (child.name !== 'li') {\n      return {\n        node: child,\n        prefix: ''\n      };\n    }\n    const prefix = isNestedList ? nextPrefixCallback().trimStart() : nextPrefixCallback();\n    if (prefix.length > maxPrefixLength) {\n      maxPrefixLength = prefix.length;\n    }\n    return {\n      node: child,\n      prefix: prefix\n    };\n  });\n  if (!listItems.length) {\n    return;\n  }\n  builder.openList({\n    interRowLineBreaks: 1,\n    leadingLineBreaks: isNestedList ? 1 : formatOptions.leadingLineBreaks || 2,\n    maxPrefixLength: maxPrefixLength,\n    prefixAlign: 'left'\n  });\n  for (const {\n    node,\n    prefix\n  } of listItems) {\n    builder.openListItem({\n      prefix: prefix\n    });\n    walk([node], builder);\n    builder.closeListItem();\n  }\n  builder.closeList({\n    trailingLineBreaks: isNestedList ? 1 : formatOptions.trailingLineBreaks || 2\n  });\n}\n\n/**\n * Process an unordered list.\n *\n * @type { FormatCallback }\n */\nfunction formatUnorderedList(elem, walk, builder, formatOptions) {\n  const prefix = formatOptions.itemPrefix || ' * ';\n  return formatList(elem, walk, builder, formatOptions, () => prefix);\n}\n\n/**\n * Process an ordered list.\n *\n * @type { FormatCallback }\n */\nfunction formatOrderedList(elem, walk, builder, formatOptions) {\n  let nextIndex = Number(elem.attribs.start || '1');\n  const indexFunction = getOrderedListIndexFunction(elem.attribs.type);\n  const nextPrefixCallback = () => ' ' + indexFunction(nextIndex++) + '. ';\n  return formatList(elem, walk, builder, formatOptions, nextPrefixCallback);\n}\n\n/**\n * Return a function that can be used to generate index markers of a specified format.\n *\n * @param   { string } [olType='1'] Marker type.\n * @returns { (i: number) => string }\n */\nfunction getOrderedListIndexFunction(olType = '1') {\n  switch (olType) {\n    case 'a':\n      return i => numberToLetterSequence(i, 'a');\n    case 'A':\n      return i => numberToLetterSequence(i, 'A');\n    case 'i':\n      return i => numberToRoman(i).toLowerCase();\n    case 'I':\n      return i => numberToRoman(i);\n    case '1':\n    default:\n      return i => i.toString();\n  }\n}\n\n/**\n * Given a list of class and ID selectors (prefixed with '.' and '#'),\n * return them as separate lists of names without prefixes.\n *\n * @param { string[] } selectors Class and ID selectors (`[\".class\", \"#id\"]` etc).\n * @returns { { classes: string[], ids: string[] } }\n */\nfunction splitClassesAndIds(selectors) {\n  const classes = [];\n  const ids = [];\n  for (const selector of selectors) {\n    if (selector.startsWith('.')) {\n      classes.push(selector.substring(1));\n    } else if (selector.startsWith('#')) {\n      ids.push(selector.substring(1));\n    }\n  }\n  return {\n    classes: classes,\n    ids: ids\n  };\n}\nfunction isDataTable(attr, tables) {\n  if (tables === true) {\n    return true;\n  }\n  if (!attr) {\n    return false;\n  }\n  const {\n    classes,\n    ids\n  } = splitClassesAndIds(tables);\n  const attrClasses = (attr['class'] || '').split(' ');\n  const attrIds = (attr['id'] || '').split(' ');\n  return attrClasses.some(x => classes.includes(x)) || attrIds.some(x => ids.includes(x));\n}\n\n/**\n * Process a table (either as a container or as a data table, depending on options).\n *\n * @type { FormatCallback }\n */\nfunction formatTable(elem, walk, builder, formatOptions) {\n  return isDataTable(elem.attribs, builder.options.tables) ? formatDataTable(elem, walk, builder, formatOptions) : formatBlock(elem, walk, builder, formatOptions);\n}\nfunction formatBlock(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks\n  });\n  walk(elem.children, builder);\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks\n  });\n}\n\n/**\n * Process a data table.\n *\n * @type { FormatCallback }\n */\nfunction formatDataTable(elem, walk, builder, formatOptions) {\n  builder.openTable();\n  elem.children.forEach(walkTable);\n  builder.closeTable({\n    tableToString: rows => tableToString(rows, formatOptions.rowSpacing ?? 0, formatOptions.colSpacing ?? 3),\n    leadingLineBreaks: formatOptions.leadingLineBreaks,\n    trailingLineBreaks: formatOptions.trailingLineBreaks\n  });\n  function formatCell(cellNode) {\n    const colspan = +get(cellNode, ['attribs', 'colspan']) || 1;\n    const rowspan = +get(cellNode, ['attribs', 'rowspan']) || 1;\n    builder.openTableCell({\n      maxColumnWidth: formatOptions.maxColumnWidth\n    });\n    walk(cellNode.children, builder);\n    builder.closeTableCell({\n      colspan: colspan,\n      rowspan: rowspan\n    });\n  }\n  function walkTable(elem) {\n    if (elem.type !== 'tag') {\n      return;\n    }\n    const formatHeaderCell = formatOptions.uppercaseHeaderCells !== false ? cellNode => {\n      builder.pushWordTransform(str => str.toUpperCase());\n      formatCell(cellNode);\n      builder.popWordTransform();\n    } : formatCell;\n    switch (elem.name) {\n      case 'thead':\n      case 'tbody':\n      case 'tfoot':\n      case 'center':\n        elem.children.forEach(walkTable);\n        return;\n      case 'tr':\n        {\n          builder.openTableRow();\n          for (const childOfTr of elem.children) {\n            if (childOfTr.type !== 'tag') {\n              continue;\n            }\n            switch (childOfTr.name) {\n              case 'th':\n                {\n                  formatHeaderCell(childOfTr);\n                  break;\n                }\n              case 'td':\n                {\n                  formatCell(childOfTr);\n                  break;\n                }\n              // do nothing\n            }\n          }\n          builder.closeTableRow();\n          break;\n        }\n      // do nothing\n    }\n  }\n}\nvar textFormatters = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  anchor: formatAnchor,\n  blockquote: formatBlockquote,\n  dataTable: formatDataTable,\n  heading: formatHeading,\n  horizontalLine: formatHorizontalLine,\n  image: formatImage,\n  lineBreak: formatLineBreak,\n  orderedList: formatOrderedList,\n  paragraph: formatParagraph,\n  pre: formatPre,\n  table: formatTable,\n  unorderedList: formatUnorderedList,\n  wbr: formatWbr\n});\n\n/**\n * Default options.\n *\n * @constant\n * @type { Options }\n * @default\n * @private\n */\nconst DEFAULT_OPTIONS = {\n  baseElements: {\n    selectors: ['body'],\n    orderBy: 'selectors',\n    // 'selectors' | 'occurrence'\n    returnDomByDefault: true\n  },\n  decodeEntities: true,\n  encodeCharacters: {},\n  formatters: {},\n  limits: {\n    ellipsis: '...',\n    maxBaseElements: undefined,\n    maxChildNodes: undefined,\n    maxDepth: undefined,\n    maxInputLength: 1 << 24 // 16_777_216\n  },\n  longWordSplit: {\n    forceWrapOnLimit: false,\n    wrapCharacters: []\n  },\n  preserveNewlines: false,\n  selectors: [{\n    selector: '*',\n    format: 'inline'\n  }, {\n    selector: 'a',\n    format: 'anchor',\n    options: {\n      baseUrl: null,\n      hideLinkHrefIfSameAsText: false,\n      ignoreHref: false,\n      linkBrackets: ['[', ']'],\n      noAnchorUrl: true\n    }\n  }, {\n    selector: 'article',\n    format: 'block',\n    options: {\n      leadingLineBreaks: 1,\n      trailingLineBreaks: 1\n    }\n  }, {\n    selector: 'aside',\n    format: 'block',\n    options: {\n      leadingLineBreaks: 1,\n      trailingLineBreaks: 1\n    }\n  }, {\n    selector: 'blockquote',\n    format: 'blockquote',\n    options: {\n      leadingLineBreaks: 2,\n      trailingLineBreaks: 2,\n      trimEmptyLines: true\n    }\n  }, {\n    selector: 'br',\n    format: 'lineBreak'\n  }, {\n    selector: 'div',\n    format: 'block',\n    options: {\n      leadingLineBreaks: 1,\n      trailingLineBreaks: 1\n    }\n  }, {\n    selector: 'footer',\n    format: 'block',\n    options: {\n      leadingLineBreaks: 1,\n      trailingLineBreaks: 1\n    }\n  }, {\n    selector: 'form',\n    format: 'block',\n    options: {\n      leadingLineBreaks: 1,\n      trailingLineBreaks: 1\n    }\n  }, {\n    selector: 'h1',\n    format: 'heading',\n    options: {\n      leadingLineBreaks: 3,\n      trailingLineBreaks: 2,\n      uppercase: true\n    }\n  }, {\n    selector: 'h2',\n    format: 'heading',\n    options: {\n      leadingLineBreaks: 3,\n      trailingLineBreaks: 2,\n      uppercase: true\n    }\n  }, {\n    selector: 'h3',\n    format: 'heading',\n    options: {\n      leadingLineBreaks: 3,\n      trailingLineBreaks: 2,\n      uppercase: true\n    }\n  }, {\n    selector: 'h4',\n    format: 'heading',\n    options: {\n      leadingLineBreaks: 2,\n      trailingLineBreaks: 2,\n      uppercase: true\n    }\n  }, {\n    selector: 'h5',\n    format: 'heading',\n    options: {\n      leadingLineBreaks: 2,\n      trailingLineBreaks: 2,\n      uppercase: true\n    }\n  }, {\n    selector: 'h6',\n    format: 'heading',\n    options: {\n      leadingLineBreaks: 2,\n      trailingLineBreaks: 2,\n      uppercase: true\n    }\n  }, {\n    selector: 'header',\n    format: 'block',\n    options: {\n      leadingLineBreaks: 1,\n      trailingLineBreaks: 1\n    }\n  }, {\n    selector: 'hr',\n    format: 'horizontalLine',\n    options: {\n      leadingLineBreaks: 2,\n      length: undefined,\n      trailingLineBreaks: 2\n    }\n  }, {\n    selector: 'img',\n    format: 'image',\n    options: {\n      baseUrl: null,\n      linkBrackets: ['[', ']']\n    }\n  }, {\n    selector: 'main',\n    format: 'block',\n    options: {\n      leadingLineBreaks: 1,\n      trailingLineBreaks: 1\n    }\n  }, {\n    selector: 'nav',\n    format: 'block',\n    options: {\n      leadingLineBreaks: 1,\n      trailingLineBreaks: 1\n    }\n  }, {\n    selector: 'ol',\n    format: 'orderedList',\n    options: {\n      leadingLineBreaks: 2,\n      trailingLineBreaks: 2\n    }\n  }, {\n    selector: 'p',\n    format: 'paragraph',\n    options: {\n      leadingLineBreaks: 2,\n      trailingLineBreaks: 2\n    }\n  }, {\n    selector: 'pre',\n    format: 'pre',\n    options: {\n      leadingLineBreaks: 2,\n      trailingLineBreaks: 2\n    }\n  }, {\n    selector: 'section',\n    format: 'block',\n    options: {\n      leadingLineBreaks: 1,\n      trailingLineBreaks: 1\n    }\n  }, {\n    selector: 'table',\n    format: 'table',\n    options: {\n      colSpacing: 3,\n      leadingLineBreaks: 2,\n      maxColumnWidth: 60,\n      rowSpacing: 0,\n      trailingLineBreaks: 2,\n      uppercaseHeaderCells: true\n    }\n  }, {\n    selector: 'ul',\n    format: 'unorderedList',\n    options: {\n      itemPrefix: ' * ',\n      leadingLineBreaks: 2,\n      trailingLineBreaks: 2\n    }\n  }, {\n    selector: 'wbr',\n    format: 'wbr'\n  }],\n  tables: [],\n  // deprecated\n  whitespaceCharacters: ' \\t\\r\\n\\f\\u200b',\n  wordwrap: 80\n};\nconst concatMerge = (acc, src, options) => [...acc, ...src];\nconst overwriteMerge = (acc, src, options) => [...src];\nconst selectorsMerge = (acc, src, options) => acc.some(s => typeof s === 'object') ? concatMerge(acc, src) // selectors\n: overwriteMerge(acc, src) // baseElements.selectors\n;\n\n/**\n * Preprocess options, compile selectors into a decision tree,\n * return a function intended for batch processing.\n *\n * @param   { Options } [options = {}]   HtmlToText options.\n * @returns { (html: string, metadata?: any) => string } Pre-configured converter function.\n * @static\n */\nfunction compile(options = {}) {\n  options = merge(DEFAULT_OPTIONS, options, {\n    arrayMerge: overwriteMerge,\n    customMerge: key => key === 'selectors' ? selectorsMerge : undefined\n  });\n  options.formatters = Object.assign({}, genericFormatters, textFormatters, options.formatters);\n  options.selectors = mergeDuplicatesPreferLast(options.selectors, s => s.selector);\n  handleDeprecatedOptions(options);\n  return compile$1(options);\n}\n\n/**\n * Convert given HTML content to plain text string.\n *\n * @param   { string }  html           HTML content to convert.\n * @param   { Options } [options = {}] HtmlToText options.\n * @param   { any }     [metadata]     Optional metadata for HTML document, for use in formatters.\n * @returns { string }                 Plain text string.\n * @static\n *\n * @example\n * const { convert } = require('html-to-text');\n * const text = convert('<h1>Hello World</h1>', {\n *   wordwrap: 130\n * });\n * console.log(text); // HELLO WORLD\n */\nfunction convert(html, options = {}, metadata = undefined) {\n  return compile(options)(html, metadata);\n}\n\n/**\n * Map previously existing and now deprecated options to the new options layout.\n * This is a subject for cleanup in major releases.\n *\n * @param { Options } options HtmlToText options.\n */\nfunction handleDeprecatedOptions(options) {\n  if (options.tags) {\n    const tagDefinitions = Object.entries(options.tags).map(([selector, definition]) => ({\n      ...definition,\n      selector: selector || '*'\n    }));\n    options.selectors.push(...tagDefinitions);\n    options.selectors = mergeDuplicatesPreferLast(options.selectors, s => s.selector);\n  }\n  function set(obj, path, value) {\n    const valueKey = path.pop();\n    for (const key of path) {\n      let nested = obj[key];\n      if (!nested) {\n        nested = {};\n        obj[key] = nested;\n      }\n      obj = nested;\n    }\n    obj[valueKey] = value;\n  }\n  if (options['baseElement']) {\n    const baseElement = options['baseElement'];\n    set(options, ['baseElements', 'selectors'], Array.isArray(baseElement) ? baseElement : [baseElement]);\n  }\n  if (options['returnDomByDefault'] !== undefined) {\n    set(options, ['baseElements', 'returnDomByDefault'], options['returnDomByDefault']);\n  }\n  for (const definition of options.selectors) {\n    if (definition.format === 'anchor' && get(definition, ['options', 'noLinkBrackets'])) {\n      set(definition, ['options', 'linkBrackets'], false);\n    }\n  }\n}\nexport { compile, convert, convert as htmlToText };"],
  "mappings": "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,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,IAAI,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG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",
  "names": ["isMergeableObject", "ElementType", "Text", "Comment", "name", "_a", "CDATA", "isTag", "Text", "Comment", "isTag", "CDATA", "name", "Text", "Comment", "CDATA", "n", "o", "e", "s", "r", "l", "t", "c", "r", "r", "r", "r", "acc", "t", "name", "s", "c", "left", "right", "token", "r", "nl", "n", "ast", "name", "isTag", "c", "c", "_a", "CharCodes", "BinTrieFlags", "EntityDecoderState", "DecodingMode", "_a", "CharCodes", "State", "c", "isNumber", "QuoteType", "_a", "name", "c", "map", "escape", "EntityLevel", "EncodingMode", "_a", "_a", "DocumentPosition", "n", "c", "map", "merge", "tableToString", "s", "recursiveWalk", "dom", "r", "href", "elem"]
}
